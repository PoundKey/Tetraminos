<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="parser_8js" kind="file">
    <compoundname>parser.js</compoundname>
      <sectiondef kind="var">
      <memberdef kind="variable" id="parser_8js_1aebcdd70130f7e0b00b39cc981ab0bab0" prot="public" static="no" mutable="no">
        <type>var</type>
        <definition>var fs</definition>
        <argsstring></argsstring>
        <name>fs</name>
        <initializer>= require(&apos;fs&apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Created by CTXue on 14-10-17. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/CPSC410/Parser/parser.js" line="5" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/CPSC410/Parser/parser.js" bodystart="5" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="parser_8js_1a09287378ba2b7570b285c70f91775636" prot="public" static="no" mutable="no">
        <type>var</type>
        <definition>var parseString</definition>
        <argsstring></argsstring>
        <name>parseString</name>
        <initializer>= require(&apos;./node_modules/xml2js&apos;).parseString</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/CPSC410/Parser/parser.js" line="6" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/CPSC410/Parser/parser.js" bodystart="6" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="parser_8js_1a970fb5cb433764fc238655c154eadd68" prot="public" static="no" mutable="no">
        <type>var</type>
        <definition>var readlineSync</definition>
        <argsstring></argsstring>
        <name>readlineSync</name>
        <initializer>= require(&apos;./node_modules/readline-sync&apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/CPSC410/Parser/parser.js" line="7" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/CPSC410/Parser/parser.js" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="parser_8js_1ad089af10ceb472f4bcb03df62cbcda06" prot="public" static="no" mutable="no">
        <type>var</type>
        <definition>var cod</definition>
        <argsstring></argsstring>
        <name>cod</name>
        <initializer>= readlineSync.question(&apos;Enter the input source codebase: &apos;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/CPSC410/Parser/parser.js" line="9" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/CPSC410/Parser/parser.js" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="parser_8js_1aab571b38370f7bf756d9ac2fd1f9e445" prot="public" static="no" mutable="no">
        <type>var</type>
        <definition>var inputCodeBase</definition>
        <argsstring></argsstring>
        <name>inputCodeBase</name>
        <initializer>= &apos;./Source/xml_&apos; + cod</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/CPSC410/Parser/parser.js" line="11" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/CPSC410/Parser/parser.js" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="parser_8js_1a4272cecb89fff17d861169c2e03da096" prot="public" static="no" mutable="no">
        <type>var</type>
        <definition>var staticInfo</definition>
        <argsstring></argsstring>
        <name>staticInfo</name>
        <initializer>= []</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/CPSC410/Parser/parser.js" line="13" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/CPSC410/Parser/parser.js" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="parser_8js_1aa4db9555680b2323b626d1410dff6ceb" prot="public" static="no" mutable="no">
        <type>var</type>
        <definition>writeOutput</definition>
        <argsstring></argsstring>
        <name>writeOutput</name>
        <initializer>= {&apos;staticInfo&apos;: staticInfo}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/CPSC410/Parser/parser.js" line="14" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/CPSC410/Parser/parser.js" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="parser_8js_1af18057b1400079d69ffa1c14ea302864" prot="public" static="no" mutable="no">
        <type>var</type>
        <definition>var fileList</definition>
        <argsstring></argsstring>
        <name>fileList</name>
        <initializer>= fs.readdirSync(inputCodeBase)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/CPSC410/Parser/parser.js" line="15" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/CPSC410/Parser/parser.js" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="parser_8js_1ab45ea2d2ab471a8eef5251ac0ac815ed" prot="public" static="no" mutable="no">
        <type>var</type>
        <definition>var fileSize</definition>
        <argsstring></argsstring>
        <name>fileSize</name>
        <initializer>= undefined</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/CPSC410/Parser/parser.js" line="16" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/CPSC410/Parser/parser.js" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="parser_8js_1ab529e33989c52dafb97e2b4a386bc28f" prot="public" static="no" mutable="no">
        <type>var</type>
        <definition>var classList</definition>
        <argsstring></argsstring>
        <name>classList</name>
        <initializer>= []</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/CPSC410/Parser/parser.js" line="18" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/CPSC410/Parser/parser.js" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="parser_8js_1a38b64d84a78181d33c975209b677143f" prot="public" static="no" mutable="no">
        <type>var</type>
        <definition>var defineNameSpace</definition>
        <argsstring></argsstring>
        <name>defineNameSpace</name>
        <initializer>= function(){
    switch(cod){
        case &quot;bejew&quot;:
            namespace = &quot;bejeweled::&quot;;
            break;
        case &quot;maryo&quot;:
            namespace = &quot;SMC::&quot;;
            break;
        case &quot;sudoku&quot;:
            namespace = &quot;&quot;;
            break;
        default:
            namespace = &quot;&quot;;
            break;
    }
}

defineNameSpace()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>change the namespace with corresponding codebases </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/CPSC410/Parser/parser.js" line="26" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/CPSC410/Parser/parser.js" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="parser_8js_1aa7e79792bba60d8ece5d2d3e041ebd46" prot="public" static="no" mutable="no">
        <type>var</type>
        <definition>var gatherClass</definition>
        <argsstring></argsstring>
        <name>gatherClass</name>
        <initializer>= function() {

    fileList.forEach(function (file) {

        if (file.search(&apos;.xml&apos;) == -1) return;
        var path = inputCodeBase + &quot;/&quot; + file;

        var classFile = fs.readFileSync(path, &apos;utf8&apos;);
        parseString(classFile, function (err, result) {
					console.log(&apos;Current File: &apos; + path);
            if (result.doxygen == undefined) return;
            var obj = result.doxygen.compounddef[0];
            switch (obj.$.kind) {
                case &apos;class&apos;:
                
                var output = obj.compoundname[0];
                classList.push(output);
                break;

                default :
                break;
            }
        });
    });
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gather the class list from current codebase </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/CPSC410/Parser/parser.js" line="48" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/CPSC410/Parser/parser.js" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="parser_8js_1a19bb37a046dc26f19992a923d22e7e28" prot="public" static="no" mutable="no">
        <type>var</type>
        <definition>var classInfo</definition>
        <argsstring></argsstring>
        <name>classInfo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/CPSC410/Parser/parser.js" line="89" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/CPSC410/Parser/parser.js" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="parser_8js_1a091c770dc3f275ec5bf04439a9095aa5" prot="public" static="no" mutable="no">
        <type>var</type>
        <definition>var fileInfo</definition>
        <argsstring></argsstring>
        <name>fileInfo</name>
        <initializer>= function (_file) {
    

}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/CPSC410/Parser/parser.js" line="174" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/CPSC410/Parser/parser.js" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="parser_8js_1a873f2408012dd0c39e0d8ecfe4e1e9ca" prot="public" static="no" mutable="no">
        <type>var</type>
        <definition>var structInfo</definition>
        <argsstring></argsstring>
        <name>structInfo</name>
        <initializer>= function (_struct) {
    

}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/CPSC410/Parser/parser.js" line="179" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/CPSC410/Parser/parser.js" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="parser_8js_1a4a4115c3dab745ffd642b4b4efaa51bb" prot="public" static="no" mutable="no">
        <type>var</type>
        <definition>var outputFilename</definition>
        <argsstring></argsstring>
        <name>outputFilename</name>
        <initializer>= cod + &apos;.json&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/CPSC410/Parser/parser.js" line="230" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/CPSC410/Parser/parser.js" bodystart="230" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="parser_8js_1a68cdd35ee0b4bea1dca7535ac006fbfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gatherClass</definition>
        <argsstring>()</argsstring>
        <name>gatherClass</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>end of gather the class list from current codebase </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/CPSC410/Parser/parser.js" line="82" column="1"/>
      </memberdef>
      <memberdef kind="function" id="parser_8js_1ac1306d7f2b150170ac875880eee5ff58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>fileList</type>
        <definition>fileList forEach</definition>
        <argsstring>(function(file){if(file.search(&apos;.xml&apos;)==-1) return;var path=inputCodeBase+&quot;/&quot;+file;var stats=fs.statSync(path);fileSize=stats.size;var classFile=fs.readFileSync(path, &apos;utf8&apos;);parseString(classFile, function(err, result){if(result.doxygen==undefined) return;var obj=result.doxygen.compounddef[0];switch(obj.$.kind){case &apos;class&apos;:var output=classInfo(obj);staticInfo.push(output);break;case &apos;file&apos;:fileInfo(obj);break;case &apos;struct&apos;:structInfo(obj);break;default:console.dir(&quot;unknown: &quot;+path);break;}});})</argsstring>
        <name>forEach</name>
        <param>
          <type>function(file){if(file.search(&apos;.xml&apos;)==-1) return;var path=inputCodeBase+&quot;/&quot;+file;var stats=fs.statSync(path);fileSize=stats.size;var classFile=fs.readFileSync(path, &apos;utf8&apos;);parseString(classFile, function(err, result){if(result.doxygen==undefined) return;var obj=result.doxygen.compounddef[0];switch(obj.$.kind){case &apos;class&apos;:var output=classInfo(obj);staticInfo.push(output);break;case &apos;file&apos;:fileInfo(obj);break;case &apos;struct&apos;:structInfo(obj);break;default:console.dir(&quot;unknown: &quot;+path);break;}});}</type>
          <defname>function(file){if(file.search(&apos;.xml&apos;)==-1) return;var path=inputCodeBase+&quot;/&quot;+file;var stats=fs.statSync(path);fileSize=stats.size;var classFile=fs.readFileSync(path, &apos;utf8&apos;);parseString(classFile, function(err, result){if(result.doxygen==undefined) return;var obj=result.doxygen.compounddef[0];switch(obj.$.kind){case &apos;class&apos;:var output=classInfo(obj);staticInfo.push(output);break;case &apos;file&apos;:fileInfo(obj);break;case &apos;struct&apos;:structInfo(obj);break;default:console.dir(&quot;unknown: &quot;+path);break;}});}</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/CPSC410/Parser/parser.js" line="185" column="1"/>
      </memberdef>
      <memberdef kind="function" id="parser_8js_1af8a5de8f33af547c8ae394d9b0b5f142" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>fs</type>
        <definition>fs writeFile</definition>
        <argsstring>(outputFilename, JSON.stringify(writeOutput, null, 4), &apos;utf8&apos;, function(err){err?console.dir(err):console.dir(&quot;Static info successfully saved to: &quot;+outputFilename);})</argsstring>
        <name>writeFile</name>
        <param>
          <type>outputFilename</type>
          <defname>outputFilename</defname>
        </param>
        <param>
          <type>JSON.</type>
          <declname>stringify</declname>
          <array>writeOutput, null, 4</array>
        </param>
        <param>
          <type>&apos;utf8&apos;</type>
          <defname>&apos;utf8&apos;</defname>
        </param>
        <param>
          <type>function(err){err?console.dir(err):console.dir(&quot;Static info successfully saved to: &quot;+outputFilename);}</type>
          <defname>function(err){err?console.dir(err):console.dir(&quot;Static info successfully saved to: &quot;+outputFilename);}</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/CPSC410/Parser/parser.js" line="231" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="5"><highlight class="normal">var<sp/>fs<sp/>=<sp/>require(</highlight><highlight class="stringliteral">&apos;fs&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="6"><highlight class="normal">var<sp/>parseString<sp/>=<sp/>require(</highlight><highlight class="stringliteral">&apos;./node_modules/xml2js&apos;</highlight><highlight class="normal">).parseString;</highlight></codeline>
<codeline lineno="7"><highlight class="normal">var<sp/>readlineSync<sp/>=<sp/>require(</highlight><highlight class="stringliteral">&apos;./node_modules/readline-sync&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//console.log(&quot;Codebase<sp/>options:<sp/>maryo,<sp/>sod,<sp/>bejew,<sp/>sudoku&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal">var<sp/>cod<sp/>=<sp/>readlineSync.question(</highlight><highlight class="stringliteral">&apos;Enter<sp/>the<sp/>input<sp/>source<sp/>codebase:<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal">var<sp/>inputCodeBase<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;./Source/xml_&apos;</highlight><highlight class="normal"><sp/>+<sp/>cod;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal">var<sp/>staticInfo<sp/>=<sp/>[];</highlight></codeline>
<codeline lineno="14"><highlight class="normal">var<sp/>writeOutput;</highlight></codeline>
<codeline lineno="15"><highlight class="normal">var<sp/>fileList<sp/>=<sp/>fs.readdirSync(inputCodeBase);</highlight></codeline>
<codeline lineno="16"><highlight class="normal">var<sp/>fileSize<sp/>=<sp/>undefined;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//the<sp/>class<sp/>list<sp/>which<sp/>contains<sp/>all<sp/>major<sp/>classes<sp/>in<sp/>this<sp/>codebase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal">var<sp/>classList<sp/>=<sp/>[];</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//the<sp/>namespace<sp/>used<sp/>in<sp/>front<sp/>of<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal">var<sp/></highlight><highlight class="keyword">namespace</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal">var<sp/>defineNameSpace<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(){</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(cod){</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;bejew&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">=<sp/>&quot;bejeweled::&quot;;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>&quot;maryo&quot;:</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namespace<sp/>=<sp/>&quot;SMC::&quot;;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>&quot;sudoku&quot;:</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namespace<sp/>=<sp/>&quot;&quot;;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>namespace<sp/>=<sp/>&quot;&quot;;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">defineNameSpace();</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/>var<sp/>gatherClass<sp/>=<sp/>function()<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>fileList.forEach(</highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>(file)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file.search(</highlight><highlight class="stringliteral">&apos;.xml&apos;</highlight><highlight class="normal">)<sp/>==<sp/>-1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>path<sp/>=<sp/>inputCodeBase<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>+<sp/>file;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>classFile<sp/>=<sp/>fs.readFileSync(path,<sp/></highlight><highlight class="stringliteral">&apos;utf8&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parseString(classFile,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>(err,<sp/>result)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>console.log(</highlight><highlight class="stringliteral">&apos;Current<sp/>File:<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>path);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result.doxygen<sp/>==<sp/>undefined)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>obj<sp/>=<sp/>result.doxygen.compounddef[0];</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(obj.$.kind)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;class&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//console.dir(&quot;class:<sp/>&quot;<sp/>+<sp/>path);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>output<sp/>=<sp/>obj.compoundname[0];</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>classList.push(output);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal"><sp/>:</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="72"><highlight class="normal">};</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/>initialize<sp/>the<sp/>classList<sp/>array</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal">gatherClass();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//console.log(classList);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/>Refactor<sp/>a<sp/>file<sp/>class<sp/>object<sp/>from<sp/>the<sp/>xml<sp/>and<sp/>output<sp/>information<sp/>as<sp/>a<sp/>JSON<sp/>object</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal">var<sp/>classInfo<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>(_class)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//information<sp/>will<sp/>be<sp/>used<sp/>to<sp/>return<sp/>a<sp/>json<sp/>object<sp/>from<sp/>a<sp/>the<sp/>translated<sp/>json<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>className<sp/>=<sp/>_class.compoundname[0];</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>method<sp/>=<sp/>[];</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>field<sp/>=<sp/>[];</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>inheritance;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>dependency<sp/>=<sp/>[];</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>size;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>output;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>fileSize<sp/>?<sp/>size<sp/>=<sp/>fileSize<sp/>:<sp/>size<sp/>=<sp/>undefined;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//console.log(&quot;ClassName:<sp/>&quot;<sp/>+<sp/>className<sp/>+<sp/>&quot;<sp/>Size:<sp/>&quot;+<sp/>size);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//console.log(JSON.stringify(_class,<sp/>null,<sp/>4));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>_class.basecompoundref<sp/>?<sp/>inheritance<sp/>=<sp/>_class.basecompoundref[0]._<sp/>:<sp/>inheritance=</highlight><highlight class="stringliteral">&quot;N/A&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//entityArray,<sp/>length<sp/>in<sp/>2<sp/>or<sp/>1,<sp/>each<sp/>contains<sp/>set<sp/>of<sp/>attributes<sp/>or<sp/>methods.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>entityArray<sp/>=<sp/>_class.sectiondef;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!entityArray)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>entityArray.forEach(</highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>(entity)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//type<sp/>of<sp/>the<sp/>entity:<sp/>attrib<sp/>vs<sp/>func</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>entityType<sp/>=<sp/>entity.$.kind;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>member<sp/>definition<sp/>[Array]<sp/>inside<sp/>of<sp/>the<sp/>entity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>memDef<sp/>=<sp/>entity.memberdef;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>console.dir(entity);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entityType.search(</highlight><highlight class="stringliteral">&apos;attrib&apos;</highlight><highlight class="normal">)<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//loop<sp/>through<sp/>each<sp/>attribute<sp/>inside<sp/>of<sp/>member<sp/>definition<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memDef.forEach(</highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>(attr)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//double<sp/>check<sp/>the<sp/>attribute<sp/>is<sp/>a<sp/>field<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>typeCheck<sp/>=<sp/>attr.$.kind;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(typeCheck<sp/>!=<sp/></highlight><highlight class="stringliteral">&apos;variable&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(field.indexOf(attr.name[0])<sp/>==<sp/>-1){</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>field.push(attr.name[0]);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>fieldType;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ref<sp/>is<sp/>an<sp/>array<sp/>contains<sp/>the<sp/>className<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>typeCheckField<sp/>=<sp/>attr.type[0].ref<sp/>;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//type<sp/>check<sp/>for<sp/>class<sp/>field,<sp/>which<sp/>outputs<sp/>a<sp/>class<sp/>name<sp/>if<sp/>it<sp/>has<sp/>any.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typeCheckField<sp/>?<sp/>fieldType<sp/>=<sp/>typeCheckField[0]._<sp/>:<sp/>fieldType<sp/>=<sp/>null;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//console.log(&quot;Name:<sp/>&quot;<sp/>+<sp/>attr.name[0]<sp/>+<sp/>&quot;<sp/>==&gt;<sp/>&quot;<sp/>+<sp/>JSON.stringify(fieldType));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>NS_fieldType<sp/>=<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">+<sp/>fieldType;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(classList.indexOf(NS_fieldType)<sp/>&gt;<sp/>-1){</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dependency.indexOf(NS_fieldType)<sp/>==<sp/>-1){</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dependency.push(NS_fieldType);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//console.log(&quot;Name:<sp/>&quot;<sp/>+<sp/>attr.name[0]<sp/>+<sp/>&quot;<sp/>==&gt;<sp/>&quot;<sp/>+<sp/>JSON.stringify(fieldType));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(entityType.search(</highlight><highlight class="stringliteral">&apos;func&apos;</highlight><highlight class="normal">)<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memDef.forEach(</highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>(func)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//console.dir(func);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>typeCheck<sp/>=<sp/>func.$.kind;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(typeCheck<sp/>!=<sp/></highlight><highlight class="stringliteral">&apos;function&apos;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(method.indexOf(func.name[0])<sp/>==<sp/>-1){</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>method.push(func.name[0]);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>console.log(</highlight><highlight class="stringliteral">&apos;Entity<sp/>has<sp/>not<sp/>been<sp/>defined<sp/>yet&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>output<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;className&apos;</highlight><highlight class="normal">:<sp/>className,<sp/></highlight><highlight class="stringliteral">&apos;method&apos;</highlight><highlight class="normal">:<sp/>method,<sp/></highlight><highlight class="stringliteral">&apos;field&apos;</highlight><highlight class="normal">:<sp/>field,<sp/></highlight><highlight class="stringliteral">&apos;size&apos;</highlight><highlight class="normal">:<sp/>size,</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;inheritance&apos;</highlight><highlight class="normal">:<sp/>inheritance,<sp/></highlight><highlight class="stringliteral">&apos;dependency&apos;</highlight><highlight class="normal">:<sp/>dependency</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//return<sp/>the<sp/>parsed<sp/>info<sp/>for<sp/>single<sp/>xml<sp/>file<sp/>as<sp/>the<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal">};</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal">var<sp/>fileInfo<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>(_file)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//console.dir(_file.$);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal">};</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal">var<sp/>structInfo<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>(_struct)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//console.dir(_struct.$);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal">};</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal">fileList.forEach(</highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>(file)<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file.search(</highlight><highlight class="stringliteral">&apos;.xml&apos;</highlight><highlight class="normal">)<sp/>==<sp/>-1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(file<sp/>!=<sp/>&apos;classc_spiny.xml&apos;)<sp/>return;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>path<sp/>=<sp/>inputCodeBase<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>+<sp/>file;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>stats<sp/>=<sp/>fs.statSync(path);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>fileSize<sp/>=<sp/>stats.size;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>classFile<sp/>=<sp/>fs.readFileSync(path,<sp/></highlight><highlight class="stringliteral">&apos;utf8&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>parseString(classFile,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>(err,<sp/>result)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result.doxygen<sp/>==<sp/>undefined)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>obj<sp/>=<sp/>result.doxygen.compounddef[0];</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>switch<sp/>(obj.$.kind)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/></highlight><highlight class="stringliteral">&apos;class&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//console.dir(&quot;class:<sp/>&quot;<sp/>+<sp/>path);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>output<sp/>=<sp/>classInfo(obj);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>staticInfo.push(output);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/></highlight><highlight class="stringliteral">&apos;file&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//console.dir(&quot;file:<sp/>&quot;<sp/>+<sp/>path);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fileInfo(obj);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/></highlight><highlight class="stringliteral">&apos;struct&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//console.dir(&quot;struct:<sp/>&quot;<sp/>+<sp/>path);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>structInfo(obj);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default<sp/>:</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>console.dir(</highlight><highlight class="stringliteral">&quot;unknown:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>path);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal">});</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal">writeOutput<sp/>=<sp/>{</highlight><highlight class="stringliteral">&apos;staticInfo&apos;</highlight><highlight class="normal">:<sp/>staticInfo};</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="comment">//console.dir(writeOutput);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="comment">//console.dir(JSON.stringify(writeOutput,<sp/>null,<sp/>4));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal">var<sp/>outputFilename<sp/>=<sp/>cod<sp/>+<sp/></highlight><highlight class="stringliteral">&apos;.json&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="231"><highlight class="normal">fs.writeFile(outputFilename,<sp/>JSON.stringify(writeOutput,<sp/>null,<sp/>4),<sp/></highlight><highlight class="stringliteral">&apos;utf8&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>(err)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>err<sp/>?<sp/>console.dir(err)<sp/>:<sp/>console.dir(</highlight><highlight class="stringliteral">&quot;Static<sp/>info<sp/>successfully<sp/>saved<sp/>to:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>outputFilename);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal">});</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/CTXue/Desktop/CPSC/CS410/CPSC410/Parser/parser.js"/>
  </compounddef>
</doxygen>
