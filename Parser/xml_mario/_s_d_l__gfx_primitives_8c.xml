<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="_s_d_l__gfx_primitives_8c" kind="file">
    <compoundname>SDL_gfxPrimitives.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="_s_d_l__gfx_primitives_8h" local="yes">SDL_gfxPrimitives.h</includes>
    <includes refid="_s_d_l__gfx_primitives__font_8h" local="yes">SDL_gfxPrimitives_font.h</includes>
    <incdepgraph>
      <node id="526">
        <label>stdlib.h</label>
      </node>
      <node id="528">
        <label>string.h</label>
      </node>
      <node id="530">
        <label>SDL/SDL.h</label>
      </node>
      <node id="527">
        <label>math.h</label>
      </node>
      <node id="524">
        <label>SDL_gfxPrimitives.c</label>
        <link refid="SDL_gfxPrimitives.c"/>
        <childnode refid="525" relation="include">
        </childnode>
        <childnode refid="526" relation="include">
        </childnode>
        <childnode refid="527" relation="include">
        </childnode>
        <childnode refid="528" relation="include">
        </childnode>
        <childnode refid="529" relation="include">
        </childnode>
        <childnode refid="531" relation="include">
        </childnode>
      </node>
      <node id="529">
        <label>SDL_gfxPrimitives.h</label>
        <link refid="_s_d_l__gfx_primitives_8h_source"/>
        <childnode refid="527" relation="include">
        </childnode>
        <childnode refid="530" relation="include">
        </childnode>
      </node>
      <node id="531">
        <label>SDL_gfxPrimitives_font.h</label>
        <link refid="_s_d_l__gfx_primitives__font_8h_source"/>
      </node>
      <node id="525">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="_s_d_l__gfx_primitives_8c_1adeb851ac45f74ddec914212dd3297433" prot="public" static="no">
        <name>clip_xmin</name>
        <param><defname>surface</defname></param>
        <initializer>surface-&gt;clip_rect.x</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="21" column="9" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_d_l__gfx_primitives_8c_1add68946c6ecf1a5b8935309d30b85cab" prot="public" static="no">
        <name>clip_xmax</name>
        <param><defname>surface</defname></param>
        <initializer>surface-&gt;clip_rect.x+surface-&gt;clip_rect.w-1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="22" column="9" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_d_l__gfx_primitives_8c_1afc94a05f9b044427c21a77cc468aa5d4" prot="public" static="no">
        <name>clip_ymin</name>
        <param><defname>surface</defname></param>
        <initializer>surface-&gt;clip_rect.y</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="23" column="9" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_d_l__gfx_primitives_8c_1a2f0d9475a02c76e14c8bcba854ac7067" prot="public" static="no">
        <name>clip_ymax</name>
        <param><defname>surface</defname></param>
        <initializer>surface-&gt;clip_rect.y+surface-&gt;clip_rect.h-1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="24" column="9" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_d_l__gfx_primitives_8c_1ac7260a99c00538400ab4be67304ad36c" prot="public" static="no">
        <name>CLIP_LEFT_EDGE</name>
        <initializer>0x1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="1145" column="9" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="1145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_d_l__gfx_primitives_8c_1a0f5e2b2e79afa32c688c77f776a84308" prot="public" static="no">
        <name>CLIP_RIGHT_EDGE</name>
        <initializer>0x2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="1146" column="9" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="1146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_d_l__gfx_primitives_8c_1ae4fa529c5f9a39310b98769cdb007c2d" prot="public" static="no">
        <name>CLIP_BOTTOM_EDGE</name>
        <initializer>0x4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="1147" column="9" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="1147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_d_l__gfx_primitives_8c_1acd233fdea48722eb128c4c48f619a605" prot="public" static="no">
        <name>CLIP_TOP_EDGE</name>
        <initializer>0x8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="1148" column="9" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="1148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_d_l__gfx_primitives_8c_1a3f497d83ed5f593a5bc56c2ba7e13f5b" prot="public" static="no">
        <name>CLIP_INSIDE</name>
        <param><defname>a</defname></param>
        <initializer>(!a)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="1149" column="9" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="1149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_d_l__gfx_primitives_8c_1ac1e60af8e37b6b372dcfd2d88299b662" prot="public" static="no">
        <name>CLIP_REJECT</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>(a&amp;b)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="1150" column="9" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="1150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_d_l__gfx_primitives_8c_1a004c35133422cb574c41bb114d4592c6" prot="public" static="no">
        <name>CLIP_ACCEPT</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>(!(a|b))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="1151" column="9" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="1151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_d_l__gfx_primitives_8c_1ae2f08dc603ae93c402abd918ba4e23e1" prot="public" static="no">
        <name>ABS</name>
        <param><defname>a</defname></param>
        <initializer>(((a)&lt;0) ? -(a) : (a))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="1436" column="9" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="1436" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_d_l__gfx_primitives_8c_1a519bc2d4d753c51da1b956d6c200bff1" prot="public" static="no">
        <name>AAlevels</name>
        <initializer>256</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="1642" column="9" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="1642" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_s_d_l__gfx_primitives_8c_1a2e16571bedf7a97c6fc02d86b48994eb" prot="public" static="no">
        <name>AAbits</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="1643" column="9" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="1643" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_s_d_l__gfx_primitives_8c_1aed1856b0361d3b6275b14b1c33584beb" prot="public" static="yes" mutable="no">
        <type>int *</type>
        <definition>int* gfxPrimitivesPolyInts</definition>
        <argsstring></argsstring>
        <name>gfxPrimitivesPolyInts</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="3265" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="3265" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_s_d_l__gfx_primitives_8c_1a2eaacafd4f5a30f5f4cc66654bb25799" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int gfxPrimitivesPolyAllocated</definition>
        <argsstring></argsstring>
        <name>gfxPrimitivesPolyAllocated</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="3266" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="3266" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_s_d_l__gfx_primitives_8c_1a686092e18715396ebb0dbe9b061b8cdf" prot="public" static="yes" mutable="no">
        <type>SDL_Surface *</type>
        <definition>SDL_Surface* gfxPrimitivesFont[256]</definition>
        <argsstring>[256]</argsstring>
        <name>gfxPrimitivesFont</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="3371" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="3371" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_s_d_l__gfx_primitives_8c_1a088102655fa1c3ecf4aa4e7db6097667" prot="public" static="yes" mutable="no">
        <type>Uint32</type>
        <definition>Uint32 gfxPrimitivesFontColor[256]</definition>
        <argsstring>[256]</argsstring>
        <name>gfxPrimitivesFontColor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="3372" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="3372" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1a011e3e26d7216998357fb1a089f8f742" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fastPixelColorNolock</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x, Sint16 y, Uint32 color)</argsstring>
        <name>fastPixelColorNolock</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y</declname>
        </param>
        <param>
          <type>Uint32</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="28" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="28" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1add868bff0c4cb75012a0407af6b64f03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fastPixelColorNolockNoclip</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x, Sint16 y, Uint32 color)</argsstring>
        <name>fastPixelColorNolockNoclip</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y</declname>
        </param>
        <param>
          <type>Uint32</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="76" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="76" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1abeed0e873efdf3aec8c6c86188d36f89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fastPixelColor</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x, Sint16 y, Uint32 color)</argsstring>
        <name>fastPixelColor</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y</declname>
        </param>
        <param>
          <type>Uint32</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="114" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="114" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1a9874fabafdc422223323751671bca7c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fastPixelRGBA</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x, Sint16 y, Uint8 r, Uint8 g, Uint8 b, Uint8 a)</argsstring>
        <name>fastPixelRGBA</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>r</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>g</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="141" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="141" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1a64916bb8270e75d936cda816d3694a25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int fastPixelRGBANolock</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x, Sint16 y, Uint8 r, Uint8 g, Uint8 b, Uint8 a)</argsstring>
        <name>fastPixelRGBANolock</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>r</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>g</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="159" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="159" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1afc720774b39e099ca13df40f86778ec8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int _putPixelAlpha</definition>
        <argsstring>(SDL_Surface *surface, Sint16 x, Sint16 y, Uint32 color, Uint8 alpha)</argsstring>
        <name>_putPixelAlpha</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>surface</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y</declname>
        </param>
        <param>
          <type>Uint32</type>
          <declname>color</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="178" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="178" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1ae6f8690e5c5a85d3263c8e16727b34ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pixelColor</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x, Sint16 y, Uint32 color)</argsstring>
        <name>pixelColor</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y</declname>
        </param>
        <param>
          <type>Uint32</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="295" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="295" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1ae94ba03884eee47c3bcc8e2fc35da9f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pixelColorNolock</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x, Sint16 y, Uint32 color)</argsstring>
        <name>pixelColorNolock</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y</declname>
        </param>
        <param>
          <type>Uint32</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="333" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="333" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1ae4c5ca1b89d06a7da6346115fbbd76f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int _filledRectAlpha</definition>
        <argsstring>(SDL_Surface *surface, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 color, Uint8 alpha)</argsstring>
        <name>_filledRectAlpha</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>surface</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y2</declname>
        </param>
        <param>
          <type>Uint32</type>
          <declname>color</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="358" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="358" bodyend="475"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1ace9f2505c12c5dacc778509991cd3716" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int filledRectAlpha</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 color)</argsstring>
        <name>filledRectAlpha</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y2</declname>
        </param>
        <param>
          <type>Uint32</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="479" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="479" bodyend="515"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1a2005fd749c22a9d50584f7a921854d29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int HLineAlpha</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x1, Sint16 x2, Sint16 y, Uint32 color)</argsstring>
        <name>HLineAlpha</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y</declname>
        </param>
        <param>
          <type>Uint32</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="519" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="519" bodyend="522"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1a79d5b5118351118ae10d8bfb0a3a977c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int VLineAlpha</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x, Sint16 y1, Sint16 y2, Uint32 color)</argsstring>
        <name>VLineAlpha</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y2</declname>
        </param>
        <param>
          <type>Uint32</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="527" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="527" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1af9269ad9bbfa20980d5947c85dda63d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pixelColorWeight</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x, Sint16 y, Uint32 color, Uint32 weight)</argsstring>
        <name>pixelColorWeight</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y</declname>
        </param>
        <param>
          <type>Uint32</type>
          <declname>color</declname>
        </param>
        <param>
          <type>Uint32</type>
          <declname>weight</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="535" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="535" bodyend="550"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1a93c580afe80682f06ef4f1655180aff1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pixelColorWeightNolock</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x, Sint16 y, Uint32 color, Uint32 weight)</argsstring>
        <name>pixelColorWeightNolock</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y</declname>
        </param>
        <param>
          <type>Uint32</type>
          <declname>color</declname>
        </param>
        <param>
          <type>Uint32</type>
          <declname>weight</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="554" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="554" bodyend="569"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1a7b6f83bdef72f6b356664a93841381c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pixelRGBA</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x, Sint16 y, Uint8 r, Uint8 g, Uint8 b, Uint8 a)</argsstring>
        <name>pixelRGBA</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>r</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>g</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="571" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="571" bodyend="599"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1af20de4fe06f4d997eb2ab01a2252f071" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int hlineColorStore</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x1, Sint16 x2, Sint16 y, Uint32 color)</argsstring>
        <name>hlineColorStore</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y</declname>
        </param>
        <param>
          <type>Uint32</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="605" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="605" bodyend="727"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1a1b22ffb35c7690b4b0d8ba901640edae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int hlineRGBAStore</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x1, Sint16 x2, Sint16 y, Uint8 r, Uint8 g, Uint8 b, Uint8 a)</argsstring>
        <name>hlineRGBAStore</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>r</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>g</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="729" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="729" bodyend="735"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1ac211a904dce45093315e15b10c80d8ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int hlineColor</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x1, Sint16 x2, Sint16 y, Uint32 color)</argsstring>
        <name>hlineColor</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y</declname>
        </param>
        <param>
          <type>Uint32</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="737" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="737" bodyend="889"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1a6608a0d1d4c7e16fa1afcbd3eb5c3850" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int hlineRGBA</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x1, Sint16 x2, Sint16 y, Uint8 r, Uint8 g, Uint8 b, Uint8 a)</argsstring>
        <name>hlineRGBA</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>r</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>g</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="891" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="891" bodyend="897"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1a9b45060155a19fee24f998d7790f1d67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vlineColor</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x, Sint16 y1, Sint16 y2, Uint32 color)</argsstring>
        <name>vlineColor</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y2</declname>
        </param>
        <param>
          <type>Uint32</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="901" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="901" bodyend="1052"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1a8b79ac1e779755aee92b04f3a6cfc5d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vlineRGBA</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x, Sint16 y1, Sint16 y2, Uint8 r, Uint8 g, Uint8 b, Uint8 a)</argsstring>
        <name>vlineRGBA</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y2</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>r</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>g</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="1054" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="1054" bodyend="1060"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1a6ab25c393f6e5f8d68ea3365f6ea98d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rectangleColor</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 color)</argsstring>
        <name>rectangleColor</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y2</declname>
        </param>
        <param>
          <type>Uint32</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="1064" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="1064" bodyend="1129"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1a40991c6eeb936d35d0a8e8aa95268f72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rectangleRGBA</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint8 r, Uint8 g, Uint8 b, Uint8 a)</argsstring>
        <name>rectangleRGBA</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y2</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>r</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>g</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="1131" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="1131" bodyend="1138"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1ab0bad92332c913ba8a89e931d64d29e3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int clipEncode</definition>
        <argsstring>(Sint16 x, Sint16 y, Sint16 left, Sint16 top, Sint16 right, Sint16 bottom)</argsstring>
        <name>clipEncode</name>
        <param>
          <type>Sint16</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>left</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>top</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>right</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>bottom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="1153" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="1153" bodyend="1168"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1adde86cdd216c6c68a0db79ab5cf83134" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int clipLine</definition>
        <argsstring>(SDL_Surface *dst, Sint16 *x1, Sint16 *y1, Sint16 *x2, Sint16 *y2)</argsstring>
        <name>clipLine</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16 *</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>Sint16 *</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>Sint16 *</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>Sint16 *</type>
          <declname>y2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="1170" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="1170" bodyend="1232"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1a6bb30dfc32d0aee20271a0356a2e2fd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int boxColor</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 color)</argsstring>
        <name>boxColor</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y2</declname>
        </param>
        <param>
          <type>Uint32</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="1236" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="1236" bodyend="1420"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1a1864b3062793a7f7dd81aaf8c8abd6b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int boxRGBA</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint8 r, Uint8 g, Uint8 b, Uint8 a)</argsstring>
        <name>boxRGBA</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y2</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>r</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>g</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="1422" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="1422" bodyend="1428"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1ad44c550fab3cb736eb049713ede94052" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lineColor</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 color)</argsstring>
        <name>lineColor</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y2</declname>
        </param>
        <param>
          <type>Uint32</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="1438" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="1438" bodyend="1630"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1a760139e11a9ae5defeb755ca0c794f5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lineRGBA</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint8 r, Uint8 g, Uint8 b, Uint8 a)</argsstring>
        <name>lineRGBA</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y2</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>r</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>g</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="1632" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="1632" bodyend="1638"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1a49dc584bf3d107313597299a47a2e1ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int aalineColorInt</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 color, int draw_endpoint)</argsstring>
        <name>aalineColorInt</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y2</declname>
        </param>
        <param>
          <type>Uint32</type>
          <declname>color</declname>
        </param>
        <param>
          <type>int</type>
          <declname>draw_endpoint</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="1654" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="1654" bodyend="1853"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1a25c56f2def855db01dcf7ff7f7356182" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int aalineColor</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint32 color)</argsstring>
        <name>aalineColor</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y2</declname>
        </param>
        <param>
          <type>Uint32</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="1855" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="1855" bodyend="1858"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1a716b29af8cfc638fad0cfa0f1af15f23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int aalineRGBA</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Uint8 r, Uint8 g, Uint8 b, Uint8 a)</argsstring>
        <name>aalineRGBA</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y2</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>r</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>g</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="1860" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="1860" bodyend="1864"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1a4e859791ab3da27ccde404911451da46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int circleColor</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 r, Uint32 color)</argsstring>
        <name>circleColor</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>r</declname>
        </param>
        <param>
          <type>Uint32</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="1872" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="1872" bodyend="2080"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1a7fe51d4c9426c8795e58c7ddd313b0a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int circleRGBA</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 rad, Uint8 r, Uint8 g, Uint8 b, Uint8 a)</argsstring>
        <name>circleRGBA</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>rad</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>r</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>g</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="2082" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="2082" bodyend="2088"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1a03194a6c3cac1b6bba5243f35d1f0c12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int aacircleColor</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 r, Uint32 color)</argsstring>
        <name>aacircleColor</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>r</declname>
        </param>
        <param>
          <type>Uint32</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="2094" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="2094" bodyend="2097"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1a332780885aa2cfdc2de34dcff8d67e8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int aacircleRGBA</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 rad, Uint8 r, Uint8 g, Uint8 b, Uint8 a)</argsstring>
        <name>aacircleRGBA</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>rad</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>r</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>g</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="2099" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="2099" bodyend="2106"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1acadc80358a816fc7af990413a4c67fe5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int filledCircleColor</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 r, Uint32 color)</argsstring>
        <name>filledCircleColor</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>r</declname>
        </param>
        <param>
          <type>Uint32</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="2114" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="2114" bodyend="2221"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1a562ba6b18fb70547cd50cb3bb0f70272" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int filledCircleRGBA</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 rad, Uint8 r, Uint8 g, Uint8 b, Uint8 a)</argsstring>
        <name>filledCircleRGBA</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>rad</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>r</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>g</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="2223" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="2223" bodyend="2230"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1a476cff7702f4be9090871e35859782f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ellipseColor</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 rx, Sint16 ry, Uint32 color)</argsstring>
        <name>ellipseColor</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>rx</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>ry</declname>
        </param>
        <param>
          <type>Uint32</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="2238" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="2238" bodyend="2531"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1a18c8a26c9009482eec40f9f4a6945fd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ellipseRGBA</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 rx, Sint16 ry, Uint8 r, Uint8 g, Uint8 b, Uint8 a)</argsstring>
        <name>ellipseRGBA</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>rx</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>ry</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>r</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>g</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="2533" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="2533" bodyend="2539"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1ab1152439657b939a63a6e549885b3ae8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int aaellipseColor</definition>
        <argsstring>(SDL_Surface *dst, Sint16 xc, Sint16 yc, Sint16 rx, Sint16 ry, Uint32 color)</argsstring>
        <name>aaellipseColor</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>xc</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>yc</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>rx</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>ry</declname>
        </param>
        <param>
          <type>Uint32</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="2545" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="2545" bodyend="2761"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1ab9f0f00d7fb2f04aa9ba1630e31a27bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int aaellipseRGBA</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 rx, Sint16 ry, Uint8 r, Uint8 g, Uint8 b, Uint8 a)</argsstring>
        <name>aaellipseRGBA</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>rx</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>ry</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>r</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>g</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="2763" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="2763" bodyend="2770"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1a8fed50800f2f1bdfaa048698f5052f25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int filledEllipseColor</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 rx, Sint16 ry, Uint32 color)</argsstring>
        <name>filledEllipseColor</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>rx</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>ry</declname>
        </param>
        <param>
          <type>Uint32</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="2778" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="2778" bodyend="2925"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1a33595ad996dd0dcccde3abbcef540eec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int filledEllipseRGBA</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 rx, Sint16 ry, Uint8 r, Uint8 g, Uint8 b, Uint8 a)</argsstring>
        <name>filledEllipseRGBA</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>rx</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>ry</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>r</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>g</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="2928" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="2928" bodyend="2935"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1ac38765092dd64989970d956efe6f4d58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int filledpieColor</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 rad, Sint16 start, Sint16 end, Uint32 color)</argsstring>
        <name>filledpieColor</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>rad</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>start</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>end</declname>
        </param>
        <param>
          <type>Uint32</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="2941" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="2941" bodyend="3057"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1a0de85d7ae7457f327a510cbd8522113e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int filledpieRGBA</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x, Sint16 y, Sint16 rad, Sint16 start, Sint16 end, Uint8 r, Uint8 g, Uint8 b, Uint8 a)</argsstring>
        <name>filledpieRGBA</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>rad</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>start</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>end</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>r</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>g</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="3059" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="3059" bodyend="3065"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1a7465d08ef930ebb5442c7dd246fed4b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int trigonColor</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Sint16 x3, Sint16 y3, Uint32 color)</argsstring>
        <name>trigonColor</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y2</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x3</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y3</declname>
        </param>
        <param>
          <type>Uint32</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="3070" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="3070" bodyend="3083"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1a45d6a7edcd8b25e1a60e39b7f60bda3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int trigonRGBA</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Sint16 x3, Sint16 y3, Uint8 r, Uint8 g, Uint8 b, Uint8 a)</argsstring>
        <name>trigonRGBA</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y2</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x3</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y3</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>r</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>g</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="3085" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="3085" bodyend="3099"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1a4f928dfaef530c83e304a452d2e55190" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int aatrigonColor</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Sint16 x3, Sint16 y3, Uint32 color)</argsstring>
        <name>aatrigonColor</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y2</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x3</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y3</declname>
        </param>
        <param>
          <type>Uint32</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="3103" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="3103" bodyend="3116"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1ab53a84faa65b68e40cb68b8cacbb4b7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int aatrigonRGBA</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Sint16 x3, Sint16 y3, Uint8 r, Uint8 g, Uint8 b, Uint8 a)</argsstring>
        <name>aatrigonRGBA</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y2</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x3</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y3</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>r</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>g</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="3118" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="3118" bodyend="3132"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1a1927dd53743e0a7f84ff491b18247a8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int filledTrigonColor</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Sint16 x3, Sint16 y3, int color)</argsstring>
        <name>filledTrigonColor</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y2</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x3</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y3</declname>
        </param>
        <param>
          <type>int</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="3136" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="3136" bodyend="3149"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1a8f318d776ff1e3c6790405e0e59e5356" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int filledTrigonRGBA</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x1, Sint16 y1, Sint16 x2, Sint16 y2, Sint16 x3, Sint16 y3, Uint8 r, Uint8 g, Uint8 b, Uint8 a)</argsstring>
        <name>filledTrigonRGBA</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y2</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x3</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y3</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>r</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>g</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="3151" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="3151" bodyend="3165"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1a3b4ae4110754c6556e15ca5ca8dffe9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int polygonColor</definition>
        <argsstring>(SDL_Surface *dst, Sint16 *vx, Sint16 *vy, int n, Uint32 color)</argsstring>
        <name>polygonColor</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16 *</type>
          <declname>vx</declname>
        </param>
        <param>
          <type>Sint16 *</type>
          <declname>vy</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>Uint32</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="3169" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="3169" bodyend="3204"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1ad7fab064f644bf13a42c9d2750527c1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int polygonRGBA</definition>
        <argsstring>(SDL_Surface *dst, Sint16 *vx, Sint16 *vy, int n, Uint8 r, Uint8 g, Uint8 b, Uint8 a)</argsstring>
        <name>polygonRGBA</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16 *</type>
          <declname>vx</declname>
        </param>
        <param>
          <type>Sint16 *</type>
          <declname>vy</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>r</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>g</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="3206" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="3206" bodyend="3212"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1a547cf530350f90989be39092d8a95f64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int aapolygonColor</definition>
        <argsstring>(SDL_Surface *dst, Sint16 *vx, Sint16 *vy, int n, Uint32 color)</argsstring>
        <name>aapolygonColor</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16 *</type>
          <declname>vx</declname>
        </param>
        <param>
          <type>Sint16 *</type>
          <declname>vy</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>Uint32</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="3216" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="3216" bodyend="3251"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1a5f97f208853d6ba44684ea5c2b659646" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int aapolygonRGBA</definition>
        <argsstring>(SDL_Surface *dst, Sint16 *vx, Sint16 *vy, int n, Uint8 r, Uint8 g, Uint8 b, Uint8 a)</argsstring>
        <name>aapolygonRGBA</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16 *</type>
          <declname>vx</declname>
        </param>
        <param>
          <type>Sint16 *</type>
          <declname>vy</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>r</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>g</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="3253" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="3253" bodyend="3259"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1a0289e1fd66e81d969906f673f552be68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gfxPrimitivesCompareInt</definition>
        <argsstring>(const void *a, const void *b)</argsstring>
        <name>gfxPrimitivesCompareInt</name>
        <param>
          <type>const void *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="3263" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="3364" bodyend="3367"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1ab5e11266b05823db35d52fce71c5128a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int filledPolygonColor</definition>
        <argsstring>(SDL_Surface *dst, Sint16 *vx, Sint16 *vy, int n, int color)</argsstring>
        <name>filledPolygonColor</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16 *</type>
          <declname>vx</declname>
        </param>
        <param>
          <type>Sint16 *</type>
          <declname>vy</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="3268" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="3268" bodyend="3353"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1a5d34167088c2c40e856b415681ecb5de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int filledPolygonRGBA</definition>
        <argsstring>(SDL_Surface *dst, Sint16 *vx, Sint16 *vy, int n, Uint8 r, Uint8 g, Uint8 b, Uint8 a)</argsstring>
        <name>filledPolygonRGBA</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16 *</type>
          <declname>vx</declname>
        </param>
        <param>
          <type>Sint16 *</type>
          <declname>vy</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>r</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>g</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="3355" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="3355" bodyend="3362"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1aef5fdeb16c4578d8cd50e106299e993e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int characterColor</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x, Sint16 y, char c, Uint32 color)</argsstring>
        <name>characterColor</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y</declname>
        </param>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <param>
          <type>Uint32</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="3374" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="3374" bodyend="3499"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1a96379d2ce808aa642afb57bced0c670e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int characterRGBA</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x, Sint16 y, char c, Uint8 r, Uint8 g, Uint8 b, Uint8 a)</argsstring>
        <name>characterRGBA</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y</declname>
        </param>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>r</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>g</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="3501" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="3501" bodyend="3507"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1a5c3dc0a8c94ea49552c7e24899096600" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int stringColor</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x, Sint16 y, char *c, Uint32 color)</argsstring>
        <name>stringColor</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>Uint32</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="3509" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="3509" bodyend="3527"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1a3ed16d3debe5ccea5f62c93c10fa5034" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int stringRGBA</definition>
        <argsstring>(SDL_Surface *dst, Sint16 x, Sint16 y, char *c, Uint8 r, Uint8 g, Uint8 b, Uint8 a)</argsstring>
        <name>stringRGBA</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>x</declname>
        </param>
        <param>
          <type>Sint16</type>
          <declname>y</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>r</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>g</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="3529" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="3529" bodyend="3535"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1acff755a6c3488bba4b187e922afc6849" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double evaluateBezier</definition>
        <argsstring>(double *data, int ndata, double t)</argsstring>
        <name>evaluateBezier</name>
        <param>
          <type>double *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ndata</declname>
        </param>
        <param>
          <type>double</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="3543" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="3543" bodyend="3588"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1ac156d855a994c265ce2e4a7de60c5c68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bezierColor</definition>
        <argsstring>(SDL_Surface *dst, Sint16 *vx, Sint16 *vy, int n, int s, Uint32 color)</argsstring>
        <name>bezierColor</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16 *</type>
          <declname>vx</declname>
        </param>
        <param>
          <type>Sint16 *</type>
          <declname>vy</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>s</declname>
        </param>
        <param>
          <type>Uint32</type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="3590" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="3590" bodyend="3648"/>
      </memberdef>
      <memberdef kind="function" id="_s_d_l__gfx_primitives_8c_1afafbad18193867c96059f744f379f054" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bezierRGBA</definition>
        <argsstring>(SDL_Surface *dst, Sint16 *vx, Sint16 *vy, int n, int s, Uint8 r, Uint8 g, Uint8 b, Uint8 a)</argsstring>
        <name>bezierRGBA</name>
        <param>
          <type>SDL_Surface *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>Sint16 *</type>
          <declname>vx</declname>
        </param>
        <param>
          <type>Sint16 *</type>
          <declname>vy</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>s</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>r</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>g</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Uint8</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" line="3650" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c" bodystart="3650" bodyend="3656"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/></highlight></codeline>
<codeline lineno="2"><highlight class="comment"></highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>SDL_gfxPrimitives<sp/>-<sp/>Graphics<sp/>primitives<sp/>for<sp/>SDL<sp/>surfaces</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>LGPL<sp/>(c)<sp/>A.<sp/>Schiffler</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SDL_gfxPrimitives.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SDL_gfxPrimitives_font.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-===================-<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-----<sp/>Defines<sp/>for<sp/>pixel<sp/>clipping<sp/>tests<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>clip_xmin(surface)<sp/>surface-&gt;clip_rect.x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>clip_xmax(surface)<sp/>surface-&gt;clip_rect.x+surface-&gt;clip_rect.w-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>clip_ymin(surface)<sp/>surface-&gt;clip_rect.y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>clip_ymax(surface)<sp/>surface-&gt;clip_rect.y+surface-&gt;clip_rect.h-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-----<sp/>Pixel<sp/>-<sp/>fast,<sp/>no<sp/>blending,<sp/>no<sp/>locking,<sp/>clipping<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fastPixelColorNolock(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>x,<sp/>Sint16<sp/>y,<sp/>Uint32<sp/>color)</highlight></codeline>
<codeline lineno="29"><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bpp;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>Uint8<sp/>*p;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Honor<sp/>clipping<sp/>setup<sp/>at<sp/>pixel<sp/>level<sp/></highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((x<sp/>&gt;=<sp/>clip_xmin(dst))<sp/>&amp;&amp;<sp/>(x<sp/>&lt;=<sp/>clip_xmax(dst))<sp/>&amp;&amp;<sp/>(y<sp/>&gt;=<sp/>clip_ymin(dst))<sp/>&amp;&amp;<sp/>(y<sp/>&lt;=<sp/>clip_ymax(dst)))<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Get<sp/>destination<sp/>format<sp/></highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>bpp<sp/>=<sp/>dst-&gt;format-&gt;BytesPerPixel;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>(Uint8<sp/>*)<sp/>dst-&gt;pixels<sp/>+<sp/>y<sp/>*<sp/>dst-&gt;pitch<sp/>+<sp/>x<sp/>*<sp/>bpp;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>switch<sp/>(bpp)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p<sp/>=<sp/>color;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(Uint16<sp/>*)<sp/>p<sp/>=<sp/>color;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SDL_BYTEORDER<sp/>==<sp/>SDL_BIG_ENDIAN)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[0]<sp/>=<sp/>(color<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[1]<sp/>=<sp/>(color<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[2]<sp/>=<sp/>color<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[0]<sp/>=<sp/>color<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[1]<sp/>=<sp/>(color<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[2]<sp/>=<sp/>(color<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(Uint32<sp/>*)<sp/>p<sp/>=<sp/>color;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>switch<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(0);</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-----<sp/>Pixel<sp/>-<sp/>fast,<sp/>no<sp/>blending,<sp/>no<sp/>locking,<sp/>no<sp/>clipping<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>(faster<sp/>but<sp/>dangerous,<sp/>make<sp/>sure<sp/>we<sp/>stay<sp/>in<sp/>surface<sp/>bounds)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fastPixelColorNolockNoclip(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>x,<sp/>Sint16<sp/>y,<sp/>Uint32<sp/>color)</highlight></codeline>
<codeline lineno="77"><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bpp;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>Uint8<sp/>*p;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Get<sp/>destination<sp/>format<sp/></highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>bpp<sp/>=<sp/>dst-&gt;format-&gt;BytesPerPixel;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>(Uint8<sp/>*)<sp/>dst-&gt;pixels<sp/>+<sp/>y<sp/>*<sp/>dst-&gt;pitch<sp/>+<sp/>x<sp/>*<sp/>bpp;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>switch<sp/>(bpp)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>*p<sp/>=<sp/>color;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>*(Uint16<sp/>*)<sp/>p<sp/>=<sp/>color;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SDL_BYTEORDER<sp/>==<sp/>SDL_BIG_ENDIAN)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[0]<sp/>=<sp/>(color<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[1]<sp/>=<sp/>(color<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[2]<sp/>=<sp/>color<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[0]<sp/>=<sp/>color<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[1]<sp/>=<sp/>(color<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p[2]<sp/>=<sp/>(color<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>*(Uint32<sp/>*)<sp/>p<sp/>=<sp/>color;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>switch<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(0);</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-----<sp/>Pixel<sp/>-<sp/>fast,<sp/>no<sp/>blending,<sp/>locking,<sp/>clipping<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fastPixelColor(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>x,<sp/>Sint16<sp/>y,<sp/>Uint32<sp/>color)</highlight></codeline>
<codeline lineno="115"><highlight class="normal">{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Lock<sp/>the<sp/>surface<sp/></highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SDL_MUSTLOCK(dst))<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SDL_LockSurface(dst)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(-1);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>fastPixelColorNolock(dst,<sp/>x,<sp/>y,<sp/>color);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Unlock<sp/>surface<sp/></highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SDL_MUSTLOCK(dst))<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_UnlockSurface(dst);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(result);</highlight></codeline>
<codeline lineno="137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-----<sp/>Pixel<sp/>-<sp/>fast,<sp/>no<sp/>blending,<sp/>locking,<sp/>RGB<sp/>input<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fastPixelRGBA(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>x,<sp/>Sint16<sp/>y,<sp/>Uint8<sp/>r,<sp/>Uint8<sp/>g,<sp/>Uint8<sp/>b,<sp/>Uint8<sp/>a)</highlight></codeline>
<codeline lineno="142"><highlight class="normal">{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>Uint32<sp/>color;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Setup<sp/>color<sp/></highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>color<sp/>=<sp/>SDL_MapRGBA(dst-&gt;format,<sp/>r,<sp/>g,<sp/>b,<sp/>a);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Draw<sp/></highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(fastPixelColor(dst,<sp/>x,<sp/>y,<sp/>color));</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-----<sp/>Pixel<sp/>-<sp/>fast,<sp/>no<sp/>blending,<sp/>no<sp/>locking<sp/>RGB<sp/>input<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fastPixelRGBANolock(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>x,<sp/>Sint16<sp/>y,<sp/>Uint8<sp/>r,<sp/>Uint8<sp/>g,<sp/>Uint8<sp/>b,<sp/>Uint8<sp/>a)</highlight></codeline>
<codeline lineno="160"><highlight class="normal">{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>Uint32<sp/>color;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Setup<sp/>color<sp/></highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>color<sp/>=<sp/>SDL_MapRGBA(dst-&gt;format,<sp/>r,<sp/>g,<sp/>b,<sp/>a);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Draw<sp/></highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(fastPixelColorNolock(dst,<sp/>x,<sp/>y,<sp/>color));</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>PutPixel<sp/>routine<sp/>with<sp/>alpha<sp/>blending,<sp/>input<sp/>color<sp/>in<sp/>destination<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>New,<sp/>faster<sp/>routine<sp/>-<sp/>default<sp/>blending<sp/>pixel<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_putPixelAlpha(SDL_Surface<sp/>*<sp/>surface,<sp/>Sint16<sp/>x,<sp/>Sint16<sp/>y,<sp/>Uint32<sp/>color,<sp/>Uint8<sp/>alpha)</highlight></codeline>
<codeline lineno="179"><highlight class="normal">{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>Uint32<sp/>Rmask<sp/>=<sp/>surface-&gt;format-&gt;Rmask,<sp/>Gmask<sp/>=</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;format-&gt;Gmask,<sp/>Bmask<sp/>=<sp/>surface-&gt;format-&gt;Bmask,<sp/>Amask<sp/>=<sp/>surface-&gt;format-&gt;Amask;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>Uint32<sp/>R,<sp/>G,<sp/>B,<sp/>A<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;=<sp/>clip_xmin(surface)<sp/>&amp;&amp;<sp/>x<sp/>&lt;=<sp/>clip_xmax(surface)</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>y<sp/>&gt;=<sp/>clip_ymin(surface)<sp/>&amp;&amp;<sp/>y<sp/>&lt;=<sp/>clip_ymax(surface))<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(surface-&gt;format-&gt;BytesPerPixel)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Assuming<sp/>8-bpp<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alpha<sp/>==<sp/>255)<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*((Uint8<sp/>*)<sp/>surface-&gt;pixels<sp/>+<sp/>y<sp/>*<sp/>surface-&gt;pitch<sp/>+<sp/>x)<sp/>=<sp/>color;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uint8<sp/>*pixel<sp/>=<sp/>(Uint8<sp/>*)<sp/>surface-&gt;pixels<sp/>+<sp/>y<sp/>*<sp/>surface-&gt;pitch<sp/>+<sp/>x;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uint8<sp/>dR<sp/>=<sp/>surface-&gt;format-&gt;palette-&gt;colors[*pixel].r;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uint8<sp/>dG<sp/>=<sp/>surface-&gt;format-&gt;palette-&gt;colors[*pixel].g;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uint8<sp/>dB<sp/>=<sp/>surface-&gt;format-&gt;palette-&gt;colors[*pixel].b;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uint8<sp/>sR<sp/>=<sp/>surface-&gt;format-&gt;palette-&gt;colors[color].r;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uint8<sp/>sG<sp/>=<sp/>surface-&gt;format-&gt;palette-&gt;colors[color].g;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uint8<sp/>sB<sp/>=<sp/>surface-&gt;format-&gt;palette-&gt;colors[color].b;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dR<sp/>=<sp/>dR<sp/>+<sp/>((sR<sp/>-<sp/>dR)<sp/>*<sp/>alpha<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dG<sp/>=<sp/>dG<sp/>+<sp/>((sG<sp/>-<sp/>dG)<sp/>*<sp/>alpha<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dB<sp/>=<sp/>dB<sp/>+<sp/>((sB<sp/>-<sp/>dB)<sp/>*<sp/>alpha<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pixel<sp/>=<sp/>SDL_MapRGB(surface-&gt;format,<sp/>dR,<sp/>dG,<sp/>dB);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Probably<sp/>15-bpp<sp/>or<sp/>16-bpp<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alpha<sp/>==<sp/>255)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*((Uint16<sp/>*)<sp/>surface-&gt;pixels<sp/>+<sp/>y<sp/>*<sp/>surface-&gt;pitch<sp/>/<sp/>2<sp/>+<sp/>x)<sp/>=<sp/>color;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uint16<sp/>*pixel<sp/>=<sp/>(Uint16<sp/>*)<sp/>surface-&gt;pixels<sp/>+<sp/>y<sp/>*<sp/>surface-&gt;pitch<sp/>/<sp/>2<sp/>+<sp/>x;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uint32<sp/>dc<sp/>=<sp/>*pixel;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R<sp/>=<sp/>((dc<sp/>&amp;<sp/>Rmask)<sp/>+<sp/>(((color<sp/>&amp;<sp/>Rmask)<sp/>-<sp/>(dc<sp/>&amp;<sp/>Rmask))<sp/>*<sp/>alpha<sp/>&gt;&gt;<sp/>8))<sp/>&amp;<sp/>Rmask;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G<sp/>=<sp/>((dc<sp/>&amp;<sp/>Gmask)<sp/>+<sp/>(((color<sp/>&amp;<sp/>Gmask)<sp/>-<sp/>(dc<sp/>&amp;<sp/>Gmask))<sp/>*<sp/>alpha<sp/>&gt;&gt;<sp/>8))<sp/>&amp;<sp/>Gmask;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B<sp/>=<sp/>((dc<sp/>&amp;<sp/>Bmask)<sp/>+<sp/>(((color<sp/>&amp;<sp/>Bmask)<sp/>-<sp/>(dc<sp/>&amp;<sp/>Bmask))<sp/>*<sp/>alpha<sp/>&gt;&gt;<sp/>8))<sp/>&amp;<sp/>Bmask;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Amask)</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>=<sp/>((dc<sp/>&amp;<sp/>Amask)<sp/>+<sp/>(((color<sp/>&amp;<sp/>Amask)<sp/>-<sp/>(dc<sp/>&amp;<sp/>Amask))<sp/>*<sp/>alpha<sp/>&gt;&gt;<sp/>8))<sp/>&amp;<sp/>Amask;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pixel<sp/>=<sp/>R<sp/>|<sp/>G<sp/>|<sp/>B<sp/>|<sp/>A;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Slow<sp/>24-bpp<sp/>mode,<sp/>usually<sp/>not<sp/>used<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uint8<sp/>*pix<sp/>=<sp/>(Uint8<sp/>*)<sp/>surface-&gt;pixels<sp/>+<sp/>y<sp/>*<sp/>surface-&gt;pitch<sp/>+<sp/>x<sp/>*<sp/>3;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uint8<sp/>rshift8<sp/>=<sp/>surface-&gt;format-&gt;Rshift<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uint8<sp/>gshift8<sp/>=<sp/>surface-&gt;format-&gt;Gshift<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uint8<sp/>bshift8<sp/>=<sp/>surface-&gt;format-&gt;Bshift<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uint8<sp/>ashift8<sp/>=<sp/>surface-&gt;format-&gt;Ashift<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(alpha<sp/>==<sp/>255)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(pix<sp/>+<sp/>rshift8)<sp/>=<sp/>color<sp/>&gt;&gt;<sp/>surface-&gt;format-&gt;Rshift;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(pix<sp/>+<sp/>gshift8)<sp/>=<sp/>color<sp/>&gt;&gt;<sp/>surface-&gt;format-&gt;Gshift;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(pix<sp/>+<sp/>bshift8)<sp/>=<sp/>color<sp/>&gt;&gt;<sp/>surface-&gt;format-&gt;Bshift;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(pix<sp/>+<sp/>ashift8)<sp/>=<sp/>color<sp/>&gt;&gt;<sp/>surface-&gt;format-&gt;Ashift;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uint8<sp/>dR,<sp/>dG,<sp/>dB,<sp/>dA<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uint8<sp/>sR,<sp/>sG,<sp/>sB,<sp/>sA<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pix<sp/>=<sp/>(Uint8<sp/>*)<sp/>surface-&gt;pixels<sp/>+<sp/>y<sp/>*<sp/>surface-&gt;pitch<sp/>+<sp/>x<sp/>*<sp/>3;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dR<sp/>=<sp/>*((pix)<sp/>+<sp/>rshift8);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dG<sp/>=<sp/>*((pix)<sp/>+<sp/>gshift8);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dB<sp/>=<sp/>*((pix)<sp/>+<sp/>bshift8);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dA<sp/>=<sp/>*((pix)<sp/>+<sp/>ashift8);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sR<sp/>=<sp/>(color<sp/>&gt;&gt;<sp/>surface-&gt;format-&gt;Rshift)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sG<sp/>=<sp/>(color<sp/>&gt;&gt;<sp/>surface-&gt;format-&gt;Gshift)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sB<sp/>=<sp/>(color<sp/>&gt;&gt;<sp/>surface-&gt;format-&gt;Bshift)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sA<sp/>=<sp/>(color<sp/>&gt;&gt;<sp/>surface-&gt;format-&gt;Ashift)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dR<sp/>=<sp/>dR<sp/>+<sp/>((sR<sp/>-<sp/>dR)<sp/>*<sp/>alpha<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dG<sp/>=<sp/>dG<sp/>+<sp/>((sG<sp/>-<sp/>dG)<sp/>*<sp/>alpha<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dB<sp/>=<sp/>dB<sp/>+<sp/>((sB<sp/>-<sp/>dB)<sp/>*<sp/>alpha<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dA<sp/>=<sp/>dA<sp/>+<sp/>((sA<sp/>-<sp/>dA)<sp/>*<sp/>alpha<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*((pix)<sp/>+<sp/>rshift8)<sp/>=<sp/>dR;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*((pix)<sp/>+<sp/>gshift8)<sp/>=<sp/>dG;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*((pix)<sp/>+<sp/>bshift8)<sp/>=<sp/>dB;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*((pix)<sp/>+<sp/>ashift8)<sp/>=<sp/>dA;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Probably<sp/>32-bpp<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alpha<sp/>==<sp/>255)<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*((Uint32<sp/>*)<sp/>surface-&gt;pixels<sp/>+<sp/>y<sp/>*<sp/>surface-&gt;pitch<sp/>/<sp/>4<sp/>+<sp/>x)<sp/>=<sp/>color;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uint32<sp/>*pixel<sp/>=<sp/>(Uint32<sp/>*)<sp/>surface-&gt;pixels<sp/>+<sp/>y<sp/>*<sp/>surface-&gt;pitch<sp/>/<sp/>4<sp/>+<sp/>x;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uint32<sp/>dc<sp/>=<sp/>*pixel;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R<sp/>=<sp/>((dc<sp/>&amp;<sp/>Rmask)<sp/>+<sp/>(((color<sp/>&amp;<sp/>Rmask)<sp/>-<sp/>(dc<sp/>&amp;<sp/>Rmask))<sp/>*<sp/>alpha<sp/>&gt;&gt;<sp/>8))<sp/>&amp;<sp/>Rmask;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G<sp/>=<sp/>((dc<sp/>&amp;<sp/>Gmask)<sp/>+<sp/>(((color<sp/>&amp;<sp/>Gmask)<sp/>-<sp/>(dc<sp/>&amp;<sp/>Gmask))<sp/>*<sp/>alpha<sp/>&gt;&gt;<sp/>8))<sp/>&amp;<sp/>Gmask;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B<sp/>=<sp/>((dc<sp/>&amp;<sp/>Bmask)<sp/>+<sp/>(((color<sp/>&amp;<sp/>Bmask)<sp/>-<sp/>(dc<sp/>&amp;<sp/>Bmask))<sp/>*<sp/>alpha<sp/>&gt;&gt;<sp/>8))<sp/>&amp;<sp/>Bmask;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Amask)</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>=<sp/>((dc<sp/>&amp;<sp/>Amask)<sp/>+<sp/>(((color<sp/>&amp;<sp/>Amask)<sp/>-<sp/>(dc<sp/>&amp;<sp/>Amask))<sp/>*<sp/>alpha<sp/>&gt;&gt;<sp/>8))<sp/>&amp;<sp/>Amask;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pixel<sp/>=<sp/>R<sp/>|<sp/>G<sp/>|<sp/>B<sp/>|<sp/>A;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(0);</highlight></codeline>
<codeline lineno="291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-----<sp/>Pixel<sp/>-<sp/>pixel<sp/>draw<sp/>with<sp/>blending<sp/>enabled<sp/>if<sp/>a&lt;255<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pixelColor(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>x,<sp/>Sint16<sp/>y,<sp/>Uint32<sp/>color)</highlight></codeline>
<codeline lineno="296"><highlight class="normal">{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>Uint8<sp/>alpha;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>Uint32<sp/>mcolor;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Lock<sp/>the<sp/>surface<sp/></highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SDL_MUSTLOCK(dst))<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SDL_LockSurface(dst)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(-1);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Setup<sp/>color<sp/></highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>alpha<sp/>=<sp/>color<sp/>&amp;<sp/>0x000000ff;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>mcolor<sp/>=</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_MapRGBA(dst-&gt;format,<sp/>(color<sp/>&amp;<sp/>0xff000000)<sp/>&gt;&gt;<sp/>24,</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(color<sp/>&amp;<sp/>0x00ff0000)<sp/>&gt;&gt;<sp/>16,<sp/>(color<sp/>&amp;<sp/>0x0000ff00)<sp/>&gt;&gt;<sp/>8,<sp/>alpha);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Draw<sp/></highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>_putPixelAlpha(dst,<sp/>x,<sp/>y,<sp/>mcolor,<sp/>alpha);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Unlock<sp/>the<sp/>surface<sp/></highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SDL_MUSTLOCK(dst))<sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_UnlockSurface(dst);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(result);</highlight></codeline>
<codeline lineno="331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pixelColorNolock(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>x,<sp/>Sint16<sp/>y,<sp/>Uint32<sp/>color)</highlight></codeline>
<codeline lineno="334"><highlight class="normal">{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>Uint8<sp/>alpha;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>Uint32<sp/>mcolor;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Setup<sp/>color<sp/></highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>alpha<sp/>=<sp/>color<sp/>&amp;<sp/>0x000000ff;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>mcolor<sp/>=</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_MapRGBA(dst-&gt;format,<sp/>(color<sp/>&amp;<sp/>0xff000000)<sp/>&gt;&gt;<sp/>24,</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(color<sp/>&amp;<sp/>0x00ff0000)<sp/>&gt;&gt;<sp/>16,<sp/>(color<sp/>&amp;<sp/>0x0000ff00)<sp/>&gt;&gt;<sp/>8,<sp/>alpha);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Draw<sp/></highlight></codeline>
<codeline lineno="349"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>_putPixelAlpha(dst,<sp/>x,<sp/>y,<sp/>mcolor,<sp/>alpha);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(result);</highlight></codeline>
<codeline lineno="353"><highlight class="normal">}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Filled<sp/>rectangle<sp/>with<sp/>alpha<sp/>blending,<sp/>color<sp/>in<sp/>destination<sp/>format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>_filledRectAlpha(SDL_Surface<sp/>*<sp/>surface,<sp/>Sint16<sp/>x1,<sp/>Sint16<sp/>y1,<sp/>Sint16<sp/>x2,<sp/>Sint16<sp/>y2,<sp/>Uint32<sp/>color,<sp/>Uint8<sp/>alpha)</highlight></codeline>
<codeline lineno="359"><highlight class="normal">{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>Uint32<sp/>Rmask<sp/>=<sp/>surface-&gt;format-&gt;Rmask,<sp/>Gmask<sp/>=</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>surface-&gt;format-&gt;Gmask,<sp/>Bmask<sp/>=<sp/>surface-&gt;format-&gt;Bmask,<sp/>Amask<sp/>=<sp/>surface-&gt;format-&gt;Amask;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>Uint32<sp/>R,<sp/>G,<sp/>B,<sp/>A<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>x,<sp/>y;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(surface-&gt;format-&gt;BytesPerPixel)<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Assuming<sp/>8-bpp<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uint8<sp/>*row,<sp/>*pixel;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uint8<sp/>dR,<sp/>dG,<sp/>dB;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uint8<sp/>sR<sp/>=<sp/>surface-&gt;format-&gt;palette-&gt;colors[color].r;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uint8<sp/>sG<sp/>=<sp/>surface-&gt;format-&gt;palette-&gt;colors[color].g;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uint8<sp/>sB<sp/>=<sp/>surface-&gt;format-&gt;palette-&gt;colors[color].b;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y<sp/>=<sp/>y1;<sp/>y<sp/>&lt;=<sp/>y2;<sp/>y++)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row<sp/>=<sp/>(Uint8<sp/>*)<sp/>surface-&gt;pixels<sp/>+<sp/>y<sp/>*<sp/>surface-&gt;pitch;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(x<sp/>=<sp/>x1;<sp/>x<sp/>&lt;=<sp/>x2;<sp/>x++)<sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixel<sp/>=<sp/>row<sp/>+<sp/>x;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dR<sp/>=<sp/>surface-&gt;format-&gt;palette-&gt;colors[*pixel].r;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dG<sp/>=<sp/>surface-&gt;format-&gt;palette-&gt;colors[*pixel].g;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dB<sp/>=<sp/>surface-&gt;format-&gt;palette-&gt;colors[*pixel].b;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dR<sp/>=<sp/>dR<sp/>+<sp/>((sR<sp/>-<sp/>dR)<sp/>*<sp/>alpha<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dG<sp/>=<sp/>dG<sp/>+<sp/>((sG<sp/>-<sp/>dG)<sp/>*<sp/>alpha<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dB<sp/>=<sp/>dB<sp/>+<sp/>((sB<sp/>-<sp/>dB)<sp/>*<sp/>alpha<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pixel<sp/>=<sp/>SDL_MapRGB(surface-&gt;format,<sp/>dR,<sp/>dG,<sp/>dB);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Probably<sp/>15-bpp<sp/>or<sp/>16-bpp<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uint16<sp/>*row,<sp/>*pixel;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uint32<sp/>dR<sp/>=<sp/>(color<sp/>&amp;<sp/>Rmask),<sp/>dG<sp/>=<sp/>(color<sp/>&amp;<sp/>Gmask),<sp/>dB<sp/>=<sp/>(color<sp/>&amp;<sp/>Bmask),<sp/>dA<sp/>=<sp/>(color<sp/>&amp;<sp/>Amask);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y<sp/>=<sp/>y1;<sp/>y<sp/>&lt;=<sp/>y2;<sp/>y++)<sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row<sp/>=<sp/>(Uint16<sp/>*)<sp/>surface-&gt;pixels<sp/>+<sp/>y<sp/>*<sp/>surface-&gt;pitch<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(x<sp/>=<sp/>x1;<sp/>x<sp/>&lt;=<sp/>x2;<sp/>x++)<sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixel<sp/>=<sp/>row<sp/>+<sp/>x;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R<sp/>=<sp/>((*pixel<sp/>&amp;<sp/>Rmask)<sp/>+<sp/>((dR<sp/>-<sp/>(*pixel<sp/>&amp;<sp/>Rmask))<sp/>*<sp/>alpha<sp/>&gt;&gt;<sp/>8))<sp/>&amp;<sp/>Rmask;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G<sp/>=<sp/>((*pixel<sp/>&amp;<sp/>Gmask)<sp/>+<sp/>((dG<sp/>-<sp/>(*pixel<sp/>&amp;<sp/>Gmask))<sp/>*<sp/>alpha<sp/>&gt;&gt;<sp/>8))<sp/>&amp;<sp/>Gmask;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B<sp/>=<sp/>((*pixel<sp/>&amp;<sp/>Bmask)<sp/>+<sp/>((dB<sp/>-<sp/>(*pixel<sp/>&amp;<sp/>Bmask))<sp/>*<sp/>alpha<sp/>&gt;&gt;<sp/>8))<sp/>&amp;<sp/>Bmask;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Amask)</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>=<sp/>((*pixel<sp/>&amp;<sp/>Amask)<sp/>+<sp/>((dA<sp/>-<sp/>(*pixel<sp/>&amp;<sp/>Amask))<sp/>*<sp/>alpha<sp/>&gt;&gt;<sp/>8))<sp/>&amp;<sp/>Amask;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pixel<sp/>=<sp/>R<sp/>|<sp/>G<sp/>|<sp/>B<sp/>|<sp/>A;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Slow<sp/>24-bpp<sp/>mode,<sp/>usually<sp/>not<sp/>used<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uint8<sp/>*row,<sp/>*pix;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uint8<sp/>dR,<sp/>dG,<sp/>dB,<sp/>dA;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uint8<sp/>rshift8<sp/>=<sp/>surface-&gt;format-&gt;Rshift<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uint8<sp/>gshift8<sp/>=<sp/>surface-&gt;format-&gt;Gshift<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uint8<sp/>bshift8<sp/>=<sp/>surface-&gt;format-&gt;Bshift<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uint8<sp/>ashift8<sp/>=<sp/>surface-&gt;format-&gt;Ashift<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uint8<sp/>sR<sp/>=<sp/>(color<sp/>&gt;&gt;<sp/>surface-&gt;format-&gt;Rshift)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uint8<sp/>sG<sp/>=<sp/>(color<sp/>&gt;&gt;<sp/>surface-&gt;format-&gt;Gshift)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uint8<sp/>sB<sp/>=<sp/>(color<sp/>&gt;&gt;<sp/>surface-&gt;format-&gt;Bshift)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uint8<sp/>sA<sp/>=<sp/>(color<sp/>&gt;&gt;<sp/>surface-&gt;format-&gt;Ashift)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y<sp/>=<sp/>y1;<sp/>y<sp/>&lt;=<sp/>y2;<sp/>y++)<sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row<sp/>=<sp/>(Uint8<sp/>*)<sp/>surface-&gt;pixels<sp/>+<sp/>y<sp/>*<sp/>surface-&gt;pitch;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(x<sp/>=<sp/>x1;<sp/>x<sp/>&lt;=<sp/>x2;<sp/>x++)<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pix<sp/>=<sp/>row<sp/>+<sp/>x<sp/>*<sp/>3;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dR<sp/>=<sp/>*((pix)<sp/>+<sp/>rshift8);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dG<sp/>=<sp/>*((pix)<sp/>+<sp/>gshift8);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dB<sp/>=<sp/>*((pix)<sp/>+<sp/>bshift8);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dA<sp/>=<sp/>*((pix)<sp/>+<sp/>ashift8);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dR<sp/>=<sp/>dR<sp/>+<sp/>((sR<sp/>-<sp/>dR)<sp/>*<sp/>alpha<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dG<sp/>=<sp/>dG<sp/>+<sp/>((sG<sp/>-<sp/>dG)<sp/>*<sp/>alpha<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dB<sp/>=<sp/>dB<sp/>+<sp/>((sB<sp/>-<sp/>dB)<sp/>*<sp/>alpha<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dA<sp/>=<sp/>dA<sp/>+<sp/>((sA<sp/>-<sp/>dA)<sp/>*<sp/>alpha<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*((pix)<sp/>+<sp/>rshift8)<sp/>=<sp/>dR;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*((pix)<sp/>+<sp/>gshift8)<sp/>=<sp/>dG;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*((pix)<sp/>+<sp/>bshift8)<sp/>=<sp/>dB;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*((pix)<sp/>+<sp/>ashift8)<sp/>=<sp/>dA;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Probably<sp/>32-bpp<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uint32<sp/>*row,<sp/>*pixel;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uint32<sp/>dR<sp/>=<sp/>(color<sp/>&amp;<sp/>Rmask),<sp/>dG<sp/>=<sp/>(color<sp/>&amp;<sp/>Gmask),<sp/>dB<sp/>=<sp/>(color<sp/>&amp;<sp/>Bmask),<sp/>dA<sp/>=<sp/>(color<sp/>&amp;<sp/>Amask);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y<sp/>=<sp/>y1;<sp/>y<sp/>&lt;=<sp/>y2;<sp/>y++)<sp/>{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row<sp/>=<sp/>(Uint32<sp/>*)<sp/>surface-&gt;pixels<sp/>+<sp/>y<sp/>*<sp/>surface-&gt;pitch<sp/>/<sp/>4;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(x<sp/>=<sp/>x1;<sp/>x<sp/>&lt;=<sp/>x2;<sp/>x++)<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixel<sp/>=<sp/>row<sp/>+<sp/>x;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>R<sp/>=<sp/>((*pixel<sp/>&amp;<sp/>Rmask)<sp/>+<sp/>((dR<sp/>-<sp/>(*pixel<sp/>&amp;<sp/>Rmask))<sp/>*<sp/>alpha<sp/>&gt;&gt;<sp/>8))<sp/>&amp;<sp/>Rmask;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>G<sp/>=<sp/>((*pixel<sp/>&amp;<sp/>Gmask)<sp/>+<sp/>((dG<sp/>-<sp/>(*pixel<sp/>&amp;<sp/>Gmask))<sp/>*<sp/>alpha<sp/>&gt;&gt;<sp/>8))<sp/>&amp;<sp/>Gmask;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B<sp/>=<sp/>((*pixel<sp/>&amp;<sp/>Bmask)<sp/>+<sp/>((dB<sp/>-<sp/>(*pixel<sp/>&amp;<sp/>Bmask))<sp/>*<sp/>alpha<sp/>&gt;&gt;<sp/>8))<sp/>&amp;<sp/>Bmask;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Amask)</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>=<sp/>((*pixel<sp/>&amp;<sp/>Amask)<sp/>+<sp/>((dA<sp/>-<sp/>(*pixel<sp/>&amp;<sp/>Amask))<sp/>*<sp/>alpha<sp/>&gt;&gt;<sp/>8))<sp/>&amp;<sp/>Amask;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pixel<sp/>=<sp/>R<sp/>|<sp/>G<sp/>|<sp/>B<sp/>|<sp/>A;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(0);</highlight></codeline>
<codeline lineno="475"><highlight class="normal">}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Draw<sp/>rectangle<sp/>with<sp/>alpha<sp/>enabled<sp/>from<sp/>RGBA<sp/>color.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>filledRectAlpha(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>x1,<sp/>Sint16<sp/>y1,<sp/>Sint16<sp/>x2,<sp/>Sint16<sp/>y2,<sp/>Uint32<sp/>color)</highlight></codeline>
<codeline lineno="480"><highlight class="normal">{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>Uint8<sp/>alpha;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>Uint32<sp/>mcolor;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="486"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Lock<sp/>the<sp/>surface<sp/></highlight></codeline>
<codeline lineno="487"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SDL_MUSTLOCK(dst))<sp/>{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SDL_LockSurface(dst)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(-1);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="495"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Setup<sp/>color<sp/></highlight></codeline>
<codeline lineno="496"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>alpha<sp/>=<sp/>color<sp/>&amp;<sp/>0x000000ff;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>mcolor<sp/>=</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_MapRGBA(dst-&gt;format,<sp/>(color<sp/>&amp;<sp/>0xff000000)<sp/>&gt;&gt;<sp/>24,</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(color<sp/>&amp;<sp/>0x00ff0000)<sp/>&gt;&gt;<sp/>16,<sp/>(color<sp/>&amp;<sp/>0x0000ff00)<sp/>&gt;&gt;<sp/>8,<sp/>alpha);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="503"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Draw<sp/></highlight></codeline>
<codeline lineno="504"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>_filledRectAlpha(dst,<sp/>x1,<sp/>y1,<sp/>x2,<sp/>y2,<sp/>mcolor,<sp/>alpha);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="508"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Unlock<sp/>the<sp/>surface<sp/></highlight></codeline>
<codeline lineno="509"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SDL_MUSTLOCK(dst))<sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_UnlockSurface(dst);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(result);</highlight></codeline>
<codeline lineno="515"><highlight class="normal">}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Draw<sp/>horizontal<sp/>line<sp/>with<sp/>alpha<sp/>enabled<sp/>from<sp/>RGBA<sp/>color<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>HLineAlpha(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>x1,<sp/>Sint16<sp/>x2,<sp/>Sint16<sp/>y,<sp/>Uint32<sp/>color)</highlight></codeline>
<codeline lineno="520"><highlight class="normal">{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(filledRectAlpha(dst,<sp/>x1,<sp/>y,<sp/>x2,<sp/>y,<sp/>color));</highlight></codeline>
<codeline lineno="522"><highlight class="normal">}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Draw<sp/>vertical<sp/>line<sp/>with<sp/>alpha<sp/>enabled<sp/>from<sp/>RGBA<sp/>color<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>VLineAlpha(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>x,<sp/>Sint16<sp/>y1,<sp/>Sint16<sp/>y2,<sp/>Uint32<sp/>color)</highlight></codeline>
<codeline lineno="528"><highlight class="normal">{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(filledRectAlpha(dst,<sp/>x,<sp/>y1,<sp/>x,<sp/>y2,<sp/>color));</highlight></codeline>
<codeline lineno="530"><highlight class="normal">}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Pixel<sp/>-<sp/>using<sp/>alpha<sp/>weight<sp/>on<sp/>color<sp/>for<sp/>AA-drawing<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pixelColorWeight(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>x,<sp/>Sint16<sp/>y,<sp/>Uint32<sp/>color,<sp/>Uint32<sp/>weight)</highlight></codeline>
<codeline lineno="536"><highlight class="normal">{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>Uint32<sp/>a;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="540"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Get<sp/>alpha<sp/></highlight></codeline>
<codeline lineno="541"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/>(color<sp/>&amp;<sp/>(Uint32)<sp/>0x000000ff);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="545"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Modify<sp/>Alpha<sp/>by<sp/>weight<sp/></highlight></codeline>
<codeline lineno="546"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/>((a<sp/>*<sp/>weight)<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(pixelColor(dst,<sp/>x,<sp/>y,<sp/>(color<sp/>&amp;<sp/>(Uint32)<sp/>0xffffff00)<sp/>|<sp/>(Uint32)<sp/>a));</highlight></codeline>
<codeline lineno="550"><highlight class="normal">}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Pixel<sp/>-<sp/>using<sp/>alpha<sp/>weight<sp/>on<sp/>color<sp/>for<sp/>AA-drawing<sp/>-<sp/>no<sp/>locking<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pixelColorWeightNolock(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>x,<sp/>Sint16<sp/>y,<sp/>Uint32<sp/>color,<sp/>Uint32<sp/>weight)</highlight></codeline>
<codeline lineno="555"><highlight class="normal">{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>Uint32<sp/>a;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="559"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Get<sp/>alpha<sp/></highlight></codeline>
<codeline lineno="560"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/>(color<sp/>&amp;<sp/>(Uint32)<sp/>0x000000ff);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="564"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Modify<sp/>Alpha<sp/>by<sp/>weight<sp/></highlight></codeline>
<codeline lineno="565"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/>((a<sp/>*<sp/>weight)<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(pixelColorNolock(dst,<sp/>x,<sp/>y,<sp/>(color<sp/>&amp;<sp/>(Uint32)<sp/>0xffffff00)<sp/>|<sp/>(Uint32)<sp/>a));</highlight></codeline>
<codeline lineno="569"><highlight class="normal">}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pixelRGBA(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>x,<sp/>Sint16<sp/>y,<sp/>Uint8<sp/>r,<sp/>Uint8<sp/>g,<sp/>Uint8<sp/>b,<sp/>Uint8<sp/>a)</highlight></codeline>
<codeline lineno="572"><highlight class="normal">{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>Uint32<sp/>color;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="576"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Check<sp/>Alpha<sp/></highlight></codeline>
<codeline lineno="577"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a<sp/>==<sp/>255)<sp/>{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="580"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>No<sp/>alpha<sp/>blending<sp/>required<sp/></highlight></codeline>
<codeline lineno="581"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="583"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Setup<sp/>color<sp/></highlight></codeline>
<codeline lineno="584"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>color<sp/>=<sp/>SDL_MapRGBA(dst-&gt;format,<sp/>r,<sp/>g,<sp/>b,<sp/>a);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="587"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Draw<sp/></highlight></codeline>
<codeline lineno="588"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(fastPixelColor(dst,<sp/>x,<sp/>y,<sp/>color));</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="592"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Alpha<sp/>blending<sp/>required<sp/></highlight></codeline>
<codeline lineno="593"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="595"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Draw<sp/></highlight></codeline>
<codeline lineno="596"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(pixelColor(dst,<sp/>x,<sp/>y,<sp/>((Uint32)<sp/>r<sp/>&lt;&lt;<sp/>24)<sp/>|<sp/>((Uint32)<sp/>g<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>((Uint32)<sp/>b<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>(Uint32)<sp/>a));</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="599"><highlight class="normal">}</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-----<sp/>Horizontal<sp/>line<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Just<sp/>store<sp/>color<sp/>including<sp/>alpha,<sp/>no<sp/>blending<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hlineColorStore(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>x1,<sp/>Sint16<sp/>x2,<sp/>Sint16<sp/>y,<sp/>Uint32<sp/>color)</highlight></codeline>
<codeline lineno="606"><highlight class="normal">{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>left,<sp/>right,<sp/>top,<sp/>bottom;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>Uint8<sp/>*pixel,<sp/>*pixellast;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dx;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pixx,<sp/>pixy;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>w;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>xtmp;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="616"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Get<sp/>clipping<sp/>boundary<sp/></highlight></codeline>
<codeline lineno="617"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>left<sp/>=<sp/>dst-&gt;clip_rect.x;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>right<sp/>=<sp/>dst-&gt;clip_rect.x<sp/>+<sp/>dst-&gt;clip_rect.w<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>top<sp/>=<sp/>dst-&gt;clip_rect.y;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>bottom<sp/>=<sp/>dst-&gt;clip_rect.y<sp/>+<sp/>dst-&gt;clip_rect.h<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="624"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Check<sp/>visibility<sp/>of<sp/>hline<sp/></highlight></codeline>
<codeline lineno="625"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((x1&lt;left)<sp/>&amp;&amp;<sp/>(x2&lt;left))<sp/>{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((x1&gt;right)<sp/>&amp;&amp;<sp/>(x2&gt;right))<sp/>{</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((y&lt;top)<sp/>||<sp/>(y&gt;bottom))<sp/>{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(0);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="637"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Clip<sp/>x<sp/></highlight></codeline>
<codeline lineno="638"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x1<sp/>&lt;<sp/>left)<sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>left;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x2<sp/>&gt;<sp/>right)<sp/>{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>x2<sp/>=<sp/>right;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="647"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Swap<sp/>x1,<sp/>x2<sp/>if<sp/>required<sp/></highlight></codeline>
<codeline lineno="648"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x1<sp/>&gt;<sp/>x2)<sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>xtmp<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>x2;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/>x2<sp/>=<sp/>xtmp;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="656"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Calculate<sp/>width<sp/></highlight></codeline>
<codeline lineno="657"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>=<sp/>x2<sp/>-<sp/>x1;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="661"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Sanity<sp/>check<sp/>on<sp/>width<sp/></highlight></codeline>
<codeline lineno="662"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(w<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(0);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="668"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Lock<sp/>surface<sp/></highlight></codeline>
<codeline lineno="669"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_LockSurface(dst);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="673"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>More<sp/>variable<sp/>setup<sp/></highlight></codeline>
<codeline lineno="674"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>dx<sp/>=<sp/>w;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>pixx<sp/>=<sp/>dst-&gt;format-&gt;BytesPerPixel;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>pixy<sp/>=<sp/>dst-&gt;pitch;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>pixel<sp/>=<sp/>((Uint8<sp/>*)<sp/>dst-&gt;pixels)<sp/>+<sp/>pixx<sp/>*<sp/>(int)<sp/>x1<sp/>+<sp/>pixy<sp/>*<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>y;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="681"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Draw<sp/></highlight></codeline>
<codeline lineno="682"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/>switch<sp/>(dst-&gt;format-&gt;BytesPerPixel)<sp/>{</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(pixel,<sp/>color,<sp/>dx);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixellast<sp/>=<sp/>pixel<sp/>+<sp/>dx<sp/>+<sp/>dx;</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>pixel<sp/>&lt;=<sp/>pixellast;<sp/>pixel<sp/>+=<sp/>pixx)<sp/>{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(Uint16<sp/>*)<sp/>pixel<sp/>=<sp/>color;</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixellast<sp/>=<sp/>pixel<sp/>+<sp/>dx<sp/>+<sp/>dx<sp/>+<sp/>dx;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>pixel<sp/>&lt;=<sp/>pixellast;<sp/>pixel<sp/>+=<sp/>pixx)<sp/>{</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SDL_BYTEORDER<sp/>==<sp/>SDL_BIG_ENDIAN)<sp/>{</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixel[0]<sp/>=<sp/>(color<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixel[1]<sp/>=<sp/>(color<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixel[2]<sp/>=<sp/>color<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixel[0]<sp/>=<sp/>color<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixel[1]<sp/>=<sp/>(color<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixel[2]<sp/>=<sp/>(color<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>case<sp/>4<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dx<sp/>=<sp/>dx<sp/>+<sp/>dx;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixellast<sp/>=<sp/>pixel<sp/>+<sp/>dx<sp/>+<sp/>dx;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>pixel<sp/>&lt;=<sp/>pixellast;<sp/>pixel<sp/>+=<sp/>pixx)<sp/>{</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(Uint32<sp/>*)<sp/>pixel<sp/>=<sp/>color;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="717"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Unlock<sp/>surface<sp/></highlight></codeline>
<codeline lineno="718"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_UnlockSurface(dst);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="722"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Set<sp/>result<sp/>code<sp/></highlight></codeline>
<codeline lineno="723"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(result);</highlight></codeline>
<codeline lineno="727"><highlight class="normal">}</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hlineRGBAStore(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>x1,<sp/>Sint16<sp/>x2,<sp/>Sint16<sp/>y,<sp/>Uint8<sp/>r,<sp/>Uint8<sp/>g,<sp/>Uint8<sp/>b,<sp/>Uint8<sp/>a)</highlight></codeline>
<codeline lineno="730"><highlight class="normal">{</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="732"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Draw<sp/></highlight></codeline>
<codeline lineno="733"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(hlineColorStore(dst,<sp/>x1,<sp/>x2,<sp/>y,<sp/>((Uint32)<sp/>r<sp/>&lt;&lt;<sp/>24)<sp/>|<sp/>((Uint32)<sp/>g<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>((Uint32)<sp/>b<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>(Uint32)<sp/>a));</highlight></codeline>
<codeline lineno="735"><highlight class="normal">}</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hlineColor(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>x1,<sp/>Sint16<sp/>x2,<sp/>Sint16<sp/>y,<sp/>Uint32<sp/>color)</highlight></codeline>
<codeline lineno="738"><highlight class="normal">{</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>left,<sp/>right,<sp/>top,<sp/>bottom;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/>Uint8<sp/>*pixel,<sp/>*pixellast;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dx;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pixx,<sp/>pixy;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>w;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>xtmp;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>Uint8<sp/>*colorptr;</highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="749"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Get<sp/>clipping<sp/>boundary<sp/></highlight></codeline>
<codeline lineno="750"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>left<sp/>=<sp/>dst-&gt;clip_rect.x;</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/>right<sp/>=<sp/>dst-&gt;clip_rect.x<sp/>+<sp/>dst-&gt;clip_rect.w<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>top<sp/>=<sp/>dst-&gt;clip_rect.y;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/>bottom<sp/>=<sp/>dst-&gt;clip_rect.y<sp/>+<sp/>dst-&gt;clip_rect.h<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="757"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Check<sp/>visibility<sp/>of<sp/>hline<sp/></highlight></codeline>
<codeline lineno="758"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((x1&lt;left)<sp/>&amp;&amp;<sp/>(x2&lt;left))<sp/>{</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((x1&gt;right)<sp/>&amp;&amp;<sp/>(x2&gt;right))<sp/>{</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((y&lt;top)<sp/>||<sp/>(y&gt;bottom))<sp/>{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(0);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="770"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Clip<sp/>x<sp/></highlight></codeline>
<codeline lineno="771"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x1<sp/>&lt;<sp/>left)<sp/>{</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>left;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x2<sp/>&gt;<sp/>right)<sp/>{</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/>x2<sp/>=<sp/>right;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="780"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Swap<sp/>x1,<sp/>x2<sp/>if<sp/>required<sp/></highlight></codeline>
<codeline lineno="781"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x1<sp/>&gt;<sp/>x2)<sp/>{</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/>xtmp<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>x2;</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/>x2<sp/>=<sp/>xtmp;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="789"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Calculate<sp/>width<sp/></highlight></codeline>
<codeline lineno="790"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>=<sp/>x2<sp/>-<sp/>x1;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="794"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Sanity<sp/>check<sp/>on<sp/>width<sp/></highlight></codeline>
<codeline lineno="795"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(w<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(0);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="801"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Alpha<sp/>check<sp/></highlight></codeline>
<codeline lineno="802"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((color<sp/>&amp;<sp/>255)<sp/>==<sp/>255)<sp/>{</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="806"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>No<sp/>alpha-blending<sp/>required<sp/></highlight></codeline>
<codeline lineno="807"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="810"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Setup<sp/>color<sp/></highlight></codeline>
<codeline lineno="811"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/>colorptr<sp/>=<sp/>(Uint8<sp/>*)<sp/>&amp;<sp/>color;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SDL_BYTEORDER<sp/>==<sp/>SDL_BIG_ENDIAN)<sp/>{</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color<sp/>=<sp/>SDL_MapRGBA(dst-&gt;format,<sp/>colorptr[0],<sp/>colorptr[1],<sp/>colorptr[2],<sp/>colorptr[3]);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color<sp/>=<sp/>SDL_MapRGBA(dst-&gt;format,<sp/>colorptr[3],<sp/>colorptr[2],<sp/>colorptr[1],<sp/>colorptr[0]);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="820"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Lock<sp/>surface<sp/></highlight></codeline>
<codeline lineno="821"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_LockSurface(dst);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="825"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>More<sp/>variable<sp/>setup<sp/></highlight></codeline>
<codeline lineno="826"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>dx<sp/>=<sp/>w;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/>pixx<sp/>=<sp/>dst-&gt;format-&gt;BytesPerPixel;</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>pixy<sp/>=<sp/>dst-&gt;pitch;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>pixel<sp/>=<sp/>((Uint8<sp/>*)<sp/>dst-&gt;pixels)<sp/>+<sp/>pixx<sp/>*<sp/>(int)<sp/>x1<sp/>+<sp/>pixy<sp/>*<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>y;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="833"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Draw<sp/></highlight></codeline>
<codeline lineno="834"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>switch<sp/>(dst-&gt;format-&gt;BytesPerPixel)<sp/>{</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(pixel,<sp/>color,<sp/>dx);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixellast<sp/>=<sp/>pixel<sp/>+<sp/>dx<sp/>+<sp/>dx;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>pixel<sp/>&lt;=<sp/>pixellast;<sp/>pixel<sp/>+=<sp/>pixx)<sp/>{</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(Uint16<sp/>*)<sp/>pixel<sp/>=<sp/>color;</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixellast<sp/>=<sp/>pixel<sp/>+<sp/>dx<sp/>+<sp/>dx<sp/>+<sp/>dx;</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>pixel<sp/>&lt;=<sp/>pixellast;<sp/>pixel<sp/>+=<sp/>pixx)<sp/>{</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SDL_BYTEORDER<sp/>==<sp/>SDL_BIG_ENDIAN)<sp/>{</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixel[0]<sp/>=<sp/>(color<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixel[1]<sp/>=<sp/>(color<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixel[2]<sp/>=<sp/>color<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixel[0]<sp/>=<sp/>color<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixel[1]<sp/>=<sp/>(color<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixel[2]<sp/>=<sp/>(color<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>case<sp/>4<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dx<sp/>=<sp/>dx<sp/>+<sp/>dx;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixellast<sp/>=<sp/>pixel<sp/>+<sp/>dx<sp/>+<sp/>dx;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>pixel<sp/>&lt;=<sp/>pixellast;<sp/>pixel<sp/>+=<sp/>pixx)<sp/>{</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(Uint32<sp/>*)<sp/>pixel<sp/>=<sp/>color;</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="869"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Unlock<sp/>surface<sp/></highlight></codeline>
<codeline lineno="870"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_UnlockSurface(dst);</highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="874"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Set<sp/>result<sp/>code<sp/></highlight></codeline>
<codeline lineno="875"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="881"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Alpha<sp/>blending<sp/>blit<sp/></highlight></codeline>
<codeline lineno="882"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>HLineAlpha(dst,<sp/>x1,<sp/>x1<sp/>+<sp/>w,<sp/>y,<sp/>color);</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(result);</highlight></codeline>
<codeline lineno="889"><highlight class="normal">}</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hlineRGBA(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>x1,<sp/>Sint16<sp/>x2,<sp/>Sint16<sp/>y,<sp/>Uint8<sp/>r,<sp/>Uint8<sp/>g,<sp/>Uint8<sp/>b,<sp/>Uint8<sp/>a)</highlight></codeline>
<codeline lineno="892"><highlight class="normal">{</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="894"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Draw<sp/></highlight></codeline>
<codeline lineno="895"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(hlineColor(dst,<sp/>x1,<sp/>x2,<sp/>y,<sp/>((Uint32)<sp/>r<sp/>&lt;&lt;<sp/>24)<sp/>|<sp/>((Uint32)<sp/>g<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>((Uint32)<sp/>b<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>(Uint32)<sp/>a));</highlight></codeline>
<codeline lineno="897"><highlight class="normal">}</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-----<sp/>Vertical<sp/>line<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vlineColor(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>x,<sp/>Sint16<sp/>y1,<sp/>Sint16<sp/>y2,<sp/>Uint32<sp/>color)</highlight></codeline>
<codeline lineno="902"><highlight class="normal">{</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>left,<sp/>right,<sp/>top,<sp/>bottom;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/>Uint8<sp/>*pixel,<sp/>*pixellast;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dy;</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pixx,<sp/>pixy;</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>h;</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>ytmp;</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/>Uint8<sp/>*colorptr;</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="913"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Get<sp/>clipping<sp/>boundary<sp/></highlight></codeline>
<codeline lineno="914"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/>left<sp/>=<sp/>dst-&gt;clip_rect.x;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/>right<sp/>=<sp/>dst-&gt;clip_rect.x<sp/>+<sp/>dst-&gt;clip_rect.w<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/>top<sp/>=<sp/>dst-&gt;clip_rect.y;</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/>bottom<sp/>=<sp/>dst-&gt;clip_rect.y<sp/>+<sp/>dst-&gt;clip_rect.h<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="921"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Check<sp/>visibility<sp/>of<sp/>vline<sp/></highlight></codeline>
<codeline lineno="922"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((x&lt;left)<sp/>||<sp/>(x&gt;right))<sp/>{</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(0);</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((y1&lt;top)<sp/>&amp;&amp;<sp/>(y2&lt;top))<sp/>{</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((y1&gt;bottom)<sp/>&amp;&amp;<sp/>(y2&gt;bottom))<sp/>{</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="934"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Clip<sp/>y<sp/></highlight></codeline>
<codeline lineno="935"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y1<sp/>&lt;<sp/>top)<sp/>{</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>top;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y2<sp/>&gt;<sp/>bottom)<sp/>{</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/>y2<sp/>=<sp/>bottom;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="944"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Swap<sp/>y1,<sp/>y2<sp/>if<sp/>required<sp/></highlight></codeline>
<codeline lineno="945"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y1<sp/>&gt;<sp/>y2)<sp/>{</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/>ytmp<sp/>=<sp/>y1;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>y2;</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/>y2<sp/>=<sp/>ytmp;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="953"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Calculate<sp/>height<sp/></highlight></codeline>
<codeline lineno="954"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/>h<sp/>=<sp/>y2<sp/>-<sp/>y1;</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="958"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Sanity<sp/>check<sp/>on<sp/>height<sp/></highlight></codeline>
<codeline lineno="959"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(0);</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="965"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Alpha<sp/>check<sp/></highlight></codeline>
<codeline lineno="966"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((color<sp/>&amp;<sp/>255)<sp/>==<sp/>255)<sp/>{</highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="970"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>No<sp/>alpha-blending<sp/>required<sp/></highlight></codeline>
<codeline lineno="971"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="974"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Setup<sp/>color<sp/></highlight></codeline>
<codeline lineno="975"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/>colorptr<sp/>=<sp/>(Uint8<sp/>*)<sp/>&amp;<sp/>color;</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SDL_BYTEORDER<sp/>==<sp/>SDL_BIG_ENDIAN)<sp/>{</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color<sp/>=<sp/>SDL_MapRGBA(dst-&gt;format,<sp/>colorptr[0],<sp/>colorptr[1],<sp/>colorptr[2],<sp/>colorptr[3]);</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color<sp/>=<sp/>SDL_MapRGBA(dst-&gt;format,<sp/>colorptr[3],<sp/>colorptr[2],<sp/>colorptr[1],<sp/>colorptr[0]);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="984"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Lock<sp/>surface<sp/></highlight></codeline>
<codeline lineno="985"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_LockSurface(dst);</highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="989"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>More<sp/>variable<sp/>setup<sp/></highlight></codeline>
<codeline lineno="990"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/>dy<sp/>=<sp/>h;</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/>pixx<sp/>=<sp/>dst-&gt;format-&gt;BytesPerPixel;</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/>pixy<sp/>=<sp/>dst-&gt;pitch;</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/>pixel<sp/>=<sp/>((Uint8<sp/>*)<sp/>dst-&gt;pixels)<sp/>+<sp/>pixx<sp/>*<sp/>(int)<sp/>x<sp/>+<sp/>pixy<sp/>*<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>y1;</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/>pixellast<sp/>=<sp/>pixel<sp/>+<sp/>pixy<sp/>*<sp/>dy;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="998"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Draw<sp/></highlight></codeline>
<codeline lineno="999"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/>switch<sp/>(dst-&gt;format-&gt;BytesPerPixel)<sp/>{</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>pixel<sp/>&lt;=<sp/>pixellast;<sp/>pixel<sp/>+=<sp/>pixy)<sp/>{</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(Uint8<sp/>*)<sp/>pixel<sp/>=<sp/>color;</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>pixel<sp/>&lt;=<sp/>pixellast;<sp/>pixel<sp/>+=<sp/>pixy)<sp/>{</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(Uint16<sp/>*)<sp/>pixel<sp/>=<sp/>color;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>pixel<sp/>&lt;=<sp/>pixellast;<sp/>pixel<sp/>+=<sp/>pixy)<sp/>{</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SDL_BYTEORDER<sp/>==<sp/>SDL_BIG_ENDIAN)<sp/>{</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixel[0]<sp/>=<sp/>(color<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixel[1]<sp/>=<sp/>(color<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixel[2]<sp/>=<sp/>color<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixel[0]<sp/>=<sp/>color<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixel[1]<sp/>=<sp/>(color<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixel[2]<sp/>=<sp/>(color<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>case<sp/>4<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>pixel<sp/>&lt;=<sp/>pixellast;<sp/>pixel<sp/>+=<sp/>pixy)<sp/>{</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(Uint32<sp/>*)<sp/>pixel<sp/>=<sp/>color;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1032"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Unlock<sp/>surface<sp/></highlight></codeline>
<codeline lineno="1033"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_UnlockSurface(dst);</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1037"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Set<sp/>result<sp/>code<sp/></highlight></codeline>
<codeline lineno="1038"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1044"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Alpha<sp/>blending<sp/>blit<sp/></highlight></codeline>
<codeline lineno="1045"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>VLineAlpha(dst,<sp/>x,<sp/>y1,<sp/>y1<sp/>+<sp/>h,<sp/>color);</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(result);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>vlineRGBA(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>x,<sp/>Sint16<sp/>y1,<sp/>Sint16<sp/>y2,<sp/>Uint8<sp/>r,<sp/>Uint8<sp/>g,<sp/>Uint8<sp/>b,<sp/>Uint8<sp/>a)</highlight></codeline>
<codeline lineno="1055"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1057"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Draw<sp/></highlight></codeline>
<codeline lineno="1058"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(vlineColor(dst,<sp/>x,<sp/>y1,<sp/>y2,<sp/>((Uint32)<sp/>r<sp/>&lt;&lt;<sp/>24)<sp/>|<sp/>((Uint32)<sp/>g<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>((Uint32)<sp/>b<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>(Uint32)<sp/>a));</highlight></codeline>
<codeline lineno="1060"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-----<sp/>Rectangle<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rectangleColor(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>x1,<sp/>Sint16<sp/>y1,<sp/>Sint16<sp/>x2,<sp/>Sint16<sp/>y2,<sp/>Uint32<sp/>color)</highlight></codeline>
<codeline lineno="1065"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>w,<sp/>h,<sp/>xtmp,<sp/>ytmp;</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1070"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Swap<sp/>x1,<sp/>x2<sp/>if<sp/>required<sp/></highlight></codeline>
<codeline lineno="1071"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x1<sp/>&gt;<sp/>x2)<sp/>{</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/>xtmp<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>x2;</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/>x2<sp/>=<sp/>xtmp;</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1079"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Swap<sp/>y1,<sp/>y2<sp/>if<sp/>required<sp/></highlight></codeline>
<codeline lineno="1080"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y1<sp/>&gt;<sp/>y2)<sp/>{</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/>ytmp<sp/>=<sp/>y1;</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>y2;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/>y2<sp/>=<sp/>ytmp;</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1088"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Calculate<sp/>width&amp;height<sp/></highlight></codeline>
<codeline lineno="1089"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>=<sp/>x2<sp/>-<sp/>x1;</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/>h<sp/>=<sp/>y2<sp/>-<sp/>y1;</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1094"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Sanity<sp/>check<sp/></highlight></codeline>
<codeline lineno="1095"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((w<sp/>&lt;<sp/>0)<sp/>||<sp/>(h<sp/>&lt;<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(0);</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1101"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Test<sp/>for<sp/>special<sp/>cases<sp/>of<sp/>straight<sp/>lines<sp/>or<sp/>single<sp/>point<sp/></highlight></codeline>
<codeline lineno="1102"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x1<sp/>==<sp/>x2)<sp/>{</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y1<sp/>==<sp/>y2)<sp/>{</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(pixelColor(dst,<sp/>x1,<sp/>y1,<sp/>color));</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(vlineColor(dst,<sp/>x1,<sp/>y1,<sp/>y2,<sp/>color));</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y1<sp/>==<sp/>y2)<sp/>{</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(hlineColor(dst,<sp/>x1,<sp/>x2,<sp/>y1,<sp/>color));</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1116"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Draw<sp/>rectangle<sp/></highlight></codeline>
<codeline lineno="1117"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>hlineColor(dst,<sp/>x1,<sp/>x2,<sp/>y1,<sp/>color);</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>hlineColor(dst,<sp/>x1,<sp/>x2,<sp/>y2,<sp/>color);</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/>y1<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/>y2<sp/>-=<sp/>1;</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y1&lt;=y2)<sp/>{</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>vlineColor(dst,<sp/>x1,<sp/>y1,<sp/>y2,<sp/>color);</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>vlineColor(dst,<sp/>x2,<sp/>y1,<sp/>y2,<sp/>color);</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(result);</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rectangleRGBA(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>x1,<sp/>Sint16<sp/>y1,<sp/>Sint16<sp/>x2,<sp/>Sint16<sp/>y2,<sp/>Uint8<sp/>r,<sp/>Uint8<sp/>g,<sp/>Uint8<sp/>b,<sp/>Uint8<sp/>a)</highlight></codeline>
<codeline lineno="1132"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1134"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Draw<sp/></highlight></codeline>
<codeline lineno="1135"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(rectangleColor</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(dst,<sp/>x1,<sp/>y1,<sp/>x2,<sp/>y2,<sp/>((Uint32)<sp/>r<sp/>&lt;&lt;<sp/>24)<sp/>|<sp/>((Uint32)<sp/>g<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>((Uint32)<sp/>b<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>(Uint32)<sp/>a));</highlight></codeline>
<codeline lineno="1138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---------<sp/>Clipping<sp/>routines<sp/>for<sp/>line<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Clipping<sp/>based<sp/>heavily<sp/>on<sp/>code<sp/>from<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>http://www.ncsa.uiuc.edu/Vis/Graphics/src/clipCohSuth.c<sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CLIP_LEFT_EDGE<sp/><sp/><sp/>0x1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CLIP_RIGHT_EDGE<sp/><sp/>0x2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CLIP_BOTTOM_EDGE<sp/>0x4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CLIP_TOP_EDGE<sp/><sp/><sp/><sp/>0x8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CLIP_INSIDE(a)<sp/><sp/><sp/>(!a)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CLIP_REJECT(a,b)<sp/>(a&amp;b)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CLIP_ACCEPT(a,b)<sp/>(!(a|b))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clipEncode(Sint16<sp/>x,<sp/>Sint16<sp/>y,<sp/>Sint16<sp/>left,<sp/>Sint16<sp/>top,<sp/>Sint16<sp/>right,<sp/>Sint16<sp/>bottom)</highlight></codeline>
<codeline lineno="1154"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>left)<sp/>{</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/>code<sp/>|=<sp/>CLIP_LEFT_EDGE;</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&gt;<sp/>right)<sp/>{</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/>code<sp/>|=<sp/>CLIP_RIGHT_EDGE;</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&lt;<sp/>top)<sp/>{</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/>code<sp/>|=<sp/>CLIP_TOP_EDGE;</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&gt;<sp/>bottom)<sp/>{</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/>code<sp/>|=<sp/>CLIP_BOTTOM_EDGE;</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>code;</highlight></codeline>
<codeline lineno="1168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>clipLine(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>*<sp/>x1,<sp/>Sint16<sp/>*<sp/>y1,<sp/>Sint16<sp/>*<sp/>x2,<sp/>Sint16<sp/>*<sp/>y2)</highlight></codeline>
<codeline lineno="1171"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>left,<sp/>right,<sp/>top,<sp/>bottom;</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code1,<sp/>code2;</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>draw<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>swaptmp;</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m;</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1179"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Get<sp/>clipping<sp/>boundary<sp/></highlight></codeline>
<codeline lineno="1180"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/>left<sp/>=<sp/>dst-&gt;clip_rect.x;</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/>right<sp/>=<sp/>dst-&gt;clip_rect.x<sp/>+<sp/>dst-&gt;clip_rect.w<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/>top<sp/>=<sp/>dst-&gt;clip_rect.y;</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/>bottom<sp/>=<sp/>dst-&gt;clip_rect.y<sp/>+<sp/>dst-&gt;clip_rect.h<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/>code1<sp/>=<sp/>clipEncode(*x1,<sp/>*y1,<sp/>left,<sp/>top,<sp/>right,<sp/>bottom);</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/>code2<sp/>=<sp/>clipEncode(*x2,<sp/>*y2,<sp/>left,<sp/>top,<sp/>right,<sp/>bottom);</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CLIP_ACCEPT(code1,<sp/>code2))<sp/>{</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>draw<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CLIP_REJECT(code1,<sp/>code2))</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CLIP_INSIDE(code1))<sp/>{</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swaptmp<sp/>=<sp/>*x2;</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*x2<sp/>=<sp/>*x1;</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*x1<sp/>=<sp/>swaptmp;</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swaptmp<sp/>=<sp/>*y2;</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*y2<sp/>=<sp/>*y1;</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*y1<sp/>=<sp/>swaptmp;</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swaptmp<sp/>=<sp/>code2;</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>code2<sp/>=<sp/>code1;</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>code1<sp/>=<sp/>swaptmp;</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*x2<sp/>!=<sp/>*x1)<sp/>{</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/>(*y2<sp/>-<sp/>*y1)<sp/>/<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>(*x2<sp/>-<sp/>*x1);</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/>1.0f;</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code1<sp/>&amp;<sp/>CLIP_LEFT_EDGE)<sp/>{</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*y1<sp/>+=<sp/>(Sint16)<sp/>((left<sp/>-<sp/>*x1)<sp/>*<sp/>m);</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*x1<sp/>=<sp/>left;</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code1<sp/>&amp;<sp/>CLIP_RIGHT_EDGE)<sp/>{</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*y1<sp/>+=<sp/>(Sint16)<sp/>((right<sp/>-<sp/>*x1)<sp/>*<sp/>m);</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*x1<sp/>=<sp/>right;</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code1<sp/>&amp;<sp/>CLIP_BOTTOM_EDGE)<sp/>{</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*x2<sp/>!=<sp/>*x1)<sp/>{</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*x1<sp/>+=<sp/>(Sint16)<sp/>((bottom<sp/>-<sp/>*y1)<sp/>/<sp/>m);</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*y1<sp/>=<sp/>bottom;</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code1<sp/>&amp;<sp/>CLIP_TOP_EDGE)<sp/>{</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*x2<sp/>!=<sp/>*x1)<sp/>{</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*x1<sp/>+=<sp/>(Sint16)<sp/>((top<sp/>-<sp/>*y1)<sp/>/<sp/>m);</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*y1<sp/>=<sp/>top;</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>draw;</highlight></codeline>
<codeline lineno="1232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-----<sp/>Filled<sp/>rectangle<sp/>(Box)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>boxColor(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>x1,<sp/>Sint16<sp/>y1,<sp/>Sint16<sp/>x2,<sp/>Sint16<sp/>y2,<sp/>Uint32<sp/>color)</highlight></codeline>
<codeline lineno="1237"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>left,<sp/>right,<sp/>top,<sp/>bottom;</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/>Uint8<sp/>*pixel,<sp/>*pixellast;</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/>dx;</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dy;</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pixx,<sp/>pixy;</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>w,<sp/>h,<sp/>tmp;</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/>Uint8<sp/>*colorptr;</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1248"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Get<sp/>clipping<sp/>boundary<sp/></highlight></codeline>
<codeline lineno="1249"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/>left<sp/>=<sp/>dst-&gt;clip_rect.x;</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/>right<sp/>=<sp/>dst-&gt;clip_rect.x<sp/>+<sp/>dst-&gt;clip_rect.w<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/>top<sp/>=<sp/>dst-&gt;clip_rect.y;</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/>bottom<sp/>=<sp/>dst-&gt;clip_rect.y<sp/>+<sp/>dst-&gt;clip_rect.h<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>visibility<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((x1&lt;left)<sp/>&amp;&amp;<sp/>(x2&lt;left))<sp/>{</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((x1&gt;right)<sp/>&amp;&amp;<sp/>(x2&gt;right))<sp/>{</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((y1&lt;top)<sp/>&amp;&amp;<sp/>(y2&lt;top))<sp/>{</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((y1&gt;bottom)<sp/>&amp;&amp;<sp/>(y2&gt;bottom))<sp/>{</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clip<sp/>all<sp/>points<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x1&lt;left)<sp/>{<sp/></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>x1=left;<sp/></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x1&gt;right)<sp/>{</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>x1=right;</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x2&lt;left)<sp/>{<sp/></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>x2=left;<sp/></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x2&gt;right)<sp/>{</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>x2=right;</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y1&lt;top)<sp/>{<sp/></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>y1=top;<sp/></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y1&gt;bottom)<sp/>{</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>y1=bottom;</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y2&lt;top)<sp/>{<sp/></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>y2=top;<sp/></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y2&gt;bottom)<sp/>{</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>y2=bottom;</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1292"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Order<sp/>coordinates<sp/></highlight></codeline>
<codeline lineno="1293"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x1<sp/>&gt;<sp/>x2)<sp/>{</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>x2;</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/>x2<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y1<sp/>&gt;<sp/>y2)<sp/>{</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>y1;</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>y2;</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/>y2<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1306"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Test<sp/>for<sp/>special<sp/>cases<sp/>of<sp/>straight<sp/>line<sp/>or<sp/>single<sp/>point<sp/></highlight></codeline>
<codeline lineno="1307"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x1<sp/>==<sp/>x2)<sp/>{</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y1<sp/>==<sp/>y2)<sp/>{</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(pixelColor(dst,<sp/>x1,<sp/>y1,<sp/>color));</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(vlineColor(dst,<sp/>x1,<sp/>y1,<sp/>y2,<sp/>color));</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y1<sp/>==<sp/>y2)<sp/>{</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(hlineColor(dst,<sp/>x1,<sp/>x2,<sp/>y1,<sp/>color));</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1321"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Calculate<sp/>width&amp;height<sp/></highlight></codeline>
<codeline lineno="1322"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>=<sp/>x2<sp/>-<sp/>x1;</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/>h<sp/>=<sp/>y2<sp/>-<sp/>y1;</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1327"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Alpha<sp/>check<sp/></highlight></codeline>
<codeline lineno="1328"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((color<sp/>&amp;<sp/>255)<sp/>==<sp/>255)<sp/>{</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1332"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>No<sp/>alpha-blending<sp/>required<sp/></highlight></codeline>
<codeline lineno="1333"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1336"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Setup<sp/>color<sp/></highlight></codeline>
<codeline lineno="1337"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/>colorptr<sp/>=<sp/>(Uint8<sp/>*)<sp/>&amp;<sp/>color;</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SDL_BYTEORDER<sp/>==<sp/>SDL_BIG_ENDIAN)<sp/>{</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color<sp/>=<sp/>SDL_MapRGBA(dst-&gt;format,<sp/>colorptr[0],<sp/>colorptr[1],<sp/>colorptr[2],<sp/>colorptr[3]);</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color<sp/>=<sp/>SDL_MapRGBA(dst-&gt;format,<sp/>colorptr[3],<sp/>colorptr[2],<sp/>colorptr[1],<sp/>colorptr[0]);</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1346"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Lock<sp/>surface<sp/></highlight></codeline>
<codeline lineno="1347"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_LockSurface(dst);</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"></highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1351"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>More<sp/>variable<sp/>setup<sp/></highlight></codeline>
<codeline lineno="1352"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/>dx<sp/>=<sp/>w;</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/>dy<sp/>=<sp/>h;</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/>pixx<sp/>=<sp/>dst-&gt;format-&gt;BytesPerPixel;</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/>pixy<sp/>=<sp/>dst-&gt;pitch;</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/>pixel<sp/>=<sp/>((Uint8<sp/>*)<sp/>dst-&gt;pixels)<sp/>+<sp/>pixx<sp/>*<sp/>(int)<sp/>x1<sp/>+<sp/>pixy<sp/>*<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>y1;</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/>pixellast<sp/>=<sp/>pixel<sp/>+<sp/>pixx<sp/>*<sp/>dx<sp/>+<sp/>pixy<sp/>*<sp/>dy;</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1361"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Draw<sp/></highlight></codeline>
<codeline lineno="1362"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/>switch<sp/>(dst-&gt;format-&gt;BytesPerPixel)<sp/>{</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>pixel<sp/>&lt;=<sp/>pixellast;<sp/>pixel<sp/>+=<sp/>pixy)<sp/>{</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(pixel,<sp/>(Uint8)<sp/>color,<sp/>dx);</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixy<sp/>-=<sp/>(pixx<sp/>*<sp/>dx);</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>pixel<sp/>&lt;=<sp/>pixellast;<sp/>pixel<sp/>+=<sp/>pixy)<sp/>{</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>dx;<sp/>x++)<sp/>{</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(Uint16<sp/>*)<sp/>pixel<sp/>=<sp/>color;</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixel<sp/>+=<sp/>pixx;</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixy<sp/>-=<sp/>(pixx<sp/>*<sp/>dx);</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>pixel<sp/>&lt;=<sp/>pixellast;<sp/>pixel<sp/>+=<sp/>pixy)<sp/>{</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>dx;<sp/>x++)<sp/>{</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SDL_BYTEORDER<sp/>==<sp/>SDL_BIG_ENDIAN)<sp/>{</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixel[0]<sp/>=<sp/>(color<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixel[1]<sp/>=<sp/>(color<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixel[2]<sp/>=<sp/>color<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixel[0]<sp/>=<sp/>color<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixel[1]<sp/>=<sp/>(color<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixel[2]<sp/>=<sp/>(color<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixel<sp/>+=<sp/>pixx;</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>case<sp/>4<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixy<sp/>-=<sp/>(pixx<sp/>*<sp/>dx);</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>pixel<sp/>&lt;=<sp/>pixellast;<sp/>pixel<sp/>+=<sp/>pixy)<sp/>{</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>dx;<sp/>x++)<sp/>{</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(Uint32<sp/>*)<sp/>pixel<sp/>=<sp/>color;</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixel<sp/>+=<sp/>pixx;</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1407"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Unlock<sp/>surface<sp/></highlight></codeline>
<codeline lineno="1408"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_UnlockSurface(dst);</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"></highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>filledRectAlpha(dst,<sp/>x1,<sp/>y1,<sp/>x1<sp/>+<sp/>w,<sp/>y1<sp/>+<sp/>h,<sp/>color);</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"></highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(result);</highlight></codeline>
<codeline lineno="1420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"></highlight></codeline>
<codeline lineno="1422"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>boxRGBA(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>x1,<sp/>Sint16<sp/>y1,<sp/>Sint16<sp/>x2,<sp/>Sint16<sp/>y2,<sp/>Uint8<sp/>r,<sp/>Uint8<sp/>g,<sp/>Uint8<sp/>b,<sp/>Uint8<sp/>a)</highlight></codeline>
<codeline lineno="1423"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1425"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Draw<sp/></highlight></codeline>
<codeline lineno="1426"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(boxColor(dst,<sp/>x1,<sp/>y1,<sp/>x2,<sp/>y2,<sp/>((Uint32)<sp/>r<sp/>&lt;&lt;<sp/>24)<sp/>|<sp/>((Uint32)<sp/>g<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>((Uint32)<sp/>b<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>(Uint32)<sp/>a));</highlight></codeline>
<codeline lineno="1428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-----<sp/>Line<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1431"><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Non-alpha<sp/>line<sp/>drawing<sp/>code<sp/>adapted<sp/>from<sp/>routine<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>by<sp/>Pete<sp/>Shinners,<sp/>pete@shinners.org<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Originally<sp/>from<sp/>pygame,<sp/>http://pygame.seul.org<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ABS(a)<sp/>(((a)&lt;0)<sp/>?<sp/>-(a)<sp/>:<sp/>(a))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1437"><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lineColor(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>x1,<sp/>Sint16<sp/>y1,<sp/>Sint16<sp/>x2,<sp/>Sint16<sp/>y2,<sp/>Uint32<sp/>color)</highlight></codeline>
<codeline lineno="1439"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pixx,<sp/>pixy;</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/>y;</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dx,<sp/>dy;</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ax,<sp/>ay;</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sx,<sp/>sy;</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>swaptmp;</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/>Uint8<sp/>*pixel;</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/>Uint8<sp/>*colorptr;</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"></highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1450"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Clip<sp/>line<sp/>and<sp/>test<sp/>if<sp/>we<sp/>have<sp/>to<sp/>draw<sp/></highlight></codeline>
<codeline lineno="1451"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(clipLine(dst,<sp/>&amp;x1,<sp/>&amp;y1,<sp/>&amp;x2,<sp/>&amp;y2)))<sp/>{</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(0);</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"></highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1457"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Test<sp/>for<sp/>special<sp/>cases<sp/>of<sp/>straight<sp/>lines<sp/>or<sp/>single<sp/>point<sp/></highlight></codeline>
<codeline lineno="1458"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x1<sp/>==<sp/>x2)<sp/>{</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y1<sp/>&lt;<sp/>y2)<sp/>{</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(vlineColor(dst,<sp/>x1,<sp/>y1,<sp/>y2,<sp/>color));</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y1<sp/>&gt;<sp/>y2)<sp/>{</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(vlineColor(dst,<sp/>x1,<sp/>y2,<sp/>y1,<sp/>color));</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(pixelColor(dst,<sp/>x1,<sp/>y1,<sp/>color));</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y1<sp/>==<sp/>y2)<sp/>{</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x1<sp/>&lt;<sp/>x2)<sp/>{</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(hlineColor(dst,<sp/>x1,<sp/>x2,<sp/>y1,<sp/>color));</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x1<sp/>&gt;<sp/>x2)<sp/>{</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(hlineColor(dst,<sp/>x2,<sp/>x1,<sp/>y1,<sp/>color));</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"></highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1477"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Variable<sp/>setup<sp/></highlight></codeline>
<codeline lineno="1478"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/>dx<sp/>=<sp/>x2<sp/>-<sp/>x1;</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/>dy<sp/>=<sp/>y2<sp/>-<sp/>y1;</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/>sx<sp/>=<sp/>(dx<sp/>&gt;=<sp/>0)<sp/>?<sp/>1<sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/>sy<sp/>=<sp/>(dy<sp/>&gt;=<sp/>0)<sp/>?<sp/>1<sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Lock<sp/>surface<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SDL_MUSTLOCK(dst))<sp/>{</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SDL_LockSurface(dst)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(-1);</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"></highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1492"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Check<sp/>for<sp/>alpha<sp/>blending<sp/></highlight></codeline>
<codeline lineno="1493"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((color<sp/>&amp;<sp/>255)<sp/>==<sp/>255)<sp/>{</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"></highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1497"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>No<sp/>alpha<sp/>blending<sp/>-<sp/>use<sp/>fast<sp/>pixel<sp/>routines<sp/></highlight></codeline>
<codeline lineno="1498"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1501"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Setup<sp/>color<sp/></highlight></codeline>
<codeline lineno="1502"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/>colorptr<sp/>=<sp/>(Uint8<sp/>*)<sp/>&amp;<sp/>color;</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SDL_BYTEORDER<sp/>==<sp/>SDL_BIG_ENDIAN)<sp/>{</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color<sp/>=<sp/>SDL_MapRGBA(dst-&gt;format,<sp/>colorptr[0],<sp/>colorptr[1],<sp/>colorptr[2],<sp/>colorptr[3]);</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color<sp/>=<sp/>SDL_MapRGBA(dst-&gt;format,<sp/>colorptr[3],<sp/>colorptr[2],<sp/>colorptr[1],<sp/>colorptr[0]);</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"></highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1511"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>More<sp/>variable<sp/>setup<sp/></highlight></codeline>
<codeline lineno="1512"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/>dx<sp/>=<sp/>sx<sp/>*<sp/>dx<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/>dy<sp/>=<sp/>sy<sp/>*<sp/>dy<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/>pixx<sp/>=<sp/>dst-&gt;format-&gt;BytesPerPixel;</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/>pixy<sp/>=<sp/>dst-&gt;pitch;</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/>pixel<sp/>=<sp/>((Uint8<sp/>*)<sp/>dst-&gt;pixels)<sp/>+<sp/>pixx<sp/>*<sp/>(int)<sp/>x1<sp/>+<sp/>pixy<sp/>*<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>y1;</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/>pixx<sp/>*=<sp/>sx;</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/>pixy<sp/>*=<sp/>sy;</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(dx<sp/>&lt;<sp/>dy)<sp/>{</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swaptmp<sp/>=<sp/>dx;</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dx<sp/>=<sp/>dy;</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dy<sp/>=<sp/>swaptmp;</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swaptmp<sp/>=<sp/>pixx;</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixx<sp/>=<sp/>pixy;</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixy<sp/>=<sp/>swaptmp;</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"></highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1530"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Draw<sp/></highlight></codeline>
<codeline lineno="1531"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(dst-&gt;format-&gt;BytesPerPixel)<sp/>{</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>x<sp/>&lt;<sp/>dx;<sp/>x++,<sp/>pixel<sp/>+=<sp/>pixx)<sp/>{</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pixel<sp/>=<sp/>color;</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>+=<sp/>dy;</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&gt;=<sp/>dx)<sp/>{</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>-=<sp/>dx;</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixel<sp/>+=<sp/>pixy;</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>x<sp/>&lt;<sp/>dx;<sp/>x++,<sp/>pixel<sp/>+=<sp/>pixx)<sp/>{</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(Uint16<sp/>*)<sp/>pixel<sp/>=<sp/>color;</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>+=<sp/>dy;</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&gt;=<sp/>dx)<sp/>{</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>-=<sp/>dx;</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixel<sp/>+=<sp/>pixy;</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>x<sp/>&lt;<sp/>dx;<sp/>x++,<sp/>pixel<sp/>+=<sp/>pixx)<sp/>{</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SDL_BYTEORDER<sp/>==<sp/>SDL_BIG_ENDIAN)<sp/>{</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixel[0]<sp/>=<sp/>(color<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixel[1]<sp/>=<sp/>(color<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixel[2]<sp/>=<sp/>color<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixel[0]<sp/>=<sp/>color<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixel[1]<sp/>=<sp/>(color<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixel[2]<sp/>=<sp/>(color<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>0xff;</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>+=<sp/>dy;</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&gt;=<sp/>dx)<sp/>{</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>-=<sp/>dx;</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixel<sp/>+=<sp/>pixy;</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>case<sp/>4<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>x<sp/>&lt;<sp/>dx;<sp/>x++,<sp/>pixel<sp/>+=<sp/>pixx)<sp/>{</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(Uint32<sp/>*)<sp/>pixel<sp/>=<sp/>color;</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>+=<sp/>dy;</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&gt;=<sp/>dx)<sp/>{</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>-=<sp/>dx;</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixel<sp/>+=<sp/>pixy;</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"></highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"></highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1588"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Alpha<sp/>blending<sp/>required<sp/>-<sp/>use<sp/>single-pixel<sp/>blits<sp/></highlight></codeline>
<codeline lineno="1589"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"></highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/>ax<sp/>=<sp/>ABS(dx)<sp/>&lt;&lt;<sp/>1;</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/>ay<sp/>=<sp/>ABS(dy)<sp/>&lt;&lt;<sp/>1;</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>y1;</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ax<sp/>&gt;<sp/>ay)<sp/>{</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>ay<sp/>-<sp/>(ax<sp/>&gt;&gt;<sp/>1);</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"></highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(x<sp/>!=<sp/>x2)<sp/>{</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixelColorNolock<sp/>(dst,<sp/>x,<sp/>y,<sp/>color);</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d<sp/>&gt;<sp/>0<sp/>||<sp/>(d<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>sx<sp/>==<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>+=<sp/>sy;</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>-=<sp/>ax;</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>+=<sp/>sx;</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>+=<sp/>ay;</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>ax<sp/>-<sp/>(ay<sp/>&gt;&gt;<sp/>1);</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"></highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(y<sp/>!=<sp/>y2)<sp/>{</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pixelColorNolock<sp/>(dst,<sp/>x,<sp/>y,<sp/>color);</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d<sp/>&gt;<sp/>0<sp/>||<sp/>((d<sp/>==<sp/>0)<sp/>&amp;&amp;<sp/>(sy<sp/>==<sp/>1)))<sp/>{</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>+=<sp/>sx;</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>-=<sp/>ay;</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>+=<sp/>sy;</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>+=<sp/>ax;</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/>pixelColorNolock<sp/>(dst,<sp/>x,<sp/>y,<sp/>color);</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"></highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unlock<sp/>surface<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SDL_MUSTLOCK(dst))<sp/>{</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_UnlockSurface(dst);</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(0);</highlight></codeline>
<codeline lineno="1630"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"></highlight></codeline>
<codeline lineno="1632"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lineRGBA(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>x1,<sp/>Sint16<sp/>y1,<sp/>Sint16<sp/>x2,<sp/>Sint16<sp/>y2,<sp/>Uint8<sp/>r,<sp/>Uint8<sp/>g,<sp/>Uint8<sp/>b,<sp/>Uint8<sp/>a)</highlight></codeline>
<codeline lineno="1633"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1635"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Draw<sp/></highlight></codeline>
<codeline lineno="1636"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(lineColor(dst,<sp/>x1,<sp/>y1,<sp/>x2,<sp/>y2,<sp/>((Uint32)<sp/>r<sp/>&lt;&lt;<sp/>24)<sp/>|<sp/>((Uint32)<sp/>g<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>((Uint32)<sp/>b<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>(Uint32)<sp/>a));</highlight></codeline>
<codeline lineno="1638"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"></highlight></codeline>
<codeline lineno="1640"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>AA<sp/>Line<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1641"><highlight class="normal"></highlight></codeline>
<codeline lineno="1642"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AAlevels<sp/>256</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1643"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AAbits<sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1644"><highlight class="normal"></highlight></codeline>
<codeline lineno="1645"><highlight class="normal"></highlight><highlight class="comment">/*<sp/></highlight></codeline>
<codeline lineno="1646"><highlight class="comment"></highlight></codeline>
<codeline lineno="1647"><highlight class="comment">This<sp/>implementation<sp/>of<sp/>the<sp/>Wu<sp/>antialiasing<sp/>code<sp/>is<sp/>based<sp/>on<sp/>Mike<sp/>Abrash&apos;s</highlight></codeline>
<codeline lineno="1648"><highlight class="comment">DDJ<sp/>article<sp/>which<sp/>was<sp/>reprinted<sp/>as<sp/>Chapter<sp/>42<sp/>of<sp/>his<sp/>Graphics<sp/>Programming</highlight></codeline>
<codeline lineno="1649"><highlight class="comment">Black<sp/>Book,<sp/>but<sp/>has<sp/>been<sp/>optimized<sp/>to<sp/>work<sp/>with<sp/>SDL<sp/>and<sp/>utilizes<sp/>32-bit</highlight></codeline>
<codeline lineno="1650"><highlight class="comment">fixed-point<sp/>arithmetic.<sp/>(A.<sp/>Schiffler).</highlight></codeline>
<codeline lineno="1651"><highlight class="comment"></highlight></codeline>
<codeline lineno="1652"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1653"><highlight class="normal"></highlight></codeline>
<codeline lineno="1654"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aalineColorInt(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>x1,<sp/>Sint16<sp/>y1,<sp/>Sint16<sp/>x2,<sp/>Sint16<sp/>y2,<sp/>Uint32<sp/>color,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>draw_endpoint)</highlight></codeline>
<codeline lineno="1655"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint32<sp/>xx0,<sp/>yy0,<sp/>xx1,<sp/>yy1;</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/>Uint32<sp/>intshift,<sp/>erracc,<sp/>erradj;</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/>Uint32<sp/>erracctmp,<sp/>wgt,<sp/>wgtcompmask;</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dx,<sp/>dy,<sp/>tmp,<sp/>xdir,<sp/>y0p1,<sp/>x0pxdir;</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"></highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1663"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Clip<sp/>line<sp/>and<sp/>test<sp/>if<sp/>we<sp/>have<sp/>to<sp/>draw<sp/></highlight></codeline>
<codeline lineno="1664"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(clipLine(dst,<sp/>&amp;x1,<sp/>&amp;y1,<sp/>&amp;x2,<sp/>&amp;y2)))<sp/>{</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(0);</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"></highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1670"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Keep<sp/>on<sp/>working<sp/>with<sp/>32bit<sp/>numbers<sp/></highlight></codeline>
<codeline lineno="1671"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/>xx0<sp/>=<sp/>x1;</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/>yy0<sp/>=<sp/>y1;</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/>xx1<sp/>=<sp/>x2;</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/>yy1<sp/>=<sp/>y2;</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"></highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1678"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Reorder<sp/>points<sp/>if<sp/>required<sp/></highlight></codeline>
<codeline lineno="1679"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(yy0<sp/>&gt;<sp/>yy1)<sp/>{</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>yy0;</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/>yy0<sp/>=<sp/>yy1;</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/>yy1<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp<sp/>=<sp/>xx0;</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/>xx0<sp/>=<sp/>xx1;</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/>xx1<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1690"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Calculate<sp/>distance<sp/></highlight></codeline>
<codeline lineno="1691"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/>dx<sp/>=<sp/>xx1<sp/>-<sp/>xx0;</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/>dy<sp/>=<sp/>yy1<sp/>-<sp/>yy0;</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"></highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1696"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Adjust<sp/>for<sp/>negative<sp/>dx<sp/>and<sp/>set<sp/>xdir<sp/></highlight></codeline>
<codeline lineno="1697"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dx<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/>xdir<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/>xdir<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/>dx<sp/>=<sp/>(-dx);</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"></highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1706"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Check<sp/>for<sp/>special<sp/>cases<sp/></highlight></codeline>
<codeline lineno="1707"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dx<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1710"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Vertical<sp/>line<sp/></highlight></codeline>
<codeline lineno="1711"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(vlineColor(dst,<sp/>x1,<sp/>y1,<sp/>y2,<sp/>color));</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dy<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1715"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Horizontal<sp/>line<sp/></highlight></codeline>
<codeline lineno="1716"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(hlineColor(dst,<sp/>x1,<sp/>x2,<sp/>y1,<sp/>color));</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dx<sp/>==<sp/>dy)<sp/>{</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1720"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Diagonal<sp/>line<sp/></highlight></codeline>
<codeline lineno="1721"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(lineColor(dst,<sp/>x1,<sp/>y1,<sp/>x2,<sp/>y2,<sp/>color));</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"></highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1726"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Line<sp/>is<sp/>not<sp/>horizontal,<sp/>vertical<sp/>or<sp/>diagonal<sp/></highlight></codeline>
<codeline lineno="1727"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"></highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1731"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Zero<sp/>accumulator<sp/></highlight></codeline>
<codeline lineno="1732"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/>erracc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"></highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1736"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>#<sp/>of<sp/>bits<sp/>by<sp/>which<sp/>to<sp/>shift<sp/>erracc<sp/>to<sp/>get<sp/>intensity<sp/>level<sp/></highlight></codeline>
<codeline lineno="1737"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/>intshift<sp/>=<sp/>32<sp/>-<sp/>AAbits;</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1740"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Mask<sp/>used<sp/>to<sp/>flip<sp/>all<sp/>bits<sp/>in<sp/>an<sp/>intensity<sp/>weighting<sp/></highlight></codeline>
<codeline lineno="1741"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/>wgtcompmask<sp/>=<sp/>AAlevels<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"></highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Lock<sp/>surface<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SDL_MUSTLOCK(dst))<sp/>{</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SDL_LockSurface(dst)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(-1);</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"></highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1752"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Draw<sp/>the<sp/>initial<sp/>pixel<sp/>in<sp/>the<sp/>foreground<sp/>color<sp/></highlight></codeline>
<codeline lineno="1753"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorNolock(dst,<sp/>x1,<sp/>y1,<sp/>color);</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"></highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1757"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>x-major<sp/>or<sp/>y-major?<sp/></highlight></codeline>
<codeline lineno="1758"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dy<sp/>&gt;<sp/>dx)<sp/>{</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"></highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1762"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>y-major.<sp/><sp/>Calculate<sp/>16-bit<sp/>fixed<sp/>point<sp/>fractional<sp/>part<sp/>of<sp/>a<sp/>pixel<sp/>that</highlight></codeline>
<codeline lineno="1763"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>X<sp/>advances<sp/>every<sp/>time<sp/>Y<sp/>advances<sp/>1<sp/>pixel,<sp/>truncating<sp/>the<sp/>result<sp/>so<sp/>that</highlight></codeline>
<codeline lineno="1764"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>we<sp/>won&apos;t<sp/>overrun<sp/>the<sp/>endpoint<sp/>along<sp/>the<sp/>X<sp/>axis<sp/></highlight></codeline>
<codeline lineno="1765"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1767"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Not-so-portable<sp/>version:<sp/>erradj<sp/>=<sp/>((Uint64)dx<sp/>&lt;&lt;<sp/>32)<sp/>/<sp/>(Uint64)dy;<sp/></highlight></codeline>
<codeline lineno="1768"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/>erradj<sp/>=<sp/>((dx<sp/>&lt;&lt;<sp/>16)<sp/>/<sp/>dy)<sp/>&lt;&lt;<sp/>16;</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"></highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1772"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>draw<sp/>all<sp/>pixels<sp/>other<sp/>than<sp/>the<sp/>first<sp/>and<sp/>last<sp/></highlight></codeline>
<codeline lineno="1773"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/>x0pxdir<sp/>=<sp/>xx0<sp/>+<sp/>xdir;</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(--dy)<sp/>{</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>erracctmp<sp/>=<sp/>erracc;</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>erracc<sp/>+=<sp/>erradj;</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(erracc<sp/>&lt;=<sp/>erracctmp)<sp/>{</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1780"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>rollover<sp/>in<sp/>error<sp/>accumulator,<sp/>x<sp/>coord<sp/>advances<sp/></highlight></codeline>
<codeline lineno="1781"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xx0<sp/>=<sp/>x0pxdir;</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x0pxdir<sp/>+=<sp/>xdir;</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yy0++;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>y-major<sp/>so<sp/>always<sp/>advance<sp/>Y<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1786"><highlight class="normal"></highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1788"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>AAbits<sp/>most<sp/>significant<sp/>bits<sp/>of<sp/>erracc<sp/>give<sp/>us<sp/>the<sp/>intensity</highlight></codeline>
<codeline lineno="1789"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>weighting<sp/>for<sp/>this<sp/>pixel,<sp/>and<sp/>the<sp/>complement<sp/>of<sp/>the<sp/>weighting<sp/>for</highlight></codeline>
<codeline lineno="1790"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>paired<sp/>pixel.<sp/></highlight></codeline>
<codeline lineno="1791"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wgt<sp/>=<sp/>(erracc<sp/>&gt;&gt;<sp/>intshift)<sp/>&amp;<sp/>255;</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorWeightNolock<sp/>(dst,<sp/>xx0,<sp/>yy0,<sp/>color,<sp/>255<sp/>-<sp/>wgt);</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorWeightNolock<sp/>(dst,<sp/>x0pxdir,<sp/>yy0,<sp/>color,<sp/>wgt);</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"></highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"></highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1800"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>x-major<sp/>line.<sp/><sp/>Calculate<sp/>16-bit<sp/>fixed-point<sp/>fractional<sp/>part<sp/>of<sp/>a<sp/>pixel</highlight></codeline>
<codeline lineno="1801"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>that<sp/>Y<sp/>advances<sp/>each<sp/>time<sp/>X<sp/>advances<sp/>1<sp/>pixel,<sp/>truncating<sp/>the<sp/>result<sp/>so</highlight></codeline>
<codeline lineno="1802"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>that<sp/>we<sp/>won&apos;t<sp/>overrun<sp/>the<sp/>endpoint<sp/>along<sp/>the<sp/>X<sp/>axis.<sp/></highlight></codeline>
<codeline lineno="1803"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1805"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Not-so-portable<sp/>version:<sp/>erradj<sp/>=<sp/>((Uint64)dy<sp/>&lt;&lt;<sp/>32)<sp/>/<sp/>(Uint64)dx;<sp/></highlight></codeline>
<codeline lineno="1806"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/>erradj<sp/>=<sp/>((dy<sp/>&lt;&lt;<sp/>16)<sp/>/<sp/>dx)<sp/>&lt;&lt;<sp/>16;</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"></highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1810"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>draw<sp/>all<sp/>pixels<sp/>other<sp/>than<sp/>the<sp/>first<sp/>and<sp/>last<sp/></highlight></codeline>
<codeline lineno="1811"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/>y0p1<sp/>=<sp/>yy0<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(--dx)<sp/>{</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"></highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>erracctmp<sp/>=<sp/>erracc;</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>erracc<sp/>+=<sp/>erradj;</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(erracc<sp/>&lt;=<sp/>erracctmp)<sp/>{</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1819"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Accumulator<sp/>turned<sp/>over,<sp/>advance<sp/>y<sp/></highlight></codeline>
<codeline lineno="1820"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yy0<sp/>=<sp/>y0p1;</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y0p1++;</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xx0<sp/>+=<sp/>xdir;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>x-major<sp/>so<sp/>always<sp/>advance<sp/>X<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1826"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>AAbits<sp/>most<sp/>significant<sp/>bits<sp/>of<sp/>erracc<sp/>give<sp/>us<sp/>the<sp/>intensity</highlight></codeline>
<codeline lineno="1827"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>weighting<sp/>for<sp/>this<sp/>pixel,<sp/>and<sp/>the<sp/>complement<sp/>of<sp/>the<sp/>weighting<sp/>for</highlight></codeline>
<codeline lineno="1828"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>paired<sp/>pixel.<sp/></highlight></codeline>
<codeline lineno="1829"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wgt<sp/>=<sp/>(erracc<sp/>&gt;&gt;<sp/>intshift)<sp/>&amp;<sp/>255;</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorWeightNolock<sp/>(dst,<sp/>xx0,<sp/>yy0,<sp/>color,<sp/>255<sp/>-<sp/>wgt);</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorWeightNolock<sp/>(dst,<sp/>xx0,<sp/>y0p1,<sp/>color,<sp/>wgt);</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"></highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1837"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Do<sp/>we<sp/>have<sp/>to<sp/>draw<sp/>the<sp/>endpoint<sp/></highlight></codeline>
<codeline lineno="1838"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(draw_endpoint)<sp/>{</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1841"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Draw<sp/>final<sp/>pixel,<sp/>always<sp/>exactly<sp/>intersected<sp/>by<sp/>the<sp/>line<sp/>and<sp/>doesn&apos;t</highlight></codeline>
<codeline lineno="1842"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>need<sp/>to<sp/>be<sp/>weighted.<sp/></highlight></codeline>
<codeline lineno="1843"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorNolock<sp/>(dst,<sp/>x2,<sp/>y2,<sp/>color);</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"></highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unlock<sp/>surface<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SDL_MUSTLOCK(dst))<sp/>{</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_UnlockSurface(dst);</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"></highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(result);</highlight></codeline>
<codeline lineno="1853"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"></highlight></codeline>
<codeline lineno="1855"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aalineColor(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>x1,<sp/>Sint16<sp/>y1,<sp/>Sint16<sp/>x2,<sp/>Sint16<sp/>y2,<sp/>Uint32<sp/>color)</highlight></codeline>
<codeline lineno="1856"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(aalineColorInt(dst,<sp/>x1,<sp/>y1,<sp/>x2,<sp/>y2,<sp/>color,<sp/>1));</highlight></codeline>
<codeline lineno="1858"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"></highlight></codeline>
<codeline lineno="1860"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aalineRGBA(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>x1,<sp/>Sint16<sp/>y1,<sp/>Sint16<sp/>x2,<sp/>Sint16<sp/>y2,<sp/>Uint8<sp/>r,<sp/>Uint8<sp/>g,<sp/>Uint8<sp/>b,<sp/>Uint8<sp/>a)</highlight></codeline>
<codeline lineno="1861"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(aalineColorInt</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(dst,<sp/>x1,<sp/>y1,<sp/>x2,<sp/>y2,<sp/>((Uint32)<sp/>r<sp/>&lt;&lt;<sp/>24)<sp/>|<sp/>((Uint32)<sp/>g<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>((Uint32)<sp/>b<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>(Uint32)<sp/>a,<sp/>1));</highlight></codeline>
<codeline lineno="1864"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"></highlight></codeline>
<codeline lineno="1866"><highlight class="normal"></highlight></codeline>
<codeline lineno="1867"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-----<sp/>Circle<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1868"><highlight class="normal"></highlight></codeline>
<codeline lineno="1869"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Note:<sp/>Based<sp/>on<sp/>algorithm<sp/>from<sp/>sge<sp/>library,<sp/>modified<sp/>by<sp/>A.<sp/>Schiffler<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1870"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>with<sp/>multiple<sp/>pixel-draw<sp/>removal<sp/>and<sp/>other<sp/>minor<sp/>speedup<sp/>changes.<sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1871"><highlight class="normal"></highlight></codeline>
<codeline lineno="1872"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>circleColor(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>x,<sp/>Sint16<sp/>y,<sp/>Sint16<sp/>r,<sp/>Uint32<sp/>color)</highlight></codeline>
<codeline lineno="1873"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>left,<sp/>right,<sp/>top,<sp/>bottom;</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>x1,<sp/>y1,<sp/>x2,<sp/>y2;</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>cx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>cy<sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>ocx<sp/>=<sp/>(Sint16)<sp/>0xffff;</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>ocy<sp/>=<sp/>(Sint16)<sp/>0xffff;</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>df<sp/>=<sp/>1<sp/>-<sp/>r;</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>d_e<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>d_se<sp/>=<sp/>-2<sp/>*<sp/>r<sp/>+<sp/>5;</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>xpcx,<sp/>xmcx,<sp/>xpcy,<sp/>xmcy;</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>ypcy,<sp/>ymcy,<sp/>ypcx,<sp/>ymcx;</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/>Uint8<sp/>*colorptr;</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"></highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1889"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Sanity<sp/>check<sp/>radius<sp/></highlight></codeline>
<codeline lineno="1890"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(-1);</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"></highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1896"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Special<sp/>case<sp/>for<sp/>r=0<sp/>-<sp/>draw<sp/>a<sp/>point<sp/></highlight></codeline>
<codeline lineno="1897"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(pixelColor(dst,<sp/>x,<sp/>y,<sp/>color));</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"></highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1903"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Get<sp/>clipping<sp/>boundary<sp/></highlight></codeline>
<codeline lineno="1904"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/>left<sp/>=<sp/>dst-&gt;clip_rect.x;</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/>right<sp/>=<sp/>dst-&gt;clip_rect.x<sp/>+<sp/>dst-&gt;clip_rect.w<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/>top<sp/>=<sp/>dst-&gt;clip_rect.y;</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/>bottom<sp/>=<sp/>dst-&gt;clip_rect.y<sp/>+<sp/>dst-&gt;clip_rect.h<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"></highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1911"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Test<sp/>if<sp/>bounding<sp/>box<sp/>of<sp/>circle<sp/>is<sp/>visible<sp/></highlight></codeline>
<codeline lineno="1912"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>x<sp/>-<sp/>r;</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/>x2<sp/>=<sp/>x<sp/>+<sp/>r;</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>y<sp/>-<sp/>r;</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/>y2<sp/>=<sp/>y<sp/>+<sp/>r;</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((x1&lt;left)<sp/>&amp;&amp;<sp/>(x2&lt;left))<sp/>{</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((x1&gt;right)<sp/>&amp;&amp;<sp/>(x2&gt;right))<sp/>{</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((y1&lt;top)<sp/>&amp;&amp;<sp/>(y2&lt;top))<sp/>{</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((y1&gt;bottom)<sp/>&amp;&amp;<sp/>(y2&gt;bottom))<sp/>{</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="1929"><highlight class="normal"></highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1931"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Draw<sp/>circle<sp/></highlight></codeline>
<codeline lineno="1932"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"></highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Lock<sp/>surface<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SDL_MUSTLOCK(dst))<sp/>{</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SDL_LockSurface(dst)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(-1);</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"></highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1943"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Alpha<sp/>Check<sp/></highlight></codeline>
<codeline lineno="1944"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((color<sp/>&amp;<sp/>255)<sp/>==<sp/>255)<sp/>{</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"></highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1948"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>No<sp/>Alpha<sp/>-<sp/>direct<sp/>memory<sp/>writes<sp/></highlight></codeline>
<codeline lineno="1949"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1950"><highlight class="normal"></highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1952"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Setup<sp/>color<sp/></highlight></codeline>
<codeline lineno="1953"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/>colorptr<sp/>=<sp/>(Uint8<sp/>*)<sp/>&amp;<sp/>color;</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SDL_BYTEORDER<sp/>==<sp/>SDL_BIG_ENDIAN)<sp/>{</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color<sp/>=<sp/>SDL_MapRGBA(dst-&gt;format,<sp/>colorptr[0],<sp/>colorptr[1],<sp/>colorptr[2],<sp/>colorptr[3]);</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color<sp/>=<sp/>SDL_MapRGBA(dst-&gt;format,<sp/>colorptr[3],<sp/>colorptr[2],<sp/>colorptr[1],<sp/>colorptr[0]);</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"></highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1962"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Draw<sp/></highlight></codeline>
<codeline lineno="1963"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((ocy<sp/>!=<sp/>cy)<sp/>||<sp/>(ocx<sp/>!=<sp/>cx))<sp/>{</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xpcx<sp/>=<sp/>x<sp/>+<sp/>cx;</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xmcx<sp/>=<sp/>x<sp/>-<sp/>cx;</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cy<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ypcy<sp/>=<sp/>y<sp/>+<sp/>cy;</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ymcy<sp/>=<sp/>y<sp/>-<sp/>cy;</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>fastPixelColorNolock(dst,<sp/>xmcx,<sp/>ypcy,<sp/>color);</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>fastPixelColorNolock(dst,<sp/>xpcx,<sp/>ypcy,<sp/>color);</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>fastPixelColorNolock(dst,<sp/>xmcx,<sp/>ymcy,<sp/>color);</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>fastPixelColorNolock(dst,<sp/>xpcx,<sp/>ymcy,<sp/>color);</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>fastPixelColorNolock(dst,<sp/>xmcx,<sp/>y,<sp/>color);</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>fastPixelColorNolock(dst,<sp/>xpcx,<sp/>y,<sp/>color);</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ocy<sp/>=<sp/>cy;</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xpcy<sp/>=<sp/>x<sp/>+<sp/>cy;</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xmcy<sp/>=<sp/>x<sp/>-<sp/>cy;</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cx<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ypcx<sp/>=<sp/>y<sp/>+<sp/>cx;</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ymcx<sp/>=<sp/>y<sp/>-<sp/>cx;</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>fastPixelColorNolock(dst,<sp/>xmcy,<sp/>ypcx,<sp/>color);</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>fastPixelColorNolock(dst,<sp/>xpcy,<sp/>ypcx,<sp/>color);</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>fastPixelColorNolock(dst,<sp/>xmcy,<sp/>ymcx,<sp/>color);</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>fastPixelColorNolock(dst,<sp/>xpcy,<sp/>ymcx,<sp/>color);</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>fastPixelColorNolock(dst,<sp/>xmcy,<sp/>y,<sp/>color);</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>fastPixelColorNolock(dst,<sp/>xpcy,<sp/>y,<sp/>color);</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ocx<sp/>=<sp/>cx;</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1996"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Update<sp/></highlight></codeline>
<codeline lineno="1997"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(df<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>df<sp/>+=<sp/>d_e;</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d_e<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d_se<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>df<sp/>+=<sp/>d_se;</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d_e<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d_se<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cy--;</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cx++;</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(cx<sp/>&lt;=<sp/>cy);</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"></highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2012"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Unlock<sp/>surface<sp/></highlight></codeline>
<codeline lineno="2013"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_UnlockSurface(dst);</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"></highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2017"><highlight class="normal"></highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2019"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Using<sp/>Alpha<sp/>-<sp/>blended<sp/>pixel<sp/>blits<sp/></highlight></codeline>
<codeline lineno="2020"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2021"><highlight class="normal"></highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2024"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Draw<sp/></highlight></codeline>
<codeline lineno="2025"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((ocy<sp/>!=<sp/>cy)<sp/>||<sp/>(ocx<sp/>!=<sp/>cx))<sp/>{</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xpcx<sp/>=<sp/>x<sp/>+<sp/>cx;</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xmcx<sp/>=<sp/>x<sp/>-<sp/>cx;</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cy<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ypcy<sp/>=<sp/>y<sp/>+<sp/>cy;</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ymcy<sp/>=<sp/>y<sp/>-<sp/>cy;</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorNolock<sp/>(dst,<sp/>xmcx,<sp/>ypcy,<sp/>color);</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorNolock<sp/>(dst,<sp/>xpcx,<sp/>ypcy,<sp/>color);</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorNolock<sp/>(dst,<sp/>xmcx,<sp/>ymcy,<sp/>color);</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorNolock<sp/>(dst,<sp/>xpcx,<sp/>ymcy,<sp/>color);</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorNolock<sp/>(dst,<sp/>xmcx,<sp/>y,<sp/>color);</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorNolock<sp/>(dst,<sp/>xpcx,<sp/>y,<sp/>color);</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ocy<sp/>=<sp/>cy;</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xpcy<sp/>=<sp/>x<sp/>+<sp/>cy;</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xmcy<sp/>=<sp/>x<sp/>-<sp/>cy;</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cx<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ypcx<sp/>=<sp/>y<sp/>+<sp/>cx;</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ymcx<sp/>=<sp/>y<sp/>-<sp/>cx;</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorNolock<sp/>(dst,<sp/>xmcy,<sp/>ypcx,<sp/>color);</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorNolock<sp/>(dst,<sp/>xpcy,<sp/>ypcx,<sp/>color);</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorNolock<sp/>(dst,<sp/>xmcy,<sp/>ymcx,<sp/>color);</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorNolock<sp/>(dst,<sp/>xpcy,<sp/>ymcx,<sp/>color);</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorNolock<sp/>(dst,<sp/>xmcy,<sp/>y,<sp/>color);</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorNolock<sp/>(dst,<sp/>xpcy,<sp/>y,<sp/>color);</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ocx<sp/>=<sp/>cx;</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2057"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Update<sp/></highlight></codeline>
<codeline lineno="2058"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(df<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>df<sp/>+=<sp/>d_e;</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d_e<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d_se<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>df<sp/>+=<sp/>d_se;</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d_e<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d_se<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cy--;</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cx++;</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(cx<sp/>&lt;=<sp/>cy);</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"></highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Alpha<sp/>check<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2073"><highlight class="normal"></highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unlock<sp/>surface<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SDL_MUSTLOCK(dst))<sp/>{</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_UnlockSurface(dst);</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"></highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(result);</highlight></codeline>
<codeline lineno="2080"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"></highlight></codeline>
<codeline lineno="2082"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>circleRGBA(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>x,<sp/>Sint16<sp/>y,<sp/>Sint16<sp/>rad,<sp/>Uint8<sp/>r,<sp/>Uint8<sp/>g,<sp/>Uint8<sp/>b,<sp/>Uint8<sp/>a)</highlight></codeline>
<codeline lineno="2083"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2085"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Draw<sp/></highlight></codeline>
<codeline lineno="2086"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(circleColor(dst,<sp/>x,<sp/>y,<sp/>rad,<sp/>((Uint32)<sp/>r<sp/>&lt;&lt;<sp/>24)<sp/>|<sp/>((Uint32)<sp/>g<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>((Uint32)<sp/>b<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>(Uint32)<sp/>a));</highlight></codeline>
<codeline lineno="2088"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"></highlight></codeline>
<codeline lineno="2090"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-----<sp/>AA<sp/>Circle<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2091"><highlight class="normal"></highlight></codeline>
<codeline lineno="2092"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>AA<sp/>circle<sp/>is<sp/>based<sp/>on<sp/>AAellipse<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2093"><highlight class="normal"></highlight></codeline>
<codeline lineno="2094"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aacircleColor(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>x,<sp/>Sint16<sp/>y,<sp/>Sint16<sp/>r,<sp/>Uint32<sp/>color)</highlight></codeline>
<codeline lineno="2095"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(aaellipseColor(dst,<sp/>x,<sp/>y,<sp/>r,<sp/>r,<sp/>color));</highlight></codeline>
<codeline lineno="2097"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"></highlight></codeline>
<codeline lineno="2099"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aacircleRGBA(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>x,<sp/>Sint16<sp/>y,<sp/>Sint16<sp/>rad,<sp/>Uint8<sp/>r,<sp/>Uint8<sp/>g,<sp/>Uint8<sp/>b,<sp/>Uint8<sp/>a)</highlight></codeline>
<codeline lineno="2100"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2102"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Draw<sp/></highlight></codeline>
<codeline lineno="2103"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(aaellipseColor</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(dst,<sp/>x,<sp/>y,<sp/>rad,<sp/>rad,<sp/>((Uint32)<sp/>r<sp/>&lt;&lt;<sp/>24)<sp/>|<sp/>((Uint32)<sp/>g<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>((Uint32)<sp/>b<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>(Uint32)<sp/>a));</highlight></codeline>
<codeline lineno="2106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"></highlight></codeline>
<codeline lineno="2108"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-----<sp/>Filled<sp/>Circle<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2109"><highlight class="normal"></highlight></codeline>
<codeline lineno="2110"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Note:<sp/>Based<sp/>on<sp/>algorithm<sp/>from<sp/>sge<sp/>library<sp/>with<sp/>multiple-hline<sp/>draw<sp/>removal<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2111"><highlight class="normal"></highlight></codeline>
<codeline lineno="2112"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>and<sp/>other<sp/>speedup<sp/>changes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2113"><highlight class="normal"></highlight></codeline>
<codeline lineno="2114"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>filledCircleColor(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>x,<sp/>Sint16<sp/>y,<sp/>Sint16<sp/>r,<sp/>Uint32<sp/>color)</highlight></codeline>
<codeline lineno="2115"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>left,<sp/>right,<sp/>top,<sp/>bottom;</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>x1,<sp/>y1,<sp/>x2,<sp/>y2;</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>cx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>cy<sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>ocx<sp/>=<sp/>(Sint16)<sp/>0xffff;</highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>ocy<sp/>=<sp/>(Sint16)<sp/>0xffff;</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>df<sp/>=<sp/>1<sp/>-<sp/>r;</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>d_e<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>d_se<sp/>=<sp/>-2<sp/>*<sp/>r<sp/>+<sp/>5;</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>xpcx,<sp/>xmcx,<sp/>xpcy,<sp/>xmcy;</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>ypcy,<sp/>ymcy,<sp/>ypcx,<sp/>ymcx;</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"></highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2130"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Sanity<sp/>check<sp/>radius<sp/></highlight></codeline>
<codeline lineno="2131"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(-1);</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"></highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2137"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Special<sp/>case<sp/>for<sp/>r=0<sp/>-<sp/>draw<sp/>a<sp/>point<sp/></highlight></codeline>
<codeline lineno="2138"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(pixelColor(dst,<sp/>x,<sp/>y,<sp/>color));</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"></highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2144"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Get<sp/>clipping<sp/>boundary<sp/></highlight></codeline>
<codeline lineno="2145"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/>left<sp/>=<sp/>dst-&gt;clip_rect.x;</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/>right<sp/>=<sp/>dst-&gt;clip_rect.x<sp/>+<sp/>dst-&gt;clip_rect.w<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/>top<sp/>=<sp/>dst-&gt;clip_rect.y;</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/>bottom<sp/>=<sp/>dst-&gt;clip_rect.y<sp/>+<sp/>dst-&gt;clip_rect.h<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"></highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2152"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Test<sp/>if<sp/>bounding<sp/>box<sp/>of<sp/>circle<sp/>is<sp/>visible<sp/></highlight></codeline>
<codeline lineno="2153"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>x<sp/>-<sp/>r;</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/>x2<sp/>=<sp/>x<sp/>+<sp/>r;</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>y<sp/>-<sp/>r;</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/>y2<sp/>=<sp/>y<sp/>+<sp/>r;</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((x1&lt;left)<sp/>&amp;&amp;<sp/>(x2&lt;left))<sp/>{</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((x1&gt;right)<sp/>&amp;&amp;<sp/>(x2&gt;right))<sp/>{</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((y1&lt;top)<sp/>&amp;&amp;<sp/>(y2&lt;top))<sp/>{</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((y1&gt;bottom)<sp/>&amp;&amp;<sp/>(y2&gt;bottom))<sp/>{</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="2170"><highlight class="normal"></highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2172"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Draw<sp/></highlight></codeline>
<codeline lineno="2173"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/><sp/><sp/>xpcx<sp/>=<sp/>x<sp/>+<sp/>cx;</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/>xmcx<sp/>=<sp/>x<sp/>-<sp/>cx;</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/>xpcy<sp/>=<sp/>x<sp/>+<sp/>cy;</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/>xmcy<sp/>=<sp/>x<sp/>-<sp/>cy;</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ocy<sp/>!=<sp/>cy)<sp/>{</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cy<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ypcy<sp/>=<sp/>y<sp/>+<sp/>cy;</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ymcy<sp/>=<sp/>y<sp/>-<sp/>cy;</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>hlineColor(dst,<sp/>xmcx,<sp/>xpcx,<sp/>ypcy,<sp/>color);</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>hlineColor(dst,<sp/>xmcx,<sp/>xpcx,<sp/>ymcy,<sp/>color);</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>hlineColor(dst,<sp/>xmcx,<sp/>xpcx,<sp/>y,<sp/>color);</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ocy<sp/>=<sp/>cy;</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ocx<sp/>!=<sp/>cx)<sp/>{</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cx<sp/>!=<sp/>cy)<sp/>{</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cx<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ypcx<sp/>=<sp/>y<sp/>+<sp/>cx;</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ymcx<sp/>=<sp/>y<sp/>-<sp/>cx;</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>hlineColor(dst,<sp/>xmcy,<sp/>xpcy,<sp/>ymcx,<sp/>color);</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>hlineColor(dst,<sp/>xmcy,<sp/>xpcy,<sp/>ypcx,<sp/>color);</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>hlineColor(dst,<sp/>xmcy,<sp/>xpcy,<sp/>y,<sp/>color);</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ocx<sp/>=<sp/>cx;</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2205"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Update<sp/></highlight></codeline>
<codeline lineno="2206"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(df<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>df<sp/>+=<sp/>d_e;</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d_e<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d_se<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>df<sp/>+=<sp/>d_se;</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d_e<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d_se<sp/>+=<sp/>4;</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cy--;</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/><sp/>cx++;</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(cx<sp/>&lt;=<sp/>cy);</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"></highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(result);</highlight></codeline>
<codeline lineno="2221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"></highlight></codeline>
<codeline lineno="2223"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>filledCircleRGBA(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>x,<sp/>Sint16<sp/>y,<sp/>Sint16<sp/>rad,<sp/>Uint8<sp/>r,<sp/>Uint8<sp/>g,<sp/>Uint8<sp/>b,<sp/>Uint8<sp/>a)</highlight></codeline>
<codeline lineno="2224"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2226"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Draw<sp/></highlight></codeline>
<codeline lineno="2227"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(filledCircleColor</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(dst,<sp/>x,<sp/>y,<sp/>rad,<sp/>((Uint32)<sp/>r<sp/>&lt;&lt;<sp/>24)<sp/>|<sp/>((Uint32)<sp/>g<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>((Uint32)<sp/>b<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>(Uint32)<sp/>a));</highlight></codeline>
<codeline lineno="2230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"></highlight></codeline>
<codeline lineno="2232"><highlight class="normal"></highlight></codeline>
<codeline lineno="2233"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-----<sp/>Ellipse<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2234"><highlight class="normal"></highlight></codeline>
<codeline lineno="2235"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Note:<sp/>Based<sp/>on<sp/>algorithm<sp/>from<sp/>sge<sp/>library<sp/>with<sp/>multiple-hline<sp/>draw<sp/>removal<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2236"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>and<sp/>other<sp/>speedup<sp/>changes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2237"><highlight class="normal"></highlight></codeline>
<codeline lineno="2238"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ellipseColor(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>x,<sp/>Sint16<sp/>y,<sp/>Sint16<sp/>rx,<sp/>Sint16<sp/>ry,<sp/>Uint32<sp/>color)</highlight></codeline>
<codeline lineno="2239"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>left,<sp/>right,<sp/>top,<sp/>bottom;</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>x1,<sp/>y1,<sp/>x2,<sp/>y2;</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix,<sp/>iy;</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h,<sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>oh,<sp/>oi,<sp/>oj,<sp/>ok;</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xmh,<sp/>xph,<sp/>ypk,<sp/>ymk;</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xmi,<sp/>xpi,<sp/>ymj,<sp/>ypj;</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xmj,<sp/>xpj,<sp/>ymi,<sp/>ypi;</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xmk,<sp/>xpk,<sp/>ymh,<sp/>yph;</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/>Uint8<sp/>*colorptr;</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"></highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2253"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Sanity<sp/>check<sp/>radii<sp/></highlight></codeline>
<codeline lineno="2254"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((rx<sp/>&lt;<sp/>0)<sp/>||<sp/>(ry<sp/>&lt;<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(-1);</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"></highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2260"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Special<sp/>case<sp/>for<sp/>rx=0<sp/>-<sp/>draw<sp/>a<sp/>vline<sp/></highlight></codeline>
<codeline lineno="2261"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rx<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(vlineColor(dst,<sp/>x,<sp/>y<sp/>-<sp/>ry,<sp/>y<sp/>+<sp/>ry,<sp/>color));</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2266"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Special<sp/>case<sp/>for<sp/>ry=0<sp/>-<sp/>draw<sp/>a<sp/>hline<sp/></highlight></codeline>
<codeline lineno="2267"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ry<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(hlineColor(dst,<sp/>x<sp/>-<sp/>rx,<sp/>x<sp/>+<sp/>rx,<sp/>y,<sp/>color));</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"></highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2273"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Get<sp/>clipping<sp/>boundary<sp/></highlight></codeline>
<codeline lineno="2274"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/>left<sp/>=<sp/>dst-&gt;clip_rect.x;</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/>right<sp/>=<sp/>dst-&gt;clip_rect.x<sp/>+<sp/>dst-&gt;clip_rect.w<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/>top<sp/>=<sp/>dst-&gt;clip_rect.y;</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/>bottom<sp/>=<sp/>dst-&gt;clip_rect.y<sp/>+<sp/>dst-&gt;clip_rect.h<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"></highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2281"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Test<sp/>if<sp/>bounding<sp/>box<sp/>of<sp/>ellipse<sp/>is<sp/>visible<sp/></highlight></codeline>
<codeline lineno="2282"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>x<sp/>-<sp/>rx;</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/>x2<sp/>=<sp/>x<sp/>+<sp/>rx;</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>y<sp/>-<sp/>ry;</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/>y2<sp/>=<sp/>y<sp/>+<sp/>ry;</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((x1&lt;left)<sp/>&amp;&amp;<sp/>(x2&lt;left))<sp/>{</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((x1&gt;right)<sp/>&amp;&amp;<sp/>(x2&gt;right))<sp/>{</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((y1&lt;top)<sp/>&amp;&amp;<sp/>(y2&lt;top))<sp/>{</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((y1&gt;bottom)<sp/>&amp;&amp;<sp/>(y2&gt;bottom))<sp/>{</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="2299"><highlight class="normal"></highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2301"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Init<sp/>vars<sp/></highlight></codeline>
<codeline lineno="2302"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/><sp/>oh<sp/>=<sp/>oi<sp/>=<sp/>oj<sp/>=<sp/>ok<sp/>=<sp/>0xFFFF;</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"></highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2306"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Draw<sp/></highlight></codeline>
<codeline lineno="2307"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"></highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Lock<sp/>surface<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SDL_MUSTLOCK(dst))<sp/>{</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SDL_LockSurface(dst)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(-1);</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"></highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2318"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Check<sp/>alpha<sp/></highlight></codeline>
<codeline lineno="2319"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((color<sp/>&amp;<sp/>255)<sp/>==<sp/>255)<sp/>{</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"></highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2323"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>No<sp/>Alpha<sp/>-<sp/>direct<sp/>memory<sp/>writes<sp/></highlight></codeline>
<codeline lineno="2324"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2325"><highlight class="normal"></highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2327"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Setup<sp/>color<sp/></highlight></codeline>
<codeline lineno="2328"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/><sp/><sp/>colorptr<sp/>=<sp/>(Uint8<sp/>*)<sp/>&amp;<sp/>color;</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SDL_BYTEORDER<sp/>==<sp/>SDL_BIG_ENDIAN)<sp/>{</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color<sp/>=<sp/>SDL_MapRGBA(dst-&gt;format,<sp/>colorptr[0],<sp/>colorptr[1],<sp/>colorptr[2],<sp/>colorptr[3]);</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color<sp/>=<sp/>SDL_MapRGBA(dst-&gt;format,<sp/>colorptr[3],<sp/>colorptr[2],<sp/>colorptr[1],<sp/>colorptr[0]);</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"></highlight></codeline>
<codeline lineno="2336"><highlight class="normal"></highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rx<sp/>&gt;<sp/>ry)<sp/>{</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ix<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iy<sp/>=<sp/>rx<sp/>*<sp/>64;</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"></highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>(ix<sp/>+<sp/>32)<sp/>&gt;&gt;<sp/>6;</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>(iy<sp/>+<sp/>32)<sp/>&gt;&gt;<sp/>6;</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>(h<sp/>*<sp/>ry)<sp/>/<sp/>rx;</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>(i<sp/>*<sp/>ry)<sp/>/<sp/>rx;</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"></highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((ok<sp/>!=<sp/>k)<sp/>&amp;&amp;<sp/>(oj<sp/>!=<sp/>k))<sp/>||<sp/>((oj<sp/>!=<sp/>j)<sp/>&amp;&amp;<sp/>(ok<sp/>!=<sp/>j))<sp/>||<sp/>(k<sp/>!=<sp/>j))<sp/>{</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xph<sp/>=<sp/>x<sp/>+<sp/>h;</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xmh<sp/>=<sp/>x<sp/>-<sp/>h;</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ypk<sp/>=<sp/>y<sp/>+<sp/>k;</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ymk<sp/>=<sp/>y<sp/>-<sp/>k;</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>fastPixelColorNolock(dst,<sp/>xmh,<sp/>ypk,<sp/>color);</highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>fastPixelColorNolock(dst,<sp/>xph,<sp/>ypk,<sp/>color);</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>fastPixelColorNolock(dst,<sp/>xmh,<sp/>ymk,<sp/>color);</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>fastPixelColorNolock(dst,<sp/>xph,<sp/>ymk,<sp/>color);</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>fastPixelColorNolock(dst,<sp/>xmh,<sp/>y,<sp/>color);</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>fastPixelColorNolock(dst,<sp/>xph,<sp/>y,<sp/>color);</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xpi<sp/>=<sp/>x<sp/>+<sp/>i;</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xmi<sp/>=<sp/>x<sp/>-<sp/>i;</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ypj<sp/>=<sp/>y<sp/>+<sp/>j;</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ymj<sp/>=<sp/>y<sp/>-<sp/>j;</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>fastPixelColorNolock(dst,<sp/>xmi,<sp/>ypj,<sp/>color);</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>fastPixelColorNolock(dst,<sp/>xpi,<sp/>ypj,<sp/>color);</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>fastPixelColorNolock(dst,<sp/>xmi,<sp/>ymj,<sp/>color);</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>fastPixelColorNolock(dst,<sp/>xpi,<sp/>ymj,<sp/>color);</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>fastPixelColorNolock(dst,<sp/>xmi,<sp/>y,<sp/>color);</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>fastPixelColorNolock(dst,<sp/>xpi,<sp/>y,<sp/>color);</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oj<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"></highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ix<sp/>=<sp/>ix<sp/>+<sp/>iy<sp/>/<sp/>rx;</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iy<sp/>=<sp/>iy<sp/>-<sp/>ix<sp/>/<sp/>rx;</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"></highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>h);</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ix<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iy<sp/>=<sp/>ry<sp/>*<sp/>64;</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"></highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>(ix<sp/>+<sp/>32)<sp/>&gt;&gt;<sp/>6;</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>(iy<sp/>+<sp/>32)<sp/>&gt;&gt;<sp/>6;</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>(h<sp/>*<sp/>rx)<sp/>/<sp/>ry;</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>(i<sp/>*<sp/>rx)<sp/>/<sp/>ry;</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"></highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((oi<sp/>!=<sp/>i)<sp/>&amp;&amp;<sp/>(oh<sp/>!=<sp/>i))<sp/>||<sp/>((oh<sp/>!=<sp/>h)<sp/>&amp;&amp;<sp/>(oi<sp/>!=<sp/>h)<sp/>&amp;&amp;<sp/>(i<sp/>!=<sp/>h)))<sp/>{</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xmj<sp/>=<sp/>x<sp/>-<sp/>j;</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xpj<sp/>=<sp/>x<sp/>+<sp/>j;</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ypi<sp/>=<sp/>y<sp/>+<sp/>i;</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ymi<sp/>=<sp/>y<sp/>-<sp/>i;</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>fastPixelColorNolock(dst,<sp/>xmj,<sp/>ypi,<sp/>color);</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>fastPixelColorNolock(dst,<sp/>xpj,<sp/>ypi,<sp/>color);</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>fastPixelColorNolock(dst,<sp/>xmj,<sp/>ymi,<sp/>color);</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>fastPixelColorNolock(dst,<sp/>xpj,<sp/>ymi,<sp/>color);</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>fastPixelColorNolock(dst,<sp/>xmj,<sp/>y,<sp/>color);</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>fastPixelColorNolock(dst,<sp/>xpj,<sp/>y,<sp/>color);</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oi<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xmk<sp/>=<sp/>x<sp/>-<sp/>k;</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xpk<sp/>=<sp/>x<sp/>+<sp/>k;</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yph<sp/>=<sp/>y<sp/>+<sp/>h;</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ymh<sp/>=<sp/>y<sp/>-<sp/>h;</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>fastPixelColorNolock(dst,<sp/>xmk,<sp/>yph,<sp/>color);</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>fastPixelColorNolock(dst,<sp/>xpk,<sp/>yph,<sp/>color);</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>fastPixelColorNolock(dst,<sp/>xmk,<sp/>ymh,<sp/>color);</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>fastPixelColorNolock(dst,<sp/>xpk,<sp/>ymh,<sp/>color);</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>fastPixelColorNolock(dst,<sp/>xmk,<sp/>y,<sp/>color);</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>fastPixelColorNolock(dst,<sp/>xpk,<sp/>y,<sp/>color);</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oh<sp/>=<sp/>h;</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"></highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ix<sp/>=<sp/>ix<sp/>+<sp/>iy<sp/>/<sp/>ry;</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iy<sp/>=<sp/>iy<sp/>-<sp/>ix<sp/>/<sp/>ry;</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"></highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>h);</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"></highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"></highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rx<sp/>&gt;<sp/>ry)<sp/>{</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ix<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iy<sp/>=<sp/>rx<sp/>*<sp/>64;</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"></highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>(ix<sp/>+<sp/>32)<sp/>&gt;&gt;<sp/>6;</highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>(iy<sp/>+<sp/>32)<sp/>&gt;&gt;<sp/>6;</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>(h<sp/>*<sp/>ry)<sp/>/<sp/>rx;</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>(i<sp/>*<sp/>ry)<sp/>/<sp/>rx;</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"></highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((ok<sp/>!=<sp/>k)<sp/>&amp;&amp;<sp/>(oj<sp/>!=<sp/>k))<sp/>||<sp/>((oj<sp/>!=<sp/>j)<sp/>&amp;&amp;<sp/>(ok<sp/>!=<sp/>j))<sp/>||<sp/>(k<sp/>!=<sp/>j))<sp/>{</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xph<sp/>=<sp/>x<sp/>+<sp/>h;</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xmh<sp/>=<sp/>x<sp/>-<sp/>h;</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ypk<sp/>=<sp/>y<sp/>+<sp/>k;</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ymk<sp/>=<sp/>y<sp/>-<sp/>k;</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorNolock<sp/>(dst,<sp/>xmh,<sp/>ypk,<sp/>color);</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorNolock<sp/>(dst,<sp/>xph,<sp/>ypk,<sp/>color);</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorNolock<sp/>(dst,<sp/>xmh,<sp/>ymk,<sp/>color);</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorNolock<sp/>(dst,<sp/>xph,<sp/>ymk,<sp/>color);</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorNolock<sp/>(dst,<sp/>xmh,<sp/>y,<sp/>color);</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorNolock<sp/>(dst,<sp/>xph,<sp/>y,<sp/>color);</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xpi<sp/>=<sp/>x<sp/>+<sp/>i;</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xmi<sp/>=<sp/>x<sp/>-<sp/>i;</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ypj<sp/>=<sp/>y<sp/>+<sp/>j;</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ymj<sp/>=<sp/>y<sp/>-<sp/>j;</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorNolock<sp/>(dst,<sp/>xmi,<sp/>ypj,<sp/>color);</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorNolock<sp/>(dst,<sp/>xpi,<sp/>ypj,<sp/>color);</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorNolock<sp/>(dst,<sp/>xmi,<sp/>ymj,<sp/>color);</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColor(dst,<sp/>xpi,<sp/>ymj,<sp/>color);</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorNolock<sp/>(dst,<sp/>xmi,<sp/>y,<sp/>color);</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorNolock<sp/>(dst,<sp/>xpi,<sp/>y,<sp/>color);</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oj<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"></highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ix<sp/>=<sp/>ix<sp/>+<sp/>iy<sp/>/<sp/>rx;</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iy<sp/>=<sp/>iy<sp/>-<sp/>ix<sp/>/<sp/>rx;</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"></highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>h);</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ix<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iy<sp/>=<sp/>ry<sp/>*<sp/>64;</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"></highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>(ix<sp/>+<sp/>32)<sp/>&gt;&gt;<sp/>6;</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>(iy<sp/>+<sp/>32)<sp/>&gt;&gt;<sp/>6;</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>(h<sp/>*<sp/>rx)<sp/>/<sp/>ry;</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>(i<sp/>*<sp/>rx)<sp/>/<sp/>ry;</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"></highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((oi<sp/>!=<sp/>i)<sp/>&amp;&amp;<sp/>(oh<sp/>!=<sp/>i))<sp/>||<sp/>((oh<sp/>!=<sp/>h)<sp/>&amp;&amp;<sp/>(oi<sp/>!=<sp/>h)<sp/>&amp;&amp;<sp/>(i<sp/>!=<sp/>h)))<sp/>{</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xmj<sp/>=<sp/>x<sp/>-<sp/>j;</highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xpj<sp/>=<sp/>x<sp/>+<sp/>j;</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ypi<sp/>=<sp/>y<sp/>+<sp/>i;</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ymi<sp/>=<sp/>y<sp/>-<sp/>i;</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorNolock<sp/>(dst,<sp/>xmj,<sp/>ypi,<sp/>color);</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorNolock<sp/>(dst,<sp/>xpj,<sp/>ypi,<sp/>color);</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorNolock<sp/>(dst,<sp/>xmj,<sp/>ymi,<sp/>color);</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorNolock<sp/>(dst,<sp/>xpj,<sp/>ymi,<sp/>color);</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorNolock<sp/>(dst,<sp/>xmj,<sp/>y,<sp/>color);</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorNolock<sp/>(dst,<sp/>xpj,<sp/>y,<sp/>color);</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oi<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xmk<sp/>=<sp/>x<sp/>-<sp/>k;</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xpk<sp/>=<sp/>x<sp/>+<sp/>k;</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yph<sp/>=<sp/>y<sp/>+<sp/>h;</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ymh<sp/>=<sp/>y<sp/>-<sp/>h;</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorNolock<sp/>(dst,<sp/>xmk,<sp/>yph,<sp/>color);</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorNolock<sp/>(dst,<sp/>xpk,<sp/>yph,<sp/>color);</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorNolock<sp/>(dst,<sp/>xmk,<sp/>ymh,<sp/>color);</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorNolock<sp/>(dst,<sp/>xpk,<sp/>ymh,<sp/>color);</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorNolock<sp/>(dst,<sp/>xmk,<sp/>y,<sp/>color);</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorNolock<sp/>(dst,<sp/>xpk,<sp/>y,<sp/>color);</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oh<sp/>=<sp/>h;</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"></highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ix<sp/>=<sp/>ix<sp/>+<sp/>iy<sp/>/<sp/>ry;</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iy<sp/>=<sp/>iy<sp/>-<sp/>ix<sp/>/<sp/>ry;</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"></highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>h);</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"></highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Alpha<sp/>check<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2524"><highlight class="normal"></highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unlock<sp/>surface<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SDL_MUSTLOCK(dst))<sp/>{</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_UnlockSurface(dst);</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"></highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(result);</highlight></codeline>
<codeline lineno="2531"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"></highlight></codeline>
<codeline lineno="2533"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ellipseRGBA(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>x,<sp/>Sint16<sp/>y,<sp/>Sint16<sp/>rx,<sp/>Sint16<sp/>ry,<sp/>Uint8<sp/>r,<sp/>Uint8<sp/>g,<sp/>Uint8<sp/>b,<sp/>Uint8<sp/>a)</highlight></codeline>
<codeline lineno="2534"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2536"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Draw<sp/></highlight></codeline>
<codeline lineno="2537"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(ellipseColor(dst,<sp/>x,<sp/>y,<sp/>rx,<sp/>ry,<sp/>((Uint32)<sp/>r<sp/>&lt;&lt;<sp/>24)<sp/>|<sp/>((Uint32)<sp/>g<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>((Uint32)<sp/>b<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>(Uint32)<sp/>a));</highlight></codeline>
<codeline lineno="2539"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"></highlight></codeline>
<codeline lineno="2541"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-----<sp/>AA<sp/>Ellipse<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2542"><highlight class="normal"></highlight></codeline>
<codeline lineno="2543"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Based<sp/>on<sp/>code<sp/>from<sp/>Anders<sp/>Lindstroem,<sp/>based<sp/>on<sp/>code<sp/>from<sp/>SGE,<sp/>based<sp/>on<sp/>code<sp/>from<sp/>TwinLib<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2544"><highlight class="normal"></highlight></codeline>
<codeline lineno="2545"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aaellipseColor(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>xc,<sp/>Sint16<sp/>yc,<sp/>Sint16<sp/>rx,<sp/>Sint16<sp/>ry,<sp/>Uint32<sp/>color)</highlight></codeline>
<codeline lineno="2546"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>left,<sp/>right,<sp/>top,<sp/>bottom;</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>x1,y1,x2,y2;</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a2,<sp/>b2,<sp/>ds,<sp/>dt,<sp/>dxt,<sp/>t,<sp/>s,<sp/>d;</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>x,<sp/>y,<sp/>xs,<sp/>ys,<sp/>dyt,<sp/>xx,<sp/>yy,<sp/>xc2,<sp/>yc2;</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>cp;</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/><sp/><sp/>Uint8<sp/>weight,<sp/>iweight;</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"></highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2557"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Sanity<sp/>check<sp/>radii<sp/></highlight></codeline>
<codeline lineno="2558"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((rx<sp/>&lt;<sp/>0)<sp/>||<sp/>(ry<sp/>&lt;<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(-1);</highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"></highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2564"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Special<sp/>case<sp/>for<sp/>rx=0<sp/>-<sp/>draw<sp/>a<sp/>vline<sp/></highlight></codeline>
<codeline lineno="2565"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rx<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(vlineColor(dst,<sp/>xc,<sp/>yc<sp/>-<sp/>ry,<sp/>yc<sp/>+<sp/>ry,<sp/>color));</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2570"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Special<sp/>case<sp/>for<sp/>ry=0<sp/>-<sp/>draw<sp/>a<sp/>hline<sp/></highlight></codeline>
<codeline lineno="2571"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ry<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(hlineColor(dst,<sp/>xc<sp/>-<sp/>rx,<sp/>xc<sp/>+<sp/>rx,<sp/>yc,<sp/>color));</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"></highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2577"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Get<sp/>clipping<sp/>boundary<sp/></highlight></codeline>
<codeline lineno="2578"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/><sp/><sp/>left<sp/>=<sp/>dst-&gt;clip_rect.x;</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/><sp/><sp/>right<sp/>=<sp/>dst-&gt;clip_rect.x<sp/>+<sp/>dst-&gt;clip_rect.w<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/><sp/><sp/>top<sp/>=<sp/>dst-&gt;clip_rect.y;</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"><sp/><sp/><sp/><sp/>bottom<sp/>=<sp/>dst-&gt;clip_rect.y<sp/>+<sp/>dst-&gt;clip_rect.h<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2583"><highlight class="normal"></highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2585"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Test<sp/>if<sp/>bounding<sp/>box<sp/>of<sp/>ellipse<sp/>is<sp/>visible<sp/></highlight></codeline>
<codeline lineno="2586"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>xc<sp/>-<sp/>rx;</highlight></codeline>
<codeline lineno="2588"><highlight class="normal"><sp/><sp/><sp/><sp/>x2<sp/>=<sp/>xc<sp/>+<sp/>rx;</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>yc<sp/>-<sp/>ry;</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/><sp/><sp/>y2<sp/>=<sp/>yc<sp/>+<sp/>ry;</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((x1&lt;left)<sp/>&amp;&amp;<sp/>(x2&lt;left))<sp/>{</highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((x1&gt;right)<sp/>&amp;&amp;<sp/>(x2&gt;right))<sp/>{</highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((y1&lt;top)<sp/>&amp;&amp;<sp/>(y2&lt;top))<sp/>{</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((y1&gt;bottom)<sp/>&amp;&amp;<sp/>(y2&gt;bottom))<sp/>{</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Variable<sp/>setup<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/><sp/><sp/>a2<sp/>=<sp/>rx<sp/>*<sp/>rx;</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/><sp/><sp/>b2<sp/>=<sp/>ry<sp/>*<sp/>ry;</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"></highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/><sp/><sp/>ds<sp/>=<sp/>2<sp/>*<sp/>a2;</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><sp/><sp/><sp/><sp/>dt<sp/>=<sp/>2<sp/>*<sp/>b2;</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"></highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/><sp/><sp/>xc2<sp/>=<sp/>2<sp/>*<sp/>xc;</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/><sp/><sp/>yc2<sp/>=<sp/>2<sp/>*<sp/>yc;</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"></highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/><sp/><sp/>dxt<sp/>=<sp/>(int)<sp/>(a2<sp/>/<sp/>sqrt(a2<sp/>+<sp/>b2));</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"></highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>=<sp/>-2<sp/>*<sp/>a2<sp/>*<sp/>ry;</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"></highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>xc;</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>yc<sp/>-<sp/>ry;</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"></highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Draw<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"></highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Lock<sp/>surface<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SDL_MUSTLOCK(dst))<sp/>{</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SDL_LockSurface(dst)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(-1);</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"></highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>&quot;End<sp/>points&quot;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorNolock(dst,<sp/>x,<sp/>y,<sp/>color);</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorNolock(dst,<sp/>xc2<sp/>-<sp/>x,<sp/>y,<sp/>color);</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorNolock(dst,<sp/>x,<sp/>yc2<sp/>-<sp/>y,<sp/>color);</highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorNolock(dst,<sp/>xc2<sp/>-<sp/>x,<sp/>yc2<sp/>-<sp/>y,<sp/>color);</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"></highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>dxt;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/><sp/><sp/>x--;</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>+=<sp/>t<sp/>-<sp/>b2;</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"></highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ys<sp/>=<sp/>y<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((d<sp/>-<sp/>s<sp/>-<sp/>a2)<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((2<sp/>*<sp/>d<sp/>-<sp/>s<sp/>-<sp/>a2)<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ys<sp/>=<sp/>y<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ys<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y++;</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>-=<sp/>s<sp/>+<sp/>a2;</highlight></codeline>
<codeline lineno="2652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>+=<sp/>ds;</highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y++;</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ys<sp/>=<sp/>y<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>-=<sp/>s<sp/>+<sp/>a2;</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>+=<sp/>ds;</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"></highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>-=<sp/>dt;</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"></highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>alpha<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>!=<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cp<sp/>=<sp/>(float)<sp/>abs(d)<sp/>/<sp/>(float)<sp/>abs(s);</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cp<sp/>&gt;<sp/>1.0)<sp/>{</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cp<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cp<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2672"><highlight class="normal"></highlight></codeline>
<codeline lineno="2673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>weights<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/><sp/><sp/>weight<sp/>=<sp/>(Uint8)<sp/>(cp<sp/>*<sp/>255);</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/><sp/><sp/><sp/>iweight<sp/>=<sp/>255<sp/>-<sp/>weight;</highlight></codeline>
<codeline lineno="2676"><highlight class="normal"></highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Upper<sp/>half<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/><sp/><sp/>xx<sp/>=<sp/>xc2<sp/>-<sp/>x;</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorWeightNolock(dst,<sp/>x,<sp/>y,<sp/>color,<sp/>iweight);</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorWeightNolock(dst,<sp/>xx,<sp/>y,<sp/>color,<sp/>iweight);</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"></highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorWeightNolock(dst,<sp/>x,<sp/>ys,<sp/>color,<sp/>weight);</highlight></codeline>
<codeline lineno="2683"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorWeightNolock(dst,<sp/>xx,<sp/>ys,<sp/>color,<sp/>weight);</highlight></codeline>
<codeline lineno="2684"><highlight class="normal"></highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Lower<sp/>half<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/><sp/><sp/>yy<sp/>=<sp/>yc2<sp/>-<sp/>y;</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorWeightNolock(dst,<sp/>x,<sp/>yy,<sp/>color,<sp/>iweight);</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorWeightNolock(dst,<sp/>xx,<sp/>yy,<sp/>color,<sp/>iweight);</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"></highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/><sp/><sp/>yy<sp/>=<sp/>yc2<sp/>-<sp/>ys;</highlight></codeline>
<codeline lineno="2691"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorWeightNolock(dst,<sp/>x,<sp/>yy,<sp/>color,<sp/>weight);</highlight></codeline>
<codeline lineno="2692"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorWeightNolock(dst,<sp/>xx,<sp/>yy,<sp/>color,<sp/>weight);</highlight></codeline>
<codeline lineno="2693"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2694"><highlight class="normal"></highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/><sp/><sp/>dyt<sp/>=<sp/>abs(y<sp/>-<sp/>yc);</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"></highlight></codeline>
<codeline lineno="2697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;=<sp/>dyt;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/><sp/><sp/>y++;</highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/><sp/><sp/>d<sp/>-=<sp/>s<sp/>+<sp/>a2;</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"></highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xs<sp/>=<sp/>x<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((d<sp/>+<sp/>t<sp/>-<sp/>b2)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((2<sp/>*<sp/>d<sp/>+<sp/>t<sp/>-<sp/>b2)<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xs<sp/>=<sp/>x<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xs<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x--;</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>+=<sp/>t<sp/>-<sp/>b2;</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>-=<sp/>dt;</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x--;</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xs<sp/>=<sp/>x<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>+=<sp/>t<sp/>-<sp/>b2;</highlight></codeline>
<codeline lineno="2716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>-=<sp/>dt;</highlight></codeline>
<codeline lineno="2717"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2718"><highlight class="normal"></highlight></codeline>
<codeline lineno="2719"><highlight class="normal"><sp/><sp/><sp/><sp/>s<sp/>+=<sp/>ds;</highlight></codeline>
<codeline lineno="2720"><highlight class="normal"></highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>alpha<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t<sp/>!=<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="2723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cp<sp/>=<sp/>(float)<sp/>abs(d)<sp/>/<sp/>(float)<sp/>abs(t);</highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cp<sp/>&gt;<sp/>1.0)<sp/>{</highlight></codeline>
<codeline lineno="2725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cp<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="2726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2727"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cp<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="2729"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2730"><highlight class="normal"></highlight></codeline>
<codeline lineno="2731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>weight<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2732"><highlight class="normal"><sp/><sp/><sp/><sp/>weight<sp/>=<sp/>(Uint8)<sp/>(cp<sp/>*<sp/>255);</highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/><sp/><sp/>iweight<sp/>=<sp/>255<sp/>-<sp/>weight;</highlight></codeline>
<codeline lineno="2734"><highlight class="normal"></highlight></codeline>
<codeline lineno="2735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Left<sp/>half<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2736"><highlight class="normal"><sp/><sp/><sp/><sp/>xx<sp/>=<sp/>xc2<sp/>-<sp/>x;</highlight></codeline>
<codeline lineno="2737"><highlight class="normal"><sp/><sp/><sp/><sp/>yy<sp/>=<sp/>yc2<sp/>-<sp/>y;</highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorWeightNolock(dst,<sp/>x,<sp/>y,<sp/>color,<sp/>iweight);</highlight></codeline>
<codeline lineno="2739"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorWeightNolock(dst,<sp/>xx,<sp/>y,<sp/>color,<sp/>iweight);</highlight></codeline>
<codeline lineno="2740"><highlight class="normal"></highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorWeightNolock(dst,<sp/>x,<sp/>yy,<sp/>color,<sp/>iweight);</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorWeightNolock(dst,<sp/>xx,<sp/>yy,<sp/>color,<sp/>iweight);</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"></highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Right<sp/>half<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/><sp/><sp/>xx<sp/>=<sp/>2<sp/>*<sp/>xc<sp/>-<sp/>xs;</highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorWeightNolock(dst,<sp/>xs,<sp/>y,<sp/>color,<sp/>weight);</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorWeightNolock(dst,<sp/>xx,<sp/>y,<sp/>color,<sp/>weight);</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"></highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorWeightNolock(dst,<sp/>xs,<sp/>yy,<sp/>color,<sp/>weight);</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>pixelColorWeightNolock(dst,<sp/>xx,<sp/>yy,<sp/>color,<sp/>weight);</highlight></codeline>
<codeline lineno="2751"><highlight class="normal"></highlight></codeline>
<codeline lineno="2752"><highlight class="normal"></highlight></codeline>
<codeline lineno="2753"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"></highlight></codeline>
<codeline lineno="2755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unlock<sp/>surface<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SDL_MUSTLOCK(dst))<sp/>{</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_UnlockSurface(dst);</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2759"><highlight class="normal"></highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(result);</highlight></codeline>
<codeline lineno="2761"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2762"><highlight class="normal"></highlight></codeline>
<codeline lineno="2763"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aaellipseRGBA(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>x,<sp/>Sint16<sp/>y,<sp/>Sint16<sp/>rx,<sp/>Sint16<sp/>ry,<sp/>Uint8<sp/>r,<sp/>Uint8<sp/>g,<sp/>Uint8<sp/>b,<sp/>Uint8<sp/>a)</highlight></codeline>
<codeline lineno="2764"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2766"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Draw<sp/></highlight></codeline>
<codeline lineno="2767"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(aaellipseColor</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(dst,<sp/>x,<sp/>y,<sp/>rx,<sp/>ry,<sp/>((Uint32)<sp/>r<sp/>&lt;&lt;<sp/>24)<sp/>|<sp/>((Uint32)<sp/>g<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>((Uint32)<sp/>b<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>(Uint32)<sp/>a));</highlight></codeline>
<codeline lineno="2770"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2771"><highlight class="normal"></highlight></codeline>
<codeline lineno="2772"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----<sp/>Filled<sp/>Ellipse<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2773"><highlight class="normal"></highlight></codeline>
<codeline lineno="2774"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Note:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2775"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Based<sp/>on<sp/>algorithm<sp/>from<sp/>sge<sp/>library<sp/>with<sp/>multiple-hline<sp/>draw<sp/>removal<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2776"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>and<sp/>other<sp/>speedup<sp/>changes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2777"><highlight class="normal"></highlight></codeline>
<codeline lineno="2778"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>filledEllipseColor(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>x,<sp/>Sint16<sp/>y,<sp/>Sint16<sp/>rx,<sp/>Sint16<sp/>ry,<sp/>Uint32<sp/>color)</highlight></codeline>
<codeline lineno="2779"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>left,<sp/>right,<sp/>top,<sp/>bottom;</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>x1,<sp/>y1,<sp/>x2,<sp/>y2;</highlight></codeline>
<codeline lineno="2783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix,<sp/>iy;</highlight></codeline>
<codeline lineno="2784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h,<sp/>i,<sp/>j,<sp/>k;</highlight></codeline>
<codeline lineno="2785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>oh,<sp/>oi,<sp/>oj,<sp/>ok;</highlight></codeline>
<codeline lineno="2786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xmh,<sp/>xph;</highlight></codeline>
<codeline lineno="2787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xmi,<sp/>xpi;</highlight></codeline>
<codeline lineno="2788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xmj,<sp/>xpj;</highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xmk,<sp/>xpk;</highlight></codeline>
<codeline lineno="2790"><highlight class="normal"></highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2792"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Sanity<sp/>check<sp/>radii<sp/></highlight></codeline>
<codeline lineno="2793"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((rx<sp/>&lt;<sp/>0)<sp/>||<sp/>(ry<sp/>&lt;<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(-1);</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2797"><highlight class="normal"></highlight></codeline>
<codeline lineno="2798"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2799"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Special<sp/>case<sp/>for<sp/>rx=0<sp/>-<sp/>draw<sp/>a<sp/>vline<sp/></highlight></codeline>
<codeline lineno="2800"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rx<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(vlineColor(dst,<sp/>x,<sp/>y<sp/>-<sp/>ry,<sp/>y<sp/>+<sp/>ry,<sp/>color));</highlight></codeline>
<codeline lineno="2803"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2805"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Special<sp/>case<sp/>for<sp/>ry=0<sp/>-<sp/>draw<sp/>a<sp/>hline<sp/></highlight></codeline>
<codeline lineno="2806"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ry<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(hlineColor(dst,<sp/>x<sp/>-<sp/>rx,<sp/>x<sp/>+<sp/>rx,<sp/>y,<sp/>color));</highlight></codeline>
<codeline lineno="2809"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2810"><highlight class="normal"></highlight></codeline>
<codeline lineno="2811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2812"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Get<sp/>clipping<sp/>boundary<sp/></highlight></codeline>
<codeline lineno="2813"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2814"><highlight class="normal"><sp/><sp/><sp/><sp/>left<sp/>=<sp/>dst-&gt;clip_rect.x;</highlight></codeline>
<codeline lineno="2815"><highlight class="normal"><sp/><sp/><sp/><sp/>right<sp/>=<sp/>dst-&gt;clip_rect.x<sp/>+<sp/>dst-&gt;clip_rect.w<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2816"><highlight class="normal"><sp/><sp/><sp/><sp/>top<sp/>=<sp/>dst-&gt;clip_rect.y;</highlight></codeline>
<codeline lineno="2817"><highlight class="normal"><sp/><sp/><sp/><sp/>bottom<sp/>=<sp/>dst-&gt;clip_rect.y<sp/>+<sp/>dst-&gt;clip_rect.h<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2818"><highlight class="normal"></highlight></codeline>
<codeline lineno="2819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2820"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Test<sp/>if<sp/>bounding<sp/>box<sp/>of<sp/>ellipse<sp/>is<sp/>visible<sp/></highlight></codeline>
<codeline lineno="2821"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>x<sp/>-<sp/>rx;</highlight></codeline>
<codeline lineno="2823"><highlight class="normal"><sp/><sp/><sp/><sp/>x2<sp/>=<sp/>x<sp/>+<sp/>rx;</highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>y<sp/>-<sp/>ry;</highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><sp/><sp/><sp/><sp/>y2<sp/>=<sp/>y<sp/>+<sp/>ry;</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((x1&lt;left)<sp/>&amp;&amp;<sp/>(x2&lt;left))<sp/>{</highlight></codeline>
<codeline lineno="2827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="2828"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="2829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((x1&gt;right)<sp/>&amp;&amp;<sp/>(x2&gt;right))<sp/>{</highlight></codeline>
<codeline lineno="2830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="2832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((y1&lt;top)<sp/>&amp;&amp;<sp/>(y2&lt;top))<sp/>{</highlight></codeline>
<codeline lineno="2833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="2834"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="2835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((y1&gt;bottom)<sp/>&amp;&amp;<sp/>(y2&gt;bottom))<sp/>{</highlight></codeline>
<codeline lineno="2836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="2837"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="2838"><highlight class="normal"></highlight></codeline>
<codeline lineno="2839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2840"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Init<sp/>vars<sp/></highlight></codeline>
<codeline lineno="2841"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2842"><highlight class="normal"><sp/><sp/><sp/><sp/>oh<sp/>=<sp/>oi<sp/>=<sp/>oj<sp/>=<sp/>ok<sp/>=<sp/>0xFFFF;</highlight></codeline>
<codeline lineno="2843"><highlight class="normal"></highlight></codeline>
<codeline lineno="2844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2845"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Draw<sp/></highlight></codeline>
<codeline lineno="2846"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2847"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rx<sp/>&gt;<sp/>ry)<sp/>{</highlight></codeline>
<codeline lineno="2849"><highlight class="normal"><sp/><sp/><sp/><sp/>ix<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2850"><highlight class="normal"><sp/><sp/><sp/><sp/>iy<sp/>=<sp/>rx<sp/>*<sp/>64;</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"></highlight></codeline>
<codeline lineno="2852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>(ix<sp/>+<sp/>32)<sp/>&gt;&gt;<sp/>6;</highlight></codeline>
<codeline lineno="2854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>(iy<sp/>+<sp/>32)<sp/>&gt;&gt;<sp/>6;</highlight></codeline>
<codeline lineno="2855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>(h<sp/>*<sp/>ry)<sp/>/<sp/>rx;</highlight></codeline>
<codeline lineno="2856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>(i<sp/>*<sp/>ry)<sp/>/<sp/>rx;</highlight></codeline>
<codeline lineno="2857"><highlight class="normal"></highlight></codeline>
<codeline lineno="2858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((ok<sp/>!=<sp/>k)<sp/>&amp;&amp;<sp/>(oj<sp/>!=<sp/>k))<sp/>{</highlight></codeline>
<codeline lineno="2859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xph<sp/>=<sp/>x<sp/>+<sp/>h;</highlight></codeline>
<codeline lineno="2860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xmh<sp/>=<sp/>x<sp/>-<sp/>h;</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(k<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>hlineColor(dst,<sp/>xmh,<sp/>xph,<sp/>y<sp/>+<sp/>k,<sp/>color);</highlight></codeline>
<codeline lineno="2863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>hlineColor(dst,<sp/>xmh,<sp/>xph,<sp/>y<sp/>-<sp/>k,<sp/>color);</highlight></codeline>
<codeline lineno="2864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>hlineColor(dst,<sp/>xmh,<sp/>xph,<sp/>y,<sp/>color);</highlight></codeline>
<codeline lineno="2866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="2868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((oj<sp/>!=<sp/>j)<sp/>&amp;&amp;<sp/>(ok<sp/>!=<sp/>j)<sp/>&amp;&amp;<sp/>(k<sp/>!=<sp/>j))<sp/>{</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xmi<sp/>=<sp/>x<sp/>-<sp/>i;</highlight></codeline>
<codeline lineno="2871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xpi<sp/>=<sp/>x<sp/>+<sp/>i;</highlight></codeline>
<codeline lineno="2872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>hlineColor(dst,<sp/>xmi,<sp/>xpi,<sp/>y<sp/>+<sp/>j,<sp/>color);</highlight></codeline>
<codeline lineno="2874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>hlineColor(dst,<sp/>xmi,<sp/>xpi,<sp/>y<sp/>-<sp/>j,<sp/>color);</highlight></codeline>
<codeline lineno="2875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>hlineColor(dst,<sp/>xmi,<sp/>xpi,<sp/>y,<sp/>color);</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oj<sp/>=<sp/>j;</highlight></codeline>
<codeline lineno="2879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2880"><highlight class="normal"></highlight></codeline>
<codeline lineno="2881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ix<sp/>=<sp/>ix<sp/>+<sp/>iy<sp/>/<sp/>rx;</highlight></codeline>
<codeline lineno="2882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iy<sp/>=<sp/>iy<sp/>-<sp/>ix<sp/>/<sp/>rx;</highlight></codeline>
<codeline lineno="2883"><highlight class="normal"></highlight></codeline>
<codeline lineno="2884"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>h);</highlight></codeline>
<codeline lineno="2885"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2886"><highlight class="normal"><sp/><sp/><sp/><sp/>ix<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2887"><highlight class="normal"><sp/><sp/><sp/><sp/>iy<sp/>=<sp/>ry<sp/>*<sp/>64;</highlight></codeline>
<codeline lineno="2888"><highlight class="normal"></highlight></codeline>
<codeline lineno="2889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>(ix<sp/>+<sp/>32)<sp/>&gt;&gt;<sp/>6;</highlight></codeline>
<codeline lineno="2891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>=<sp/>(iy<sp/>+<sp/>32)<sp/>&gt;&gt;<sp/>6;</highlight></codeline>
<codeline lineno="2892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>=<sp/>(h<sp/>*<sp/>rx)<sp/>/<sp/>ry;</highlight></codeline>
<codeline lineno="2893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>k<sp/>=<sp/>(i<sp/>*<sp/>rx)<sp/>/<sp/>ry;</highlight></codeline>
<codeline lineno="2894"><highlight class="normal"></highlight></codeline>
<codeline lineno="2895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((oi<sp/>!=<sp/>i)<sp/>&amp;&amp;<sp/>(oh<sp/>!=<sp/>i))<sp/>{</highlight></codeline>
<codeline lineno="2896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xmj<sp/>=<sp/>x<sp/>-<sp/>j;</highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xpj<sp/>=<sp/>x<sp/>+<sp/>j;</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>hlineColor(dst,<sp/>xmj,<sp/>xpj,<sp/>y<sp/>+<sp/>i,<sp/>color);</highlight></codeline>
<codeline lineno="2900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>hlineColor(dst,<sp/>xmj,<sp/>xpj,<sp/>y<sp/>-<sp/>i,<sp/>color);</highlight></codeline>
<codeline lineno="2901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>hlineColor(dst,<sp/>xmj,<sp/>xpj,<sp/>y,<sp/>color);</highlight></codeline>
<codeline lineno="2903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oi<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="2905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((oh<sp/>!=<sp/>h)<sp/>&amp;&amp;<sp/>(oi<sp/>!=<sp/>h)<sp/>&amp;&amp;<sp/>(i<sp/>!=<sp/>h))<sp/>{</highlight></codeline>
<codeline lineno="2907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xmk<sp/>=<sp/>x<sp/>-<sp/>k;</highlight></codeline>
<codeline lineno="2908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xpk<sp/>=<sp/>x<sp/>+<sp/>k;</highlight></codeline>
<codeline lineno="2909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>hlineColor(dst,<sp/>xmk,<sp/>xpk,<sp/>y<sp/>+<sp/>h,<sp/>color);</highlight></codeline>
<codeline lineno="2911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>hlineColor(dst,<sp/>xmk,<sp/>xpk,<sp/>y<sp/>-<sp/>h,<sp/>color);</highlight></codeline>
<codeline lineno="2912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>hlineColor(dst,<sp/>xmk,<sp/>xpk,<sp/>y,<sp/>color);</highlight></codeline>
<codeline lineno="2914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oh<sp/>=<sp/>h;</highlight></codeline>
<codeline lineno="2916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"></highlight></codeline>
<codeline lineno="2918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ix<sp/>=<sp/>ix<sp/>+<sp/>iy<sp/>/<sp/>ry;</highlight></codeline>
<codeline lineno="2919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iy<sp/>=<sp/>iy<sp/>-<sp/>ix<sp/>/<sp/>ry;</highlight></codeline>
<codeline lineno="2920"><highlight class="normal"></highlight></codeline>
<codeline lineno="2921"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>h);</highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2923"><highlight class="normal"></highlight></codeline>
<codeline lineno="2924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(result);</highlight></codeline>
<codeline lineno="2925"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2926"><highlight class="normal"></highlight></codeline>
<codeline lineno="2927"><highlight class="normal"></highlight></codeline>
<codeline lineno="2928"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>filledEllipseRGBA(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>x,<sp/>Sint16<sp/>y,<sp/>Sint16<sp/>rx,<sp/>Sint16<sp/>ry,<sp/>Uint8<sp/>r,<sp/>Uint8<sp/>g,<sp/>Uint8<sp/>b,<sp/>Uint8<sp/>a)</highlight></codeline>
<codeline lineno="2929"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2931"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Draw<sp/></highlight></codeline>
<codeline lineno="2932"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(filledEllipseColor</highlight></codeline>
<codeline lineno="2934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(dst,<sp/>x,<sp/>y,<sp/>rx,<sp/>ry,<sp/>((Uint32)<sp/>r<sp/>&lt;&lt;<sp/>24)<sp/>|<sp/>((Uint32)<sp/>g<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>((Uint32)<sp/>b<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>(Uint32)<sp/>a));</highlight></codeline>
<codeline lineno="2935"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2936"><highlight class="normal"></highlight></codeline>
<codeline lineno="2937"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-----<sp/>filled<sp/>pie<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2938"><highlight class="normal"></highlight></codeline>
<codeline lineno="2939"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Low-speed<sp/>float<sp/>pie-calc<sp/>implementation<sp/>by<sp/>drawing<sp/>polygons.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2940"><highlight class="normal"></highlight></codeline>
<codeline lineno="2941"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>filledpieColor(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>x,<sp/>Sint16<sp/>y,<sp/>Sint16<sp/>rad,<sp/>Sint16<sp/>start,<sp/>Sint16<sp/>end,<sp/>Uint32<sp/>color)</highlight></codeline>
<codeline lineno="2942"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2943"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>left,<sp/>right,<sp/>top,<sp/>bottom;</highlight></codeline>
<codeline lineno="2944"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>x1,<sp/>y1,<sp/>x2,<sp/>y2;</highlight></codeline>
<codeline lineno="2945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="2946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>angle,<sp/>start_angle,<sp/>end_angle;</highlight></codeline>
<codeline lineno="2947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>deltaAngle;</highlight></codeline>
<codeline lineno="2948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dr;</highlight></codeline>
<codeline lineno="2949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>posX,<sp/>posY;</highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numpoints,<sp/>i;</highlight></codeline>
<codeline lineno="2951"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>*vx,<sp/>*vy;</highlight></codeline>
<codeline lineno="2952"><highlight class="normal"></highlight></codeline>
<codeline lineno="2953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2954"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Sanity<sp/>check<sp/>radii<sp/></highlight></codeline>
<codeline lineno="2955"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rad<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(-1);</highlight></codeline>
<codeline lineno="2958"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2959"><highlight class="normal"></highlight></codeline>
<codeline lineno="2960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2961"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Fixup<sp/>angles</highlight></codeline>
<codeline lineno="2962"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2963"><highlight class="normal"><sp/><sp/><sp/><sp/>start<sp/>=<sp/>start<sp/>%<sp/>360;</highlight></codeline>
<codeline lineno="2964"><highlight class="normal"><sp/><sp/><sp/><sp/>end<sp/>=<sp/>end<sp/>%<sp/>360;</highlight></codeline>
<codeline lineno="2965"><highlight class="normal"></highlight></codeline>
<codeline lineno="2966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2967"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Special<sp/>case<sp/>for<sp/>rad=0<sp/>-<sp/>draw<sp/>a<sp/>point<sp/></highlight></codeline>
<codeline lineno="2968"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rad<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(pixelColor(dst,<sp/>x,<sp/>y,<sp/>color));</highlight></codeline>
<codeline lineno="2971"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2972"><highlight class="normal"></highlight></codeline>
<codeline lineno="2973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2974"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Get<sp/>clipping<sp/>boundary<sp/></highlight></codeline>
<codeline lineno="2975"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><sp/><sp/><sp/><sp/>left<sp/>=<sp/>dst-&gt;clip_rect.x;</highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/><sp/><sp/>right<sp/>=<sp/>dst-&gt;clip_rect.x<sp/>+<sp/>dst-&gt;clip_rect.w<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/><sp/><sp/>top<sp/>=<sp/>dst-&gt;clip_rect.y;</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/><sp/><sp/>bottom<sp/>=<sp/>dst-&gt;clip_rect.y<sp/>+<sp/>dst-&gt;clip_rect.h<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="2980"><highlight class="normal"></highlight></codeline>
<codeline lineno="2981"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2982"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Test<sp/>if<sp/>bounding<sp/>box<sp/>of<sp/>pie&apos;s<sp/>circle<sp/>is<sp/>visible<sp/></highlight></codeline>
<codeline lineno="2983"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2984"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>x<sp/>-<sp/>rad;</highlight></codeline>
<codeline lineno="2985"><highlight class="normal"><sp/><sp/><sp/><sp/>x2<sp/>=<sp/>x<sp/>+<sp/>rad;</highlight></codeline>
<codeline lineno="2986"><highlight class="normal"><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>y<sp/>-<sp/>rad;</highlight></codeline>
<codeline lineno="2987"><highlight class="normal"><sp/><sp/><sp/><sp/>y2<sp/>=<sp/>y<sp/>+<sp/>rad;</highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((x1&lt;left)<sp/>&amp;&amp;<sp/>(x2&lt;left))<sp/>{</highlight></codeline>
<codeline lineno="2989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="2990"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="2991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((x1&gt;right)<sp/>&amp;&amp;<sp/>(x2&gt;right))<sp/>{</highlight></codeline>
<codeline lineno="2992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="2993"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="2994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((y1&lt;top)<sp/>&amp;&amp;<sp/>(y2&lt;top))<sp/>{</highlight></codeline>
<codeline lineno="2995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="2996"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="2997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((y1&gt;bottom)<sp/>&amp;&amp;<sp/>(y2&gt;bottom))<sp/>{</highlight></codeline>
<codeline lineno="2998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="2999"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="3000"><highlight class="normal"></highlight></codeline>
<codeline lineno="3001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3002"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Variable<sp/>setup<sp/></highlight></codeline>
<codeline lineno="3003"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3004"><highlight class="normal"><sp/><sp/><sp/><sp/>dr<sp/>=<sp/>(double)<sp/>rad;</highlight></codeline>
<codeline lineno="3005"><highlight class="normal"><sp/><sp/><sp/><sp/>deltaAngle<sp/>=<sp/>3.0<sp/>/<sp/>dr;</highlight></codeline>
<codeline lineno="3006"><highlight class="normal"><sp/><sp/><sp/><sp/>start_angle<sp/>=<sp/>(double)<sp/>start<sp/>*(2.0<sp/>*<sp/>M_PI<sp/>/<sp/>360.0);</highlight></codeline>
<codeline lineno="3007"><highlight class="normal"><sp/><sp/><sp/><sp/>end_angle<sp/>=<sp/>(double)<sp/>end<sp/>*(2.0<sp/>*<sp/>M_PI<sp/>/<sp/>360.0);</highlight></codeline>
<codeline lineno="3008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start<sp/>&gt;<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="3009"><highlight class="normal"><sp/><sp/><sp/><sp/>end_angle<sp/>+=<sp/>(2.0<sp/>*<sp/>M_PI);</highlight></codeline>
<codeline lineno="3010"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3011"><highlight class="normal"></highlight></codeline>
<codeline lineno="3012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Count<sp/>points<sp/>(rather<sp/>than<sp/>calculate<sp/>it)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3013"><highlight class="normal"><sp/><sp/><sp/><sp/>numpoints<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3014"><highlight class="normal"><sp/><sp/><sp/><sp/>angle<sp/>=<sp/>start_angle;</highlight></codeline>
<codeline lineno="3015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(angle<sp/>&lt;=<sp/>end_angle)<sp/>{</highlight></codeline>
<codeline lineno="3016"><highlight class="normal"><sp/><sp/><sp/><sp/>angle<sp/>+=<sp/>deltaAngle;</highlight></codeline>
<codeline lineno="3017"><highlight class="normal"><sp/><sp/><sp/><sp/>numpoints++;</highlight></codeline>
<codeline lineno="3018"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3019"><highlight class="normal"></highlight></codeline>
<codeline lineno="3020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>size<sp/>of<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numpoints<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="3022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(pixelColor(dst,<sp/>x,<sp/>y,<sp/>color));</highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(numpoints<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/><sp/><sp/><sp/>posX<sp/>=<sp/>x<sp/>+<sp/>(int)<sp/>(dr<sp/>*<sp/>cos(start_angle));</highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/><sp/><sp/><sp/>posY<sp/>=<sp/>y<sp/>+<sp/>(int)<sp/>(dr<sp/>*<sp/>sin(start_angle));</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(lineColor(dst,<sp/>x,<sp/>y,<sp/>posX,<sp/>posY,<sp/>color));</highlight></codeline>
<codeline lineno="3027"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"></highlight></codeline>
<codeline lineno="3029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocate<sp/>vertex<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3030"><highlight class="normal"><sp/><sp/><sp/><sp/>vx<sp/>=<sp/>vy<sp/>=<sp/>(Uint16<sp/>*)<sp/>malloc(2<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Uint16)<sp/>*<sp/>numpoints);</highlight></codeline>
<codeline lineno="3031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vx<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="3032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(-1);</highlight></codeline>
<codeline lineno="3033"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3034"><highlight class="normal"><sp/><sp/><sp/><sp/>vy<sp/>+=<sp/>numpoints;</highlight></codeline>
<codeline lineno="3035"><highlight class="normal"></highlight></codeline>
<codeline lineno="3036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Center<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3037"><highlight class="normal"><sp/><sp/><sp/><sp/>vx[0]<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="3038"><highlight class="normal"><sp/><sp/><sp/><sp/>vy[0]<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="3039"><highlight class="normal"></highlight></codeline>
<codeline lineno="3040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>and<sp/>store<sp/>vertices<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3041"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3042"><highlight class="normal"><sp/><sp/><sp/><sp/>angle<sp/>=<sp/>start_angle;</highlight></codeline>
<codeline lineno="3043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(angle<sp/>&lt;=<sp/>end_angle)<sp/>{</highlight></codeline>
<codeline lineno="3044"><highlight class="normal"><sp/><sp/><sp/><sp/>vx[i]<sp/>=<sp/>x<sp/>+<sp/>(int)<sp/>(dr<sp/>*<sp/>cos(angle));</highlight></codeline>
<codeline lineno="3045"><highlight class="normal"><sp/><sp/><sp/><sp/>vy[i]<sp/>=<sp/>y<sp/>+<sp/>(int)<sp/>(dr<sp/>*<sp/>sin(angle));</highlight></codeline>
<codeline lineno="3046"><highlight class="normal"><sp/><sp/><sp/><sp/>angle<sp/>+=<sp/>deltaAngle;</highlight></codeline>
<codeline lineno="3047"><highlight class="normal"><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3049"><highlight class="normal"></highlight></codeline>
<codeline lineno="3050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Draw<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3051"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>filledPolygonColor(dst,<sp/>vx,<sp/>vy,<sp/>numpoints,<sp/>color);</highlight></codeline>
<codeline lineno="3052"><highlight class="normal"></highlight></codeline>
<codeline lineno="3053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Free<sp/>vertex<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3054"><highlight class="normal"><sp/><sp/><sp/><sp/>free(vx);</highlight></codeline>
<codeline lineno="3055"><highlight class="normal"></highlight></codeline>
<codeline lineno="3056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(result);</highlight></codeline>
<codeline lineno="3057"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3058"><highlight class="normal"></highlight></codeline>
<codeline lineno="3059"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>filledpieRGBA(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>x,<sp/>Sint16<sp/>y,<sp/>Sint16<sp/>rad,</highlight></codeline>
<codeline lineno="3060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sint16<sp/>start,<sp/>Sint16<sp/>end,<sp/>Uint8<sp/>r,<sp/>Uint8<sp/>g,<sp/>Uint8<sp/>b,<sp/>Uint8<sp/>a)</highlight></codeline>
<codeline lineno="3061"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(filledpieColor(dst,<sp/>x,<sp/>y,<sp/>rad,<sp/>start,<sp/>end,</highlight></codeline>
<codeline lineno="3063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((Uint32)<sp/>r<sp/>&lt;&lt;<sp/>24)<sp/>|<sp/>((Uint32)<sp/>g<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>((Uint32)<sp/>b<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>(Uint32)<sp/>a));</highlight></codeline>
<codeline lineno="3064"><highlight class="normal"></highlight></codeline>
<codeline lineno="3065"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3066"><highlight class="normal"></highlight></codeline>
<codeline lineno="3067"><highlight class="normal"></highlight></codeline>
<codeline lineno="3068"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Trigon<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3069"><highlight class="normal"></highlight></codeline>
<codeline lineno="3070"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>trigonColor(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>x1,<sp/>Sint16<sp/>y1,<sp/>Sint16<sp/>x2,<sp/>Sint16<sp/>y2,<sp/>Sint16<sp/>x3,<sp/>Sint16<sp/>y3,<sp/>Uint32<sp/>color)</highlight></codeline>
<codeline lineno="3071"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3072"><highlight class="normal"><sp/>Sint16<sp/>vx[3];<sp/></highlight></codeline>
<codeline lineno="3073"><highlight class="normal"><sp/>Sint16<sp/>vy[3];</highlight></codeline>
<codeline lineno="3074"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="3075"><highlight class="normal"><sp/>vx[0]=x1;</highlight></codeline>
<codeline lineno="3076"><highlight class="normal"><sp/>vx[1]=x2;</highlight></codeline>
<codeline lineno="3077"><highlight class="normal"><sp/>vx[2]=x3;</highlight></codeline>
<codeline lineno="3078"><highlight class="normal"><sp/>vy[0]=y1;</highlight></codeline>
<codeline lineno="3079"><highlight class="normal"><sp/>vy[1]=y2;</highlight></codeline>
<codeline lineno="3080"><highlight class="normal"><sp/>vy[2]=y3;</highlight></codeline>
<codeline lineno="3081"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="3082"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(polygonColor(dst,vx,vy,3,color));</highlight></codeline>
<codeline lineno="3083"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3084"><highlight class="normal"></highlight></codeline>
<codeline lineno="3085"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>trigonRGBA(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>x1,<sp/>Sint16<sp/>y1,<sp/>Sint16<sp/>x2,<sp/>Sint16<sp/>y2,<sp/>Sint16<sp/>x3,<sp/>Sint16<sp/>y3,</highlight></codeline>
<codeline lineno="3086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uint8<sp/>r,<sp/>Uint8<sp/>g,<sp/>Uint8<sp/>b,<sp/>Uint8<sp/>a)</highlight></codeline>
<codeline lineno="3087"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3088"><highlight class="normal"><sp/>Sint16<sp/>vx[3];<sp/></highlight></codeline>
<codeline lineno="3089"><highlight class="normal"><sp/>Sint16<sp/>vy[3];</highlight></codeline>
<codeline lineno="3090"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="3091"><highlight class="normal"><sp/>vx[0]=x1;</highlight></codeline>
<codeline lineno="3092"><highlight class="normal"><sp/>vx[1]=x2;</highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/>vx[2]=x3;</highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/>vy[0]=y1;</highlight></codeline>
<codeline lineno="3095"><highlight class="normal"><sp/>vy[1]=y2;</highlight></codeline>
<codeline lineno="3096"><highlight class="normal"><sp/>vy[2]=y3;</highlight></codeline>
<codeline lineno="3097"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="3098"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(polygonRGBA(dst,vx,vy,3,r,g,b,a));</highlight></codeline>
<codeline lineno="3099"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3100"><highlight class="normal"></highlight></codeline>
<codeline lineno="3101"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>AA-Trigon<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3102"><highlight class="normal"></highlight></codeline>
<codeline lineno="3103"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aatrigonColor(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>x1,<sp/>Sint16<sp/>y1,<sp/>Sint16<sp/>x2,<sp/>Sint16<sp/>y2,<sp/>Sint16<sp/>x3,<sp/>Sint16<sp/>y3,<sp/>Uint32<sp/>color)</highlight></codeline>
<codeline lineno="3104"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3105"><highlight class="normal"><sp/>Sint16<sp/>vx[3];<sp/></highlight></codeline>
<codeline lineno="3106"><highlight class="normal"><sp/>Sint16<sp/>vy[3];</highlight></codeline>
<codeline lineno="3107"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="3108"><highlight class="normal"><sp/>vx[0]=x1;</highlight></codeline>
<codeline lineno="3109"><highlight class="normal"><sp/>vx[1]=x2;</highlight></codeline>
<codeline lineno="3110"><highlight class="normal"><sp/>vx[2]=x3;</highlight></codeline>
<codeline lineno="3111"><highlight class="normal"><sp/>vy[0]=y1;</highlight></codeline>
<codeline lineno="3112"><highlight class="normal"><sp/>vy[1]=y2;</highlight></codeline>
<codeline lineno="3113"><highlight class="normal"><sp/>vy[2]=y3;</highlight></codeline>
<codeline lineno="3114"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="3115"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(aapolygonColor(dst,vx,vy,3,color));</highlight></codeline>
<codeline lineno="3116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3117"><highlight class="normal"></highlight></codeline>
<codeline lineno="3118"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aatrigonRGBA(SDL_Surface<sp/>*<sp/>dst,<sp/><sp/>Sint16<sp/>x1,<sp/>Sint16<sp/>y1,<sp/>Sint16<sp/>x2,<sp/>Sint16<sp/>y2,<sp/>Sint16<sp/>x3,<sp/>Sint16<sp/>y3,</highlight></codeline>
<codeline lineno="3119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uint8<sp/>r,<sp/>Uint8<sp/>g,<sp/>Uint8<sp/>b,<sp/>Uint8<sp/>a)</highlight></codeline>
<codeline lineno="3120"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3121"><highlight class="normal"><sp/>Sint16<sp/>vx[3];<sp/></highlight></codeline>
<codeline lineno="3122"><highlight class="normal"><sp/>Sint16<sp/>vy[3];</highlight></codeline>
<codeline lineno="3123"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="3124"><highlight class="normal"><sp/>vx[0]=x1;</highlight></codeline>
<codeline lineno="3125"><highlight class="normal"><sp/>vx[1]=x2;</highlight></codeline>
<codeline lineno="3126"><highlight class="normal"><sp/>vx[2]=x3;</highlight></codeline>
<codeline lineno="3127"><highlight class="normal"><sp/>vy[0]=y1;</highlight></codeline>
<codeline lineno="3128"><highlight class="normal"><sp/>vy[1]=y2;</highlight></codeline>
<codeline lineno="3129"><highlight class="normal"><sp/>vy[2]=y3;</highlight></codeline>
<codeline lineno="3130"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="3131"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(aapolygonRGBA(dst,vx,vy,3,r,g,b,a));</highlight></codeline>
<codeline lineno="3132"><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3133"><highlight class="normal"></highlight></codeline>
<codeline lineno="3134"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Filled<sp/>Trigon<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3135"><highlight class="normal"></highlight></codeline>
<codeline lineno="3136"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>filledTrigonColor(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>x1,<sp/>Sint16<sp/>y1,<sp/>Sint16<sp/>x2,<sp/>Sint16<sp/>y2,<sp/>Sint16<sp/>x3,<sp/>Sint16<sp/>y3,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>color)</highlight></codeline>
<codeline lineno="3137"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3138"><highlight class="normal"><sp/>Sint16<sp/>vx[3];<sp/></highlight></codeline>
<codeline lineno="3139"><highlight class="normal"><sp/>Sint16<sp/>vy[3];</highlight></codeline>
<codeline lineno="3140"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="3141"><highlight class="normal"><sp/>vx[0]=x1;</highlight></codeline>
<codeline lineno="3142"><highlight class="normal"><sp/>vx[1]=x2;</highlight></codeline>
<codeline lineno="3143"><highlight class="normal"><sp/>vx[2]=x3;</highlight></codeline>
<codeline lineno="3144"><highlight class="normal"><sp/>vy[0]=y1;</highlight></codeline>
<codeline lineno="3145"><highlight class="normal"><sp/>vy[1]=y2;</highlight></codeline>
<codeline lineno="3146"><highlight class="normal"><sp/>vy[2]=y3;</highlight></codeline>
<codeline lineno="3147"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="3148"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(filledPolygonColor(dst,vx,vy,3,color));</highlight></codeline>
<codeline lineno="3149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3150"><highlight class="normal"></highlight></codeline>
<codeline lineno="3151"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>filledTrigonRGBA(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>x1,<sp/>Sint16<sp/>y1,<sp/>Sint16<sp/>x2,<sp/>Sint16<sp/>y2,<sp/>Sint16<sp/>x3,<sp/>Sint16<sp/>y3,</highlight></codeline>
<codeline lineno="3152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Uint8<sp/>r,<sp/>Uint8<sp/>g,<sp/>Uint8<sp/>b,<sp/>Uint8<sp/>a)</highlight></codeline>
<codeline lineno="3153"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3154"><highlight class="normal"><sp/>Sint16<sp/>vx[3];<sp/></highlight></codeline>
<codeline lineno="3155"><highlight class="normal"><sp/>Sint16<sp/>vy[3];</highlight></codeline>
<codeline lineno="3156"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="3157"><highlight class="normal"><sp/>vx[0]=x1;</highlight></codeline>
<codeline lineno="3158"><highlight class="normal"><sp/>vx[1]=x2;</highlight></codeline>
<codeline lineno="3159"><highlight class="normal"><sp/>vx[2]=x3;</highlight></codeline>
<codeline lineno="3160"><highlight class="normal"><sp/>vy[0]=y1;</highlight></codeline>
<codeline lineno="3161"><highlight class="normal"><sp/>vy[1]=y2;</highlight></codeline>
<codeline lineno="3162"><highlight class="normal"><sp/>vy[2]=y3;</highlight></codeline>
<codeline lineno="3163"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="3164"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(filledPolygonRGBA(dst,vx,vy,3,r,g,b,a));</highlight></codeline>
<codeline lineno="3165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3166"><highlight class="normal"></highlight></codeline>
<codeline lineno="3167"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----<sp/>Polygon<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3168"><highlight class="normal"></highlight></codeline>
<codeline lineno="3169"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>polygonColor(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>*<sp/>vx,<sp/>Sint16<sp/>*<sp/>vy,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/>Uint32<sp/>color)</highlight></codeline>
<codeline lineno="3170"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="3172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3173"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>*x1,<sp/>*y1,<sp/>*x2,<sp/>*y2;</highlight></codeline>
<codeline lineno="3174"><highlight class="normal"></highlight></codeline>
<codeline lineno="3175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3176"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Sanity<sp/>check<sp/></highlight></codeline>
<codeline lineno="3177"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="3179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(-1);</highlight></codeline>
<codeline lineno="3180"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3181"><highlight class="normal"></highlight></codeline>
<codeline lineno="3182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3183"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Pointer<sp/>setup<sp/></highlight></codeline>
<codeline lineno="3184"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3185"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>x2<sp/>=<sp/>vx;</highlight></codeline>
<codeline lineno="3186"><highlight class="normal"><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>y2<sp/>=<sp/>vy;</highlight></codeline>
<codeline lineno="3187"><highlight class="normal"><sp/><sp/><sp/><sp/>x2++;</highlight></codeline>
<codeline lineno="3188"><highlight class="normal"><sp/><sp/><sp/><sp/>y2++;</highlight></codeline>
<codeline lineno="3189"><highlight class="normal"></highlight></codeline>
<codeline lineno="3190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3191"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Draw<sp/></highlight></codeline>
<codeline lineno="3192"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3193"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3195"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>lineColor(dst,<sp/>*x1,<sp/>*y1,<sp/>*x2,<sp/>*y2,<sp/>color);</highlight></codeline>
<codeline lineno="3196"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>x2;</highlight></codeline>
<codeline lineno="3197"><highlight class="normal"><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>y2;</highlight></codeline>
<codeline lineno="3198"><highlight class="normal"><sp/><sp/><sp/><sp/>x2++;</highlight></codeline>
<codeline lineno="3199"><highlight class="normal"><sp/><sp/><sp/><sp/>y2++;</highlight></codeline>
<codeline lineno="3200"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3201"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>lineColor(dst,<sp/>*x1,<sp/>*y1,<sp/>*vx,<sp/>*vy,<sp/>color);</highlight></codeline>
<codeline lineno="3202"><highlight class="normal"></highlight></codeline>
<codeline lineno="3203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(result);</highlight></codeline>
<codeline lineno="3204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3205"><highlight class="normal"></highlight></codeline>
<codeline lineno="3206"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>polygonRGBA(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>*<sp/>vx,<sp/>Sint16<sp/>*<sp/>vy,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/>Uint8<sp/>r,<sp/>Uint8<sp/>g,<sp/>Uint8<sp/>b,<sp/>Uint8<sp/>a)</highlight></codeline>
<codeline lineno="3207"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3209"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Draw<sp/></highlight></codeline>
<codeline lineno="3210"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(polygonColor(dst,<sp/>vx,<sp/>vy,<sp/>n,<sp/>((Uint32)<sp/>r<sp/>&lt;&lt;<sp/>24)<sp/>|<sp/>((Uint32)<sp/>g<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>((Uint32)<sp/>b<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>(Uint32)<sp/>a));</highlight></codeline>
<codeline lineno="3212"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3213"><highlight class="normal"></highlight></codeline>
<codeline lineno="3214"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----<sp/>AA-Polygon<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3215"><highlight class="normal"></highlight></codeline>
<codeline lineno="3216"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aapolygonColor(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>*<sp/>vx,<sp/>Sint16<sp/>*<sp/>vy,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/>Uint32<sp/>color)</highlight></codeline>
<codeline lineno="3217"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="3219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3220"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>*x1,<sp/>*y1,<sp/>*x2,<sp/>*y2;</highlight></codeline>
<codeline lineno="3221"><highlight class="normal"></highlight></codeline>
<codeline lineno="3222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3223"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Sanity<sp/>check<sp/></highlight></codeline>
<codeline lineno="3224"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="3226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(-1);</highlight></codeline>
<codeline lineno="3227"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3228"><highlight class="normal"></highlight></codeline>
<codeline lineno="3229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3230"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Pointer<sp/>setup<sp/></highlight></codeline>
<codeline lineno="3231"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>x2<sp/>=<sp/>vx;</highlight></codeline>
<codeline lineno="3233"><highlight class="normal"><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>y2<sp/>=<sp/>vy;</highlight></codeline>
<codeline lineno="3234"><highlight class="normal"><sp/><sp/><sp/><sp/>x2++;</highlight></codeline>
<codeline lineno="3235"><highlight class="normal"><sp/><sp/><sp/><sp/>y2++;</highlight></codeline>
<codeline lineno="3236"><highlight class="normal"></highlight></codeline>
<codeline lineno="3237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3238"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Draw<sp/></highlight></codeline>
<codeline lineno="3239"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3240"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3242"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>aalineColorInt(dst,<sp/>*x1,<sp/>*y1,<sp/>*x2,<sp/>*y2,<sp/>color,<sp/>0);</highlight></codeline>
<codeline lineno="3243"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>x2;</highlight></codeline>
<codeline lineno="3244"><highlight class="normal"><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>y2;</highlight></codeline>
<codeline lineno="3245"><highlight class="normal"><sp/><sp/><sp/><sp/>x2++;</highlight></codeline>
<codeline lineno="3246"><highlight class="normal"><sp/><sp/><sp/><sp/>y2++;</highlight></codeline>
<codeline lineno="3247"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3248"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>aalineColorInt(dst,<sp/>*x1,<sp/>*y1,<sp/>*vx,<sp/>*vy,<sp/>color,<sp/>0);</highlight></codeline>
<codeline lineno="3249"><highlight class="normal"></highlight></codeline>
<codeline lineno="3250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(result);</highlight></codeline>
<codeline lineno="3251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3252"><highlight class="normal"></highlight></codeline>
<codeline lineno="3253"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aapolygonRGBA(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>*<sp/>vx,<sp/>Sint16<sp/>*<sp/>vy,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/>Uint8<sp/>r,<sp/>Uint8<sp/>g,<sp/>Uint8<sp/>b,<sp/>Uint8<sp/>a)</highlight></codeline>
<codeline lineno="3254"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3256"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Draw<sp/></highlight></codeline>
<codeline lineno="3257"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(aapolygonColor(dst,<sp/>vx,<sp/>vy,<sp/>n,<sp/>((Uint32)<sp/>r<sp/>&lt;&lt;<sp/>24)<sp/>|<sp/>((Uint32)<sp/>g<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>((Uint32)<sp/>b<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>(Uint32)<sp/>a));</highlight></codeline>
<codeline lineno="3259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3260"><highlight class="normal"></highlight></codeline>
<codeline lineno="3261"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----<sp/>Filled<sp/>Polygon<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3262"><highlight class="normal"></highlight></codeline>
<codeline lineno="3263"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gfxPrimitivesCompareInt(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b);</highlight></codeline>
<codeline lineno="3264"><highlight class="normal"></highlight></codeline>
<codeline lineno="3265"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*gfxPrimitivesPolyInts<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3266"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gfxPrimitivesPolyAllocated<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3267"><highlight class="normal"></highlight></codeline>
<codeline lineno="3268"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>filledPolygonColor(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>*<sp/>vx,<sp/>Sint16<sp/>*<sp/>vy,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>color)</highlight></codeline>
<codeline lineno="3269"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="3271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y;</highlight></codeline>
<codeline lineno="3273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>miny,<sp/>maxy;</highlight></codeline>
<codeline lineno="3274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x1,<sp/>y1;</highlight></codeline>
<codeline lineno="3275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x2,<sp/>y2;</highlight></codeline>
<codeline lineno="3276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ind1,<sp/>ind2;</highlight></codeline>
<codeline lineno="3277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ints;</highlight></codeline>
<codeline lineno="3278"><highlight class="normal"></highlight></codeline>
<codeline lineno="3279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3280"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Sanity<sp/>check<sp/></highlight></codeline>
<codeline lineno="3281"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="3284"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3285"><highlight class="normal"></highlight></codeline>
<codeline lineno="3286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3287"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Allocate<sp/>temp<sp/>array,<sp/>only<sp/>grow<sp/>array<sp/></highlight></codeline>
<codeline lineno="3288"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!gfxPrimitivesPolyAllocated)<sp/>{</highlight></codeline>
<codeline lineno="3290"><highlight class="normal"><sp/><sp/><sp/><sp/>gfxPrimitivesPolyInts<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>*<sp/>n);</highlight></codeline>
<codeline lineno="3291"><highlight class="normal"><sp/><sp/><sp/><sp/>gfxPrimitivesPolyAllocated<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="3292"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gfxPrimitivesPolyAllocated<sp/>&lt;<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="3294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gfxPrimitivesPolyInts<sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>realloc(gfxPrimitivesPolyInts,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>*<sp/>n);</highlight></codeline>
<codeline lineno="3295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gfxPrimitivesPolyAllocated<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="3296"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3298"><highlight class="normal"></highlight></codeline>
<codeline lineno="3299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3300"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Determine<sp/>Y<sp/>maxima<sp/></highlight></codeline>
<codeline lineno="3301"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3302"><highlight class="normal"><sp/><sp/><sp/><sp/>miny<sp/>=<sp/>vy[0];</highlight></codeline>
<codeline lineno="3303"><highlight class="normal"><sp/><sp/><sp/><sp/>maxy<sp/>=<sp/>vy[0];</highlight></codeline>
<codeline lineno="3304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>(i<sp/>&lt;<sp/>n);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vy[i]<sp/>&lt;<sp/>miny)<sp/>{</highlight></codeline>
<codeline lineno="3306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>miny<sp/>=<sp/>vy[i];</highlight></codeline>
<codeline lineno="3307"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vy[i]<sp/>&gt;<sp/>maxy)<sp/>{</highlight></codeline>
<codeline lineno="3308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxy<sp/>=<sp/>vy[i];</highlight></codeline>
<codeline lineno="3309"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3310"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3311"><highlight class="normal"></highlight></codeline>
<codeline lineno="3312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3313"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Draw,<sp/>scanning<sp/>y<sp/></highlight></codeline>
<codeline lineno="3314"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3315"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(y<sp/>=<sp/>miny;<sp/>(y<sp/>&lt;=<sp/>maxy);<sp/>y++)<sp/>{</highlight></codeline>
<codeline lineno="3317"><highlight class="normal"><sp/><sp/><sp/><sp/>ints<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>(i<sp/>&lt;<sp/>n);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!i)<sp/>{</highlight></codeline>
<codeline lineno="3320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ind1<sp/>=<sp/>n<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="3321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ind2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ind1<sp/>=<sp/>i<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="3324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ind2<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="3325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>vy[ind1];</highlight></codeline>
<codeline lineno="3327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y2<sp/>=<sp/>vy[ind2];</highlight></codeline>
<codeline lineno="3328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y1<sp/>&lt;<sp/>y2)<sp/>{</highlight></codeline>
<codeline lineno="3329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>vx[ind1];</highlight></codeline>
<codeline lineno="3330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x2<sp/>=<sp/>vx[ind2];</highlight></codeline>
<codeline lineno="3331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y1<sp/>&gt;<sp/>y2)<sp/>{</highlight></codeline>
<codeline lineno="3332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y2<sp/>=<sp/>vy[ind1];</highlight></codeline>
<codeline lineno="3333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>vy[ind2];</highlight></codeline>
<codeline lineno="3334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x2<sp/>=<sp/>vx[ind1];</highlight></codeline>
<codeline lineno="3335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>vx[ind2];</highlight></codeline>
<codeline lineno="3336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((y<sp/>&gt;=<sp/>y1)<sp/>&amp;&amp;<sp/>(y<sp/>&lt;<sp/>y2))<sp/>{</highlight></codeline>
<codeline lineno="3340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gfxPrimitivesPolyInts[ints++]<sp/>=<sp/>(y<sp/>-<sp/>y1)<sp/>*<sp/>(x2<sp/>-<sp/>x1)<sp/>/<sp/>(y2<sp/>-<sp/>y1)<sp/>+<sp/>x1;</highlight></codeline>
<codeline lineno="3341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((y<sp/>==<sp/>maxy)<sp/>&amp;&amp;<sp/>(y<sp/>&gt;<sp/>y1)<sp/>&amp;&amp;<sp/>(y<sp/>&lt;=<sp/>y2))<sp/>{</highlight></codeline>
<codeline lineno="3342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gfxPrimitivesPolyInts[ints++]<sp/>=<sp/>(y<sp/>-<sp/>y1)<sp/>*<sp/>(x2<sp/>-<sp/>x1)<sp/>/<sp/>(y2<sp/>-<sp/>y1)<sp/>+<sp/>x1;</highlight></codeline>
<codeline lineno="3343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3344"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3345"><highlight class="normal"><sp/><sp/><sp/><sp/>qsort(gfxPrimitivesPolyInts,<sp/>ints,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/>gfxPrimitivesCompareInt);</highlight></codeline>
<codeline lineno="3346"><highlight class="normal"></highlight></codeline>
<codeline lineno="3347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>(i<sp/>&lt;<sp/>ints);<sp/>i<sp/>+=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="3348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>hlineColor(dst,<sp/>gfxPrimitivesPolyInts[i],<sp/>gfxPrimitivesPolyInts[i<sp/>+<sp/>1],<sp/>y,<sp/>color);</highlight></codeline>
<codeline lineno="3349"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3350"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3351"><highlight class="normal"></highlight></codeline>
<codeline lineno="3352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(result);</highlight></codeline>
<codeline lineno="3353"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3354"><highlight class="normal"></highlight></codeline>
<codeline lineno="3355"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>filledPolygonRGBA(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>*<sp/>vx,<sp/>Sint16<sp/>*<sp/>vy,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/>Uint8<sp/>r,<sp/>Uint8<sp/>g,<sp/>Uint8<sp/>b,<sp/>Uint8<sp/>a)</highlight></codeline>
<codeline lineno="3356"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3358"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Draw<sp/></highlight></codeline>
<codeline lineno="3359"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(filledPolygonColor</highlight></codeline>
<codeline lineno="3361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(dst,<sp/>vx,<sp/>vy,<sp/>n,<sp/>((Uint32)<sp/>r<sp/>&lt;&lt;<sp/>24)<sp/>|<sp/>((Uint32)<sp/>g<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>((Uint32)<sp/>b<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>(Uint32)<sp/>a));</highlight></codeline>
<codeline lineno="3362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3363"><highlight class="normal"></highlight></codeline>
<codeline lineno="3364"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>gfxPrimitivesCompareInt(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*b)</highlight></codeline>
<codeline lineno="3365"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>a)<sp/>-<sp/>(*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>b);</highlight></codeline>
<codeline lineno="3367"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3368"><highlight class="normal"></highlight></codeline>
<codeline lineno="3369"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----<sp/>Character<sp/>(8x8<sp/>internal<sp/>font)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3370"><highlight class="normal"></highlight></codeline>
<codeline lineno="3371"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>SDL_Surface<sp/>*gfxPrimitivesFont[256];</highlight></codeline>
<codeline lineno="3372"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Uint32<sp/>gfxPrimitivesFontColor[256];</highlight></codeline>
<codeline lineno="3373"><highlight class="normal"></highlight></codeline>
<codeline lineno="3374"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>characterColor(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>x,<sp/>Sint16<sp/>y,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c,<sp/>Uint32<sp/>color)</highlight></codeline>
<codeline lineno="3375"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3376"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>left,<sp/>right,<sp/>top,<sp/>bottom;</highlight></codeline>
<codeline lineno="3377"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>x1,<sp/>y1,<sp/>x2,<sp/>y2;</highlight></codeline>
<codeline lineno="3378"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_Rect<sp/>srect;</highlight></codeline>
<codeline lineno="3379"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_Rect<sp/>drect;</highlight></codeline>
<codeline lineno="3380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="3381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ix,<sp/>iy,<sp/>k;</highlight></codeline>
<codeline lineno="3382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*charpos;</highlight></codeline>
<codeline lineno="3383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>bits[8]<sp/>=<sp/>{<sp/>128,<sp/>64,<sp/>32,<sp/>16,<sp/>8,<sp/>4,<sp/>2,<sp/>1<sp/>};</highlight></codeline>
<codeline lineno="3384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*bitpos;</highlight></codeline>
<codeline lineno="3385"><highlight class="normal"><sp/><sp/><sp/><sp/>Uint8<sp/>*curpos;</highlight></codeline>
<codeline lineno="3386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>forced_redraw;</highlight></codeline>
<codeline lineno="3387"><highlight class="normal"></highlight></codeline>
<codeline lineno="3388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3389"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Get<sp/>clipping<sp/>boundary<sp/></highlight></codeline>
<codeline lineno="3390"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3391"><highlight class="normal"><sp/><sp/><sp/><sp/>left<sp/>=<sp/>dst-&gt;clip_rect.x;</highlight></codeline>
<codeline lineno="3392"><highlight class="normal"><sp/><sp/><sp/><sp/>right<sp/>=<sp/>dst-&gt;clip_rect.x<sp/>+<sp/>dst-&gt;clip_rect.w<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="3393"><highlight class="normal"><sp/><sp/><sp/><sp/>top<sp/>=<sp/>dst-&gt;clip_rect.y;</highlight></codeline>
<codeline lineno="3394"><highlight class="normal"><sp/><sp/><sp/><sp/>bottom<sp/>=<sp/>dst-&gt;clip_rect.y<sp/>+<sp/>dst-&gt;clip_rect.h<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="3395"><highlight class="normal"></highlight></codeline>
<codeline lineno="3396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3397"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Test<sp/>if<sp/>bounding<sp/>box<sp/>of<sp/>character<sp/>is<sp/>visible<sp/></highlight></codeline>
<codeline lineno="3398"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3399"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="3400"><highlight class="normal"><sp/><sp/><sp/><sp/>x2<sp/>=<sp/>x<sp/>+<sp/>8;</highlight></codeline>
<codeline lineno="3401"><highlight class="normal"><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="3402"><highlight class="normal"><sp/><sp/><sp/><sp/>y2<sp/>=<sp/>y<sp/>+<sp/>8;</highlight></codeline>
<codeline lineno="3403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((x1&lt;left)<sp/>&amp;&amp;<sp/>(x2&lt;left))<sp/>{</highlight></codeline>
<codeline lineno="3404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="3405"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="3406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((x1&gt;right)<sp/>&amp;&amp;<sp/>(x2&gt;right))<sp/>{</highlight></codeline>
<codeline lineno="3407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="3408"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="3409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((y1&lt;top)<sp/>&amp;&amp;<sp/>(y2&lt;top))<sp/>{</highlight></codeline>
<codeline lineno="3410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="3411"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="3412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((y1&gt;bottom)<sp/>&amp;&amp;<sp/>(y2&gt;bottom))<sp/>{</highlight></codeline>
<codeline lineno="3413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="3414"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="3415"><highlight class="normal"></highlight></codeline>
<codeline lineno="3416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3417"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Setup<sp/>source<sp/>rectangle<sp/>for<sp/>8x8<sp/>bitmap<sp/></highlight></codeline>
<codeline lineno="3418"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3419"><highlight class="normal"><sp/><sp/><sp/><sp/>srect.x<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3420"><highlight class="normal"><sp/><sp/><sp/><sp/>srect.y<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3421"><highlight class="normal"><sp/><sp/><sp/><sp/>srect.w<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="3422"><highlight class="normal"><sp/><sp/><sp/><sp/>srect.h<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="3423"><highlight class="normal"></highlight></codeline>
<codeline lineno="3424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3425"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Setup<sp/>destination<sp/>rectangle<sp/>for<sp/>8x8<sp/>bitmap<sp/></highlight></codeline>
<codeline lineno="3426"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3427"><highlight class="normal"><sp/><sp/><sp/><sp/>drect.x<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="3428"><highlight class="normal"><sp/><sp/><sp/><sp/>drect.y<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="3429"><highlight class="normal"><sp/><sp/><sp/><sp/>drect.w<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="3430"><highlight class="normal"><sp/><sp/><sp/><sp/>drect.h<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="3431"><highlight class="normal"></highlight></codeline>
<codeline lineno="3432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3433"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Create<sp/>new<sp/>8x8<sp/>bitmap<sp/>surface<sp/>if<sp/>not<sp/>already<sp/>present<sp/></highlight></codeline>
<codeline lineno="3434"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gfxPrimitivesFont[(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>c]<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="3436"><highlight class="normal"><sp/><sp/><sp/><sp/>gfxPrimitivesFont[(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)<sp/>c]<sp/>=</highlight></codeline>
<codeline lineno="3437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SDL_CreateRGBSurface(SDL_SWSURFACE<sp/>|<sp/>SDL_HWSURFACE<sp/>|<sp/>SDL_SRCALPHA,<sp/>8,<sp/>8,</highlight></codeline>
<codeline lineno="3438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>32,<sp/>0xFF000000,<sp/>0x00FF0000,<sp/>0x0000FF00,<sp/>0x000000FF);</highlight></codeline>
<codeline lineno="3439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3440"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Check<sp/>pointer<sp/></highlight></codeline>
<codeline lineno="3441"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gfxPrimitivesFont[(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>c]<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="3443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(-1);</highlight></codeline>
<codeline lineno="3444"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3446"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Definitely<sp/>redraw<sp/></highlight></codeline>
<codeline lineno="3447"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3448"><highlight class="normal"><sp/><sp/><sp/><sp/>forced_redraw<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3449"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3450"><highlight class="normal"><sp/><sp/><sp/><sp/>forced_redraw<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3451"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3452"><highlight class="normal"></highlight></codeline>
<codeline lineno="3453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3454"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Check<sp/>if<sp/>color<sp/>has<sp/>changed<sp/></highlight></codeline>
<codeline lineno="3455"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((gfxPrimitivesFontColor[(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>c]<sp/>!=<sp/>color)<sp/>||<sp/>(forced_redraw))<sp/>{</highlight></codeline>
<codeline lineno="3457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3458"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Redraw<sp/>character<sp/></highlight></codeline>
<codeline lineno="3459"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3460"><highlight class="normal"><sp/><sp/><sp/><sp/>SDL_SetAlpha(gfxPrimitivesFont[(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>c],<sp/>SDL_SRCALPHA,<sp/>255);</highlight></codeline>
<codeline lineno="3461"><highlight class="normal"><sp/><sp/><sp/><sp/>gfxPrimitivesFontColor[(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)<sp/>c]<sp/>=<sp/>color;</highlight></codeline>
<codeline lineno="3462"><highlight class="normal"></highlight></codeline>
<codeline lineno="3463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3464"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Variable<sp/>setup<sp/></highlight></codeline>
<codeline lineno="3465"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3466"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)<sp/>c;</highlight></codeline>
<codeline lineno="3467"><highlight class="normal"><sp/><sp/><sp/><sp/>k<sp/>*=<sp/>8;</highlight></codeline>
<codeline lineno="3468"><highlight class="normal"><sp/><sp/><sp/><sp/>charpos<sp/>=<sp/>gfxPrimitivesFontdata;</highlight></codeline>
<codeline lineno="3469"><highlight class="normal"><sp/><sp/><sp/><sp/>charpos<sp/>+=<sp/>k;</highlight></codeline>
<codeline lineno="3470"><highlight class="normal"></highlight></codeline>
<codeline lineno="3471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3472"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Clear<sp/>bitmap<sp/></highlight></codeline>
<codeline lineno="3473"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3474"><highlight class="normal"><sp/><sp/><sp/><sp/>curpos<sp/>=<sp/>(Uint8<sp/>*)<sp/>gfxPrimitivesFont[(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>c]-&gt;pixels;</highlight></codeline>
<codeline lineno="3475"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(curpos,<sp/>0,<sp/>8<sp/>*<sp/>8<sp/>*<sp/>4);</highlight></codeline>
<codeline lineno="3476"><highlight class="normal"></highlight></codeline>
<codeline lineno="3477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3478"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Drawing<sp/>loop<sp/></highlight></codeline>
<codeline lineno="3479"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(iy<sp/>=<sp/>0;<sp/>iy<sp/>&lt;<sp/>8;<sp/>iy++)<sp/>{</highlight></codeline>
<codeline lineno="3481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bitpos<sp/>=<sp/>bits;</highlight></codeline>
<codeline lineno="3482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ix<sp/>=<sp/>0;<sp/>ix<sp/>&lt;<sp/>8;<sp/>ix++)<sp/>{</highlight></codeline>
<codeline lineno="3483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*charpos<sp/>&amp;<sp/>*bitpos)<sp/>==<sp/>*bitpos)<sp/>{</highlight></codeline>
<codeline lineno="3484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(curpos,<sp/>&amp;color,<sp/>4);</highlight></codeline>
<codeline lineno="3485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bitpos++;</highlight></codeline>
<codeline lineno="3487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>curpos<sp/>+=<sp/>4;;</highlight></codeline>
<codeline lineno="3488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>charpos++;</highlight></codeline>
<codeline lineno="3490"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3491"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3492"><highlight class="normal"></highlight></codeline>
<codeline lineno="3493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3494"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Draw<sp/>bitmap<sp/>onto<sp/>destination<sp/>surface<sp/></highlight></codeline>
<codeline lineno="3495"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3496"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>SDL_BlitSurface(gfxPrimitivesFont[(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>c],<sp/>&amp;srect,<sp/>dst,<sp/>&amp;drect);</highlight></codeline>
<codeline lineno="3497"><highlight class="normal"></highlight></codeline>
<codeline lineno="3498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(result);</highlight></codeline>
<codeline lineno="3499"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3500"><highlight class="normal"></highlight></codeline>
<codeline lineno="3501"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>characterRGBA(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>x,<sp/>Sint16<sp/>y,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c,<sp/>Uint8<sp/>r,<sp/>Uint8<sp/>g,<sp/>Uint8<sp/>b,<sp/>Uint8<sp/>a)</highlight></codeline>
<codeline lineno="3502"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3504"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Draw<sp/></highlight></codeline>
<codeline lineno="3505"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(characterColor(dst,<sp/>x,<sp/>y,<sp/>c,<sp/>((Uint32)<sp/>r<sp/>&lt;&lt;<sp/>24)<sp/>|<sp/>((Uint32)<sp/>g<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>((Uint32)<sp/>b<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>(Uint32)<sp/>a));</highlight></codeline>
<codeline lineno="3507"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3508"><highlight class="normal"></highlight></codeline>
<codeline lineno="3509"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stringColor(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>x,<sp/>Sint16<sp/>y,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c,<sp/>Uint32<sp/>color)</highlight></codeline>
<codeline lineno="3510"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="3512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>length;</highlight></codeline>
<codeline lineno="3513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*curchar;</highlight></codeline>
<codeline lineno="3514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>curx;</highlight></codeline>
<codeline lineno="3515"><highlight class="normal"></highlight></codeline>
<codeline lineno="3516"><highlight class="normal"><sp/><sp/><sp/><sp/>length<sp/>=<sp/>strlen(c);</highlight></codeline>
<codeline lineno="3517"><highlight class="normal"><sp/><sp/><sp/><sp/>curchar<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="3518"><highlight class="normal"><sp/><sp/><sp/><sp/>curx<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="3519"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3521"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>characterColor(dst,<sp/>curx,<sp/>y,<sp/>*curchar,<sp/>color);</highlight></codeline>
<codeline lineno="3522"><highlight class="normal"><sp/><sp/><sp/><sp/>curchar++;</highlight></codeline>
<codeline lineno="3523"><highlight class="normal"><sp/><sp/><sp/><sp/>curx<sp/>+=<sp/>8;</highlight></codeline>
<codeline lineno="3524"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3525"><highlight class="normal"></highlight></codeline>
<codeline lineno="3526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(result);</highlight></codeline>
<codeline lineno="3527"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3528"><highlight class="normal"></highlight></codeline>
<codeline lineno="3529"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stringRGBA(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>x,<sp/>Sint16<sp/>y,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c,<sp/>Uint8<sp/>r,<sp/>Uint8<sp/>g,<sp/>Uint8<sp/>b,<sp/>Uint8<sp/>a)</highlight></codeline>
<codeline lineno="3530"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3532"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Draw<sp/></highlight></codeline>
<codeline lineno="3533"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(stringColor(dst,<sp/>x,<sp/>y,<sp/>c,<sp/>((Uint32)<sp/>r<sp/>&lt;&lt;<sp/>24)<sp/>|<sp/>((Uint32)<sp/>g<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>((Uint32)<sp/>b<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>(Uint32)<sp/>a));</highlight></codeline>
<codeline lineno="3535"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3536"><highlight class="normal"></highlight></codeline>
<codeline lineno="3537"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>----<sp/>Bezier<sp/>curve<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3538"><highlight class="normal"></highlight></codeline>
<codeline lineno="3539"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3540"><highlight class="comment"><sp/>Calculate<sp/>bezier<sp/>interpolator<sp/>of<sp/>data<sp/>array<sp/>with<sp/>ndata<sp/>values<sp/>at<sp/>position<sp/>&apos;t&apos;</highlight></codeline>
<codeline lineno="3541"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3542"><highlight class="normal"></highlight></codeline>
<codeline lineno="3543"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>evaluateBezier<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ndata,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t)<sp/></highlight></codeline>
<codeline lineno="3544"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3545"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mu,<sp/>result;</highlight></codeline>
<codeline lineno="3546"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,k,kn,nn,nkn;</highlight></codeline>
<codeline lineno="3547"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>blend,muk,munk;</highlight></codeline>
<codeline lineno="3548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3549"><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>Sanity<sp/>check<sp/>bounds<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3550"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t&lt;0.0)<sp/>{</highlight></codeline>
<codeline lineno="3551"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(data[0]);</highlight></codeline>
<codeline lineno="3552"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="3553"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t&gt;=(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)ndata)<sp/>{</highlight></codeline>
<codeline lineno="3554"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(data[ndata-1]);</highlight></codeline>
<codeline lineno="3555"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="3556"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="3557"><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>Adjust<sp/>t<sp/>to<sp/>the<sp/>range<sp/>0.0<sp/>to<sp/>1.0<sp/>*/</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="3558"><highlight class="normal"><sp/>mu=t/(double)ndata;</highlight></codeline>
<codeline lineno="3559"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="3560"><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>interpolate<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3561"><highlight class="normal"><sp/>n=ndata-1;</highlight></codeline>
<codeline lineno="3562"><highlight class="normal"><sp/>result=0.0;</highlight></codeline>
<codeline lineno="3563"><highlight class="normal"><sp/>muk<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3564"><highlight class="normal"><sp/>munk<sp/>=<sp/>pow(1-mu,(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)n);</highlight></codeline>
<codeline lineno="3565"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=0;k&lt;=n;k++)<sp/>{</highlight></codeline>
<codeline lineno="3566"><highlight class="normal"><sp/><sp/>nn<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="3567"><highlight class="normal"><sp/><sp/>kn<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="3568"><highlight class="normal"><sp/><sp/>nkn<sp/>=<sp/>n<sp/>-<sp/>k;</highlight></codeline>
<codeline lineno="3569"><highlight class="normal"><sp/><sp/>blend<sp/>=<sp/>muk<sp/>*<sp/>munk;</highlight></codeline>
<codeline lineno="3570"><highlight class="normal"><sp/><sp/>muk<sp/>*=<sp/>mu;</highlight></codeline>
<codeline lineno="3571"><highlight class="normal"><sp/><sp/>munk<sp/>/=<sp/>(1-mu);</highlight></codeline>
<codeline lineno="3572"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(nn<sp/>&gt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="3573"><highlight class="normal"><sp/><sp/><sp/>blend<sp/>*=<sp/>nn;</highlight></codeline>
<codeline lineno="3574"><highlight class="normal"><sp/><sp/><sp/>nn--;</highlight></codeline>
<codeline lineno="3575"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kn<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="3576"><highlight class="normal"><sp/><sp/><sp/><sp/>blend<sp/>/=<sp/>(double)kn;</highlight></codeline>
<codeline lineno="3577"><highlight class="normal"><sp/><sp/><sp/><sp/>kn--;</highlight></codeline>
<codeline lineno="3578"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3579"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nkn<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="3580"><highlight class="normal"><sp/><sp/><sp/><sp/>blend<sp/>/=<sp/>(double)nkn;</highlight></codeline>
<codeline lineno="3581"><highlight class="normal"><sp/><sp/><sp/><sp/>nkn--;</highlight></codeline>
<codeline lineno="3582"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3583"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3584"><highlight class="normal"><sp/><sp/>result<sp/>+=<sp/>data[k]<sp/>*<sp/>blend;</highlight></codeline>
<codeline lineno="3585"><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="3586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3587"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="3588"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3589"><highlight class="normal"></highlight></codeline>
<codeline lineno="3590"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bezierColor(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>*<sp/>vx,<sp/>Sint16<sp/>*<sp/>vy,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s,<sp/>Uint32<sp/>color)</highlight></codeline>
<codeline lineno="3591"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="3593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="3594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*x,<sp/>*y,<sp/>t,<sp/>stepsize;</highlight></codeline>
<codeline lineno="3595"><highlight class="normal"><sp/><sp/><sp/><sp/>Sint16<sp/>x1,<sp/>y1,<sp/>x2,<sp/>y2;</highlight></codeline>
<codeline lineno="3596"><highlight class="normal"></highlight></codeline>
<codeline lineno="3597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3598"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Sanity<sp/>check<sp/></highlight></codeline>
<codeline lineno="3599"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="3601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(-1);</highlight></codeline>
<codeline lineno="3602"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>&lt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="3604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(-1);</highlight></codeline>
<codeline lineno="3605"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3608"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Variable<sp/>setup<sp/></highlight></codeline>
<codeline lineno="3609"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3610"><highlight class="normal"><sp/><sp/><sp/><sp/>stepsize=(double)1.0/(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)s;</highlight></codeline>
<codeline lineno="3611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Transfer<sp/>vertices<sp/>into<sp/>float<sp/>arrays<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((x=(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)*(n+1)))==NULL)<sp/>{</highlight></codeline>
<codeline lineno="3614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(-1);</highlight></codeline>
<codeline lineno="3615"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((y=(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*)malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)*(n+1)))==NULL)<sp/>{</highlight></codeline>
<codeline lineno="3617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>free(x);</highlight></codeline>
<codeline lineno="3618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(-1);</highlight></codeline>
<codeline lineno="3619"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>x[i]=vx[i];</highlight></codeline>
<codeline lineno="3622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>y[i]=vy[i];</highlight></codeline>
<codeline lineno="3623"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3624"><highlight class="normal"><sp/><sp/><sp/><sp/>x[n]=vx[0];</highlight></codeline>
<codeline lineno="3625"><highlight class="normal"><sp/><sp/><sp/><sp/>y[n]=vy[0];</highlight></codeline>
<codeline lineno="3626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3628"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Draw<sp/></highlight></codeline>
<codeline lineno="3629"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3630"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3631"><highlight class="normal"><sp/><sp/><sp/><sp/>t=0.0;</highlight></codeline>
<codeline lineno="3632"><highlight class="normal"><sp/><sp/><sp/><sp/>x1=evaluateBezier(x,n+1,t);</highlight></codeline>
<codeline lineno="3633"><highlight class="normal"><sp/><sp/><sp/><sp/>y1=evaluateBezier(y,n+1,t);</highlight></codeline>
<codeline lineno="3634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>(n*s);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3635"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>+=<sp/>stepsize;</highlight></codeline>
<codeline lineno="3636"><highlight class="normal"><sp/><sp/><sp/><sp/>x2=(Sint16)evaluateBezier(x,n,t);</highlight></codeline>
<codeline lineno="3637"><highlight class="normal"><sp/><sp/><sp/><sp/>y2=(Sint16)evaluateBezier(y,n,t);</highlight></codeline>
<codeline lineno="3638"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>lineColor(dst,<sp/>x1,<sp/>y1,<sp/>x2,<sp/>y2,<sp/>color);</highlight></codeline>
<codeline lineno="3639"><highlight class="normal"><sp/><sp/><sp/><sp/>x1<sp/>=<sp/>x2;</highlight></codeline>
<codeline lineno="3640"><highlight class="normal"><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>y2;</highlight></codeline>
<codeline lineno="3641"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3642"><highlight class="normal"></highlight></codeline>
<codeline lineno="3643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clean<sp/>up<sp/>temporary<sp/>array<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3644"><highlight class="normal"><sp/><sp/><sp/><sp/>free(x);</highlight></codeline>
<codeline lineno="3645"><highlight class="normal"><sp/><sp/><sp/><sp/>free(y);</highlight></codeline>
<codeline lineno="3646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="3647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(result);</highlight></codeline>
<codeline lineno="3648"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3649"><highlight class="normal"></highlight></codeline>
<codeline lineno="3650"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bezierRGBA(SDL_Surface<sp/>*<sp/>dst,<sp/>Sint16<sp/>*<sp/>vx,<sp/>Sint16<sp/>*<sp/>vy,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s,<sp/>Uint8<sp/>r,<sp/>Uint8<sp/>g,<sp/>Uint8<sp/>b,<sp/>Uint8<sp/>a)</highlight></codeline>
<codeline lineno="3651"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3653"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Draw<sp/></highlight></codeline>
<codeline lineno="3654"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(bezierColor(dst,<sp/>vx,<sp/>vy,<sp/>n,<sp/>s,<sp/>((Uint32)<sp/>r<sp/>&lt;&lt;<sp/>24)<sp/>|<sp/>((Uint32)<sp/>g<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>((Uint32)<sp/>b<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>(Uint32)<sp/>a));</highlight></codeline>
<codeline lineno="3656"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/SDL_gfxPrimitives.c"/>
  </compounddef>
</doxygen>
