<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.8">
  <compounddef id="iniparser_8h" kind="file">
    <compoundname>iniparser.h</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">ctype.h</includes>
    <includedby refid="iniparser_8c" local="yes">iniparser.c</includedby>
    <includedby refid="main_8cpp" local="yes">main.cpp</includedby>
    <incdepgraph>
      <node id="300">
        <label>stdlib.h</label>
      </node>
      <node id="301">
        <label>string.h</label>
      </node>
      <node id="302">
        <label>ctype.h</label>
      </node>
      <node id="298">
        <label>iniparser.h</label>
        <link refid="iniparser.h"/>
        <childnode refid="299" relation="include">
        </childnode>
        <childnode refid="300" relation="include">
        </childnode>
        <childnode refid="301" relation="include">
        </childnode>
        <childnode refid="302" relation="include">
        </childnode>
      </node>
      <node id="299">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct__dictionary__" prot="public">_dictionary_</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="iniparser_8h_1a5bd3b2ce42b776c76755ec65642f43af" prot="public" static="no">
        <type>struct <ref refid="struct__dictionary__" kindref="compound">_dictionary_</ref></type>
        <definition>typedef struct _dictionary_  dictionary</definition>
        <argsstring></argsstring>
        <name>dictionary</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/iniparser.h" line="55" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="iniparser_8h_1ad4f87956101b9a2d1f22def4c9744c3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct__dictionary__" kindref="compound">dictionary</ref> *</type>
        <definition>dictionary* iniparser_new</definition>
        <argsstring>(char *ininame)</argsstring>
        <name>iniparser_new</name>
        <param>
          <type>char *</type>
          <declname>ininame</declname>
        </param>
        <briefdescription>
<para>Parse an ini file and return an allocated dictionary object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ininame</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the ini file to read. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to newly allocated dictionary</para></simplesect>
This is the parser for ini files. This function is called, providing the name of the file to be read. It returns a dictionary object that should not be accessed directly, but through accessor functions instead.</para><para>The returned dictionary must be freed using iniparser_free(). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/iniparser.h" line="60" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/iniparser.c" bodystart="915" bodyend="966"/>
      </memberdef>
      <memberdef kind="function" id="iniparser_8h_1a71a0b92e14987e410d5c6c5b276c4f3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void iniparser_free</definition>
        <argsstring>(dictionary *d)</argsstring>
        <name>iniparser_free</name>
        <param>
          <type><ref refid="struct__dictionary__" kindref="compound">dictionary</ref> *</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Free all memory associated to an ini dictionary. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Dictionary to free </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void</para></simplesect>
Free all memory associated to an ini dictionary. It is mandatory to call this function before the dictionary object gets out of the current context. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/iniparser.h" line="61" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/iniparser.c" bodystart="982" bodyend="985"/>
      </memberdef>
      <memberdef kind="function" id="iniparser_8h_1a0b5d6cdc7587e2d27a30f5cdc4a91931" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int iniparser_getnsec</definition>
        <argsstring>(dictionary *d)</argsstring>
        <name>iniparser_getnsec</name>
        <param>
          <type><ref refid="struct__dictionary__" kindref="compound">dictionary</ref> *</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Get number of sections in a dictionary. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Dictionary to examine </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int Number of sections found in dictionary</para></simplesect>
This function returns the number of sections found in a dictionary. The test to recognize sections is done on the string stored in the dictionary: a section name is given as &quot;section&quot; whereas a key is stored as &quot;section:key&quot;, thus the test looks for entries that do not contain a colon.</para><para>This clearly fails in the case a section name contains a colon, but this should simply be avoided.</para><para>This function returns -1 in case of error. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/iniparser.h" line="63" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/iniparser.c" bodystart="558" bodyend="573"/>
      </memberdef>
      <memberdef kind="function" id="iniparser_8h_1a393212be805f395bbfdeb1bafa8bb72a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* iniparser_getsecname</definition>
        <argsstring>(dictionary *d, int n)</argsstring>
        <name>iniparser_getsecname</name>
        <param>
          <type><ref refid="struct__dictionary__" kindref="compound">dictionary</ref> *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Get name for section n in a dictionary. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Dictionary to examine </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>Section number (from 0 to nsec-1). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to char string</para></simplesect>
This function locates the n-th section in a dictionary and returns its name as a pointer to a string statically allocated inside the dictionary. Do not free or modify the returned string!</para><para>This function returns NULL in case of error. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/iniparser.h" line="64" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/iniparser.c" bodystart="591" bodyend="611"/>
      </memberdef>
      <memberdef kind="function" id="iniparser_8h_1a046436b3489cd8854ba8e29109250324" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void iniparser_dump</definition>
        <argsstring>(dictionary *d, FILE *f)</argsstring>
        <name>iniparser_dump</name>
        <param>
          <type><ref refid="struct__dictionary__" kindref="compound">dictionary</ref> *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Dump a dictionary to an opened file pointer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Dictionary to dump. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>Opened file pointer to dump to. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void</para></simplesect>
This function prints out the contents of a dictionary, one element by line, onto the provided file pointer. It is OK to specify <computeroutput>stderr</computeroutput> or <computeroutput>stdout</computeroutput> as output files. This function is meant for debugging purposes mostly. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/iniparser.h" line="65" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/iniparser.c" bodystart="627" bodyend="630"/>
      </memberdef>
      <memberdef kind="function" id="iniparser_8h_1aece0e32de371c9e9592d8333f816dfac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void iniparser_dump_ini</definition>
        <argsstring>(dictionary *d, FILE *f)</argsstring>
        <name>iniparser_dump_ini</name>
        <param>
          <type><ref refid="struct__dictionary__" kindref="compound">dictionary</ref> *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Save a dictionary to a loadable ini file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Dictionary to dump </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>Opened file pointer to dump to </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void</para></simplesect>
This function dumps a given dictionary into a loadable ini file. It is Ok to specify <computeroutput>stderr</computeroutput> or <computeroutput>stdout</computeroutput> as output files. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/iniparser.h" line="66" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/iniparser.c" bodystart="645" bodyend="683"/>
      </memberdef>
      <memberdef kind="function" id="iniparser_8h_1ad44bfb1c58f061f66504f9a7c9a4dc3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* iniparser_getkey</definition>
        <argsstring>(dictionary *d, char *section, char *key)</argsstring>
        <name>iniparser_getkey</name>
        <param>
          <type><ref refid="struct__dictionary__" kindref="compound">dictionary</ref> *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>section</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/iniparser.h" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="iniparser_8h_1ad0e2e1c9334996d83e098d61588d8f15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* iniparser_getstr</definition>
        <argsstring>(dictionary *d, char *key)</argsstring>
        <name>iniparser_getstr</name>
        <param>
          <type><ref refid="struct__dictionary__" kindref="compound">dictionary</ref> *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Get the string associated to a key, return NULL if not found. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Dictionary to search </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key string to look for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to statically allocated character string, or NULL.</para></simplesect>
This function queries a dictionary for a key. A key as read from an ini file is given as &quot;section:key&quot;. If the key cannot be found, NULL is returned. The returned char pointer is pointing to a string allocated in the dictionary, do not free or modify it.</para><para>This function is only provided for backwards compatibility with previous versions of iniparser. It is recommended to use iniparser_getstring() instead. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/iniparser.h" line="68" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/iniparser.c" bodystart="703" bodyend="706"/>
      </memberdef>
      <memberdef kind="function" id="iniparser_8h_1aec2e5539bc2be063d1323cdf65f162a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* iniparser_getstring</definition>
        <argsstring>(dictionary *d, char *key, char *def)</argsstring>
        <name>iniparser_getstring</name>
        <param>
          <type><ref refid="struct__dictionary__" kindref="compound">dictionary</ref> *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>def</declname>
        </param>
        <briefdescription>
<para>Get the string associated to a key. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Dictionary to search </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key string to look for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>def</parametername>
</parameternamelist>
<parameterdescription>
<para>Default value to return if key not found. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to statically allocated character string</para></simplesect>
This function queries a dictionary for a key. A key as read from an ini file is given as &quot;section:key&quot;. If the key cannot be found, the pointer passed as &apos;def&apos; is returned. The returned char pointer is pointing to a string allocated in the dictionary, do not free or modify it. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/iniparser.h" line="69" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/iniparser.c" bodystart="724" bodyend="736"/>
      </memberdef>
      <memberdef kind="function" id="iniparser_8h_1ab813340fa9c9a7fcfe6775d6e5e458c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int iniparser_getint</definition>
        <argsstring>(dictionary *d, char *key, int notfound)</argsstring>
        <name>iniparser_getint</name>
        <param>
          <type><ref refid="struct__dictionary__" kindref="compound">dictionary</ref> *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>int</type>
          <declname>notfound</declname>
        </param>
        <briefdescription>
<para>Get the string associated to a key, convert to an int. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Dictionary to search </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key string to look for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>notfound</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to return in case of error </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>integer</para></simplesect>
This function queries a dictionary for a key. A key as read from an ini file is given as &quot;section:key&quot;. If the key cannot be found, the notfound value is returned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/iniparser.h" line="70" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/iniparser.c" bodystart="753" bodyend="760"/>
      </memberdef>
      <memberdef kind="function" id="iniparser_8h_1a480d35322f1252344cf2246ac21ee559" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double iniparser_getdouble</definition>
        <argsstring>(dictionary *d, char *key, double notfound)</argsstring>
        <name>iniparser_getdouble</name>
        <param>
          <type><ref refid="struct__dictionary__" kindref="compound">dictionary</ref> *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>double</type>
          <declname>notfound</declname>
        </param>
        <briefdescription>
<para>Get the string associated to a key, convert to a double. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Dictionary to search </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key string to look for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>notfound</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to return in case of error </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double</para></simplesect>
This function queries a dictionary for a key. A key as read from an ini file is given as &quot;section:key&quot;. If the key cannot be found, the notfound value is returned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/iniparser.h" line="71" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/iniparser.c" bodystart="776" bodyend="783"/>
      </memberdef>
      <memberdef kind="function" id="iniparser_8h_1aa2ea2b34f6f4b3cf93c9d4f8f992811f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int iniparser_getboolean</definition>
        <argsstring>(dictionary *d, char *key, int notfound)</argsstring>
        <name>iniparser_getboolean</name>
        <param>
          <type><ref refid="struct__dictionary__" kindref="compound">dictionary</ref> *</type>
          <declname>d</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>int</type>
          <declname>notfound</declname>
        </param>
        <briefdescription>
<para>Get the string associated to a key, convert to a boolean. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>Dictionary to search </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Key string to look for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>notfound</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to return in case of error </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>integer</para></simplesect>
This function queries a dictionary for a key. A key as read from an ini file is given as &quot;section:key&quot;. If the key cannot be found, the notfound value is returned.</para><para>A true boolean is found if one of the following is matched:</para><para><itemizedlist>
<listitem><para>A string starting with &apos;y&apos;</para></listitem><listitem><para>A string starting with &apos;Y&apos;</para></listitem><listitem><para>A string starting with &apos;t&apos;</para></listitem><listitem><para>A string starting with &apos;T&apos;</para></listitem><listitem><para>A string starting with &apos;1&apos;</para></listitem></itemizedlist>
</para><para>A false boolean is found if one of the following is matched:</para><para><itemizedlist>
<listitem><para>A string starting with &apos;n&apos;</para></listitem><listitem><para>A string starting with &apos;N&apos;</para></listitem><listitem><para>A string starting with &apos;f&apos;</para></listitem><listitem><para>A string starting with &apos;F&apos;</para></listitem><listitem><para>A string starting with &apos;0&apos;</para></listitem></itemizedlist>
</para><para>The notfound value returned if no boolean is identified, does not necessarily have to be 0 or 1. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/iniparser.h" line="72" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/iniparser.c" bodystart="819" bodyend="834"/>
      </memberdef>
      <memberdef kind="function" id="iniparser_8h_1a3d67c98bbc0cb5239f024ad54bdc63f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int iniparser_find_entry</definition>
        <argsstring>(dictionary *ini, char *entry)</argsstring>
        <name>iniparser_find_entry</name>
        <param>
          <type><ref refid="struct__dictionary__" kindref="compound">dictionary</ref> *</type>
          <declname>ini</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>entry</declname>
        </param>
        <briefdescription>
<para>Finds out if a given entry exists in a dictionary. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ini</parametername>
</parameternamelist>
<parameterdescription>
<para>Dictionary to search </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>entry</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the entry to look for </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>integer 1 if entry exists, 0 otherwise</para></simplesect>
Finds out if a given entry exists in the dictionary. Since sections are stored as keys with NULL associated values, this is the only way of querying for the presence of sections in a dictionary. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/iniparser.h" line="73" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/iniparser.c" bodystart="850" bodyend="860"/>
      </memberdef>
      <memberdef kind="function" id="iniparser_8h_1a605a88057bac4c3249513fc588421c32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int iniparser_setstr</definition>
        <argsstring>(dictionary *ini, char *entry, char *val)</argsstring>
        <name>iniparser_setstr</name>
        <param>
          <type><ref refid="struct__dictionary__" kindref="compound">dictionary</ref> *</type>
          <declname>ini</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>entry</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Set an entry in a dictionary. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ini</parametername>
</parameternamelist>
<parameterdescription>
<para>Dictionary to modify. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>entry</parametername>
</parameternamelist>
<parameterdescription>
<para>Entry to modify (entry name) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>New value to associate to the entry. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int 0 if Ok, -1 otherwise.</para></simplesect>
If the given entry can be found in the dictionary, it is modified to contain the provided value. If it cannot be found, -1 is returned. It is Ok to set val to NULL. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/iniparser.h" line="74" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/iniparser.c" bodystart="878" bodyend="882"/>
      </memberdef>
      <memberdef kind="function" id="iniparser_8h_1a7b1a7f2492a35043867fa801b8f21e52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void iniparser_unset</definition>
        <argsstring>(dictionary *ini, char *entry)</argsstring>
        <name>iniparser_unset</name>
        <param>
          <type><ref refid="struct__dictionary__" kindref="compound">dictionary</ref> *</type>
          <declname>ini</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>entry</declname>
        </param>
        <briefdescription>
<para>Delete an entry in a dictionary. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ini</parametername>
</parameternamelist>
<parameterdescription>
<para>Dictionary to modify </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>entry</parametername>
</parameternamelist>
<parameterdescription>
<para>Entry to delete (entry name) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void</para></simplesect>
If the given entry can be found, it is deleted from the dictionary. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/iniparser.h" line="75" column="1" bodyfile="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/iniparser.c" bodystart="894" bodyend="897"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>Based<sp/>upon<sp/>libiniparser,<sp/>by<sp/>Nicolas<sp/>Devillard</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>Hacked<sp/>into<sp/>1<sp/>file<sp/>(m-iniparser)<sp/>by<sp/>Freek/2005</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>Original<sp/>terms<sp/>following:</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>--<sp/>-</highlight></codeline>
<codeline lineno="7"><highlight class="comment"></highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>Copyright<sp/>(c)<sp/>2000<sp/>by<sp/>Nicolas<sp/>Devillard<sp/>(ndevilla<sp/>AT<sp/>free<sp/>DOT<sp/>fr).</highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>Written<sp/>by<sp/>Nicolas<sp/>Devillard.<sp/>Not<sp/>derived<sp/>from<sp/>licensed<sp/>software.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"></highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>Permission<sp/>is<sp/>granted<sp/>to<sp/>anyone<sp/>to<sp/>use<sp/>this<sp/>software<sp/>for<sp/>any</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>purpose<sp/>on<sp/>any<sp/>computer<sp/>system,<sp/>and<sp/>to<sp/>redistribute<sp/>it<sp/>freely,</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>subject<sp/>to<sp/>the<sp/>following<sp/>restrictions:</highlight></codeline>
<codeline lineno="15"><highlight class="comment"></highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>1.<sp/>The<sp/>author<sp/>is<sp/>not<sp/>responsible<sp/>for<sp/>the<sp/>consequences<sp/>of<sp/>use<sp/>of</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>this<sp/>software,<sp/>no<sp/>matter<sp/>how<sp/>awful,<sp/>even<sp/>if<sp/>they<sp/>arise</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>from<sp/>defects<sp/>in<sp/>it.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"></highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>2.<sp/>The<sp/>origin<sp/>of<sp/>this<sp/>software<sp/>must<sp/>not<sp/>be<sp/>misrepresented,<sp/>either</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>by<sp/>explicit<sp/>claim<sp/>or<sp/>by<sp/>omission.</highlight></codeline>
<codeline lineno="22"><highlight class="comment"></highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>3.<sp/>Altered<sp/>versions<sp/>must<sp/>be<sp/>plainly<sp/>marked<sp/>as<sp/>such,<sp/>and<sp/>must<sp/>not</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>be<sp/>misrepresented<sp/>as<sp/>being<sp/>the<sp/>original<sp/>software.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>4.<sp/>This<sp/>notice<sp/>may<sp/>not<sp/>be<sp/>removed<sp/>or<sp/>altered.</highlight></codeline>
<codeline lineno="27"><highlight class="comment"></highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_INIPARSER_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_INIPARSER_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctype.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="struct__dictionary__" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__dictionary__" kindref="compound">_dictionary_</ref><sp/>{</highlight></codeline>
<codeline lineno="46" refid="struct__dictionary___1ac93e659a505b71aa87b8b558b55ee872" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct__dictionary___1ac93e659a505b71aa87b8b558b55ee872" kindref="member">n</ref>;</highlight></codeline>
<codeline lineno="48" refid="struct__dictionary___1a2d90a3894737abd3270d8b9aefaac5ef" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct__dictionary___1a2d90a3894737abd3270d8b9aefaac5ef" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="50" refid="struct__dictionary___1a7a89c8fb24cb365745431d881f8f0afd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**<ref refid="struct__dictionary___1a7a89c8fb24cb365745431d881f8f0afd" kindref="member">val</ref>;</highlight></codeline>
<codeline lineno="52" refid="struct__dictionary___1a3c962bd7edff49be125396596d1bec75" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**<ref refid="struct__dictionary___1a3c962bd7edff49be125396596d1bec75" kindref="member">key</ref><sp/>;</highlight></codeline>
<codeline lineno="54" refid="struct__dictionary___1a017aee3083b2fc453bcf2d7b5b51af86" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>*<ref refid="struct__dictionary___1a017aee3083b2fc453bcf2d7b5b51af86" kindref="member">hash</ref>;</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}<sp/><ref refid="struct__dictionary__" kindref="compound">dictionary</ref><sp/>;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>generated<sp/>by<sp/>genproto<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><ref refid="struct__dictionary__" kindref="compound">dictionary</ref><sp/>*<sp/>iniparser_new(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ininame);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>iniparser_free(<ref refid="struct__dictionary__" kindref="compound">dictionary</ref><sp/>*<sp/>d);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iniparser_getnsec(<ref refid="struct__dictionary__" kindref="compound">dictionary</ref><sp/>*<sp/>d);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>iniparser_getsecname(<ref refid="struct__dictionary__" kindref="compound">dictionary</ref><sp/>*<sp/>d,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>iniparser_dump(<ref refid="struct__dictionary__" kindref="compound">dictionary</ref><sp/>*<sp/>d,<sp/>FILE<sp/>*<sp/>f);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>iniparser_dump_ini(<ref refid="struct__dictionary__" kindref="compound">dictionary</ref><sp/>*<sp/>d,<sp/>FILE<sp/>*<sp/>f);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>iniparser_getkey(<ref refid="struct__dictionary__" kindref="compound">dictionary</ref><sp/>*d,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*section,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>iniparser_getstr(<ref refid="struct__dictionary__" kindref="compound">dictionary</ref><sp/>*<sp/>d,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>key);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>iniparser_getstring(<ref refid="struct__dictionary__" kindref="compound">dictionary</ref><sp/>*<sp/>d,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>key,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>def);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iniparser_getint(<ref refid="struct__dictionary__" kindref="compound">dictionary</ref><sp/>*<sp/>d,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>key,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>notfound);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>iniparser_getdouble(<ref refid="struct__dictionary__" kindref="compound">dictionary</ref><sp/>*<sp/>d,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>key,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>notfound);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iniparser_getboolean(<ref refid="struct__dictionary__" kindref="compound">dictionary</ref><sp/>*<sp/>d,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>key,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>notfound);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iniparser_find_entry(<ref refid="struct__dictionary__" kindref="compound">dictionary</ref><sp/><sp/>*<sp/><sp/><sp/>ini,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>entry);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iniparser_setstr(<ref refid="struct__dictionary__" kindref="compound">dictionary</ref><sp/>*<sp/>ini,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>entry,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>val);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>iniparser_unset(<ref refid="struct__dictionary__" kindref="compound">dictionary</ref><sp/>*<sp/>ini,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>entry);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/CTXue/Desktop/CPSC/CS410/Mario/src/iniparser.h"/>
  </compounddef>
</doxygen>
